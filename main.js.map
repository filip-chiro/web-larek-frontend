{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/types/index.ts","webpack://my-webpack-project/./src/app.controller.ts","webpack://my-webpack-project/./src/components/features/di/di-container.ts","webpack://my-webpack-project/./src/components/base/api.ts","webpack://my-webpack-project/./src/utils/constants.ts","webpack://my-webpack-project/./src/services/api.service.ts","webpack://my-webpack-project/./src/services/api-order.service.ts","webpack://my-webpack-project/./src/services/api-products.service.ts","webpack://my-webpack-project/./src/services/basket.service.ts","webpack://my-webpack-project/./src/services/modal.service.ts","webpack://my-webpack-project/./src/services/order.service.ts","webpack://my-webpack-project/./src/services/stateful-event-emitter.service.ts","webpack://my-webpack-project/./src/components/base/events.ts","webpack://my-webpack-project/./src/services/validation-order.service.ts","webpack://my-webpack-project/./src/utils/utils.ts","webpack://my-webpack-project/./src/components/features/basket-card.component.ts","webpack://my-webpack-project/./src/components/features/basket-header.component.ts","webpack://my-webpack-project/./src/components/features/basket.component.ts","webpack://my-webpack-project/./src/components/features/card-catalog.component.ts","webpack://my-webpack-project/./src/components/features/card-full.component.ts","webpack://my-webpack-project/./src/components/features/email-phone-order.component.ts","webpack://my-webpack-project/./src/components/features/gallery.component.ts","webpack://my-webpack-project/./src/components/features/modal.component.ts","webpack://my-webpack-project/./src/components/features/payment-address-order.component.ts","webpack://my-webpack-project/./src/components/features/succes-order.component.ts","webpack://my-webpack-project/./src/components/features/di/di-setup.ts","webpack://my-webpack-project/./src/index.ts"],"sourcesContent":["export var EventNames;\n(function (EventNames) {\n    EventNames[\"OPEN_CARD_FULL\"] = \"open-card-full\";\n    EventNames[\"BASKET\"] = \"basket\";\n    EventNames[\"OPEN_CART\"] = \"open-cart\";\n    EventNames[\"ORDER\"] = \"order\";\n    EventNames[\"OPEN_ORDER_ADDRESS_PAYMENT\"] = \"open-order-address-payment\";\n    EventNames[\"OPEN_ORDER_EMAIL_PHONE\"] = \"open-order-email-phone\";\n    EventNames[\"OPEN_SUCCESS_ORDER\"] = \"open-success-order\";\n    EventNames[\"EMAIL_INPUT\"] = \"email-input\";\n    EventNames[\"PHONE_INPUT\"] = \"phone-input\";\n    EventNames[\"ORDER_SUBMIT\"] = \"order-submit\";\n    EventNames[\"ORDER_CLEAR\"] = \"order-clear\";\n    EventNames[\"ORDER_CHANGED\"] = \"order-changed\";\n})(EventNames || (EventNames = {}));\n","import { EventNames } from \"./types\";\n/**\n * Главный контроллер приложения, отвечающий за инициализацию и\n * координацию взаимодействия между сервисами, компонентами и модальными окнами.\n *\n * Основные обязанности:\n * - Загрузка списка продуктов и передача их в галерею для отображения.\n * - Подписка на кастомные события приложения для открытия соответствующих модальных окон.\n * - Обновление информации о корзине в шапке при изменениях.\n *\n * Этот класс служит точкой входа для запуска логики приложения\n * и организации реактивного взаимодействия между слоями.\n */\nexport class AppController {\n    constructor(_apiProductsService, _statefulEventEmitterService, _modalService, _galleryComponent, _basketHeaderComponent, _basketService, _cardFullComponent, _basketComponent, _paymentAddressOrderComponent, _emailPhoneOrderComponent, _successOrderComponent) {\n        this._apiProductsService = _apiProductsService;\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._modalService = _modalService;\n        this._galleryComponent = _galleryComponent;\n        this._basketHeaderComponent = _basketHeaderComponent;\n        this._basketService = _basketService;\n        this._cardFullComponent = _cardFullComponent;\n        this._basketComponent = _basketComponent;\n        this._paymentAddressOrderComponent = _paymentAddressOrderComponent;\n        this._emailPhoneOrderComponent = _emailPhoneOrderComponent;\n        this._successOrderComponent = _successOrderComponent;\n    }\n    /**\n     * Инициализирует приложение:\n     * - загружает продукты и отображает их в галерее;\n     * - устанавливает обработчики кастомных событий для управления модальными окнами и корзиной.\n     */\n    init() {\n        this._loadProductsAndRender();\n        this._initCustomEventListeners();\n    }\n    /**\n     * Загружает список продуктов с API и передаёт их в компонент галереи для рендера.\n     * @private\n     */\n    _loadProductsAndRender() {\n        this._apiProductsService.getAll().then(products => {\n            this._galleryComponent.renderProductList(products);\n        });\n    }\n    /**\n     * Инициализирует подписки на кастомные события приложения.\n     * Обрабатывает открытие различных модальных окон и обновление корзины.\n     * @private\n     */\n    _initCustomEventListeners() {\n        this._statefulEventEmitterService.on(EventNames.OPEN_CARD_FULL, (product) => {\n            this._modalService.open(this._cardFullComponent.render(product));\n        });\n        this._basketService.onBasket(products => {\n            this._basketHeaderComponent.setQuantityProductsInBasket(products.length);\n        });\n        this._statefulEventEmitterService.on(EventNames.OPEN_CART, () => {\n            this._modalService.open(this._basketComponent);\n        });\n        this._statefulEventEmitterService.on(EventNames.OPEN_ORDER_ADDRESS_PAYMENT, () => {\n            this._modalService.open(this._paymentAddressOrderComponent);\n        });\n        this._statefulEventEmitterService.on(EventNames.OPEN_ORDER_EMAIL_PHONE, () => {\n            this._modalService.open(this._emailPhoneOrderComponent);\n        });\n        this._statefulEventEmitterService.on(EventNames.OPEN_SUCCESS_ORDER, () => {\n            this._modalService.open(this._successOrderComponent);\n        });\n    }\n}\n","/**\n * Контейнер для управления зависимостями (DI) с поддержкой синглтонов и transient-сервисов.\n */\nclass DIContainer {\n    constructor() {\n        /** Реестр зарегистрированных провайдеров */\n        this._registry = new Map();\n        /** Хранилище синглтон-экземпляров */\n        this._singletons = new Map();\n    }\n    /**\n     * Регистрирует провайдера для класса.\n     * @template T Тип создаваемого экземпляра.\n     * @param key Конструктор класса, который регистрируется.\n     * @param DIProvider Параметры провайдера (класс, зависимости, область).\n     * @throws Ошибка, если количество зависимостей не совпадает с количеством параметров конструктора.\n     */\n    register(key, DIProvider) {\n        var _a, _b, _c;\n        const name = key.name;\n        const useClass = (DIProvider === null || DIProvider === void 0 ? void 0 : DIProvider.useClass) || key;\n        const deps = (_b = (_a = DIProvider === null || DIProvider === void 0 ? void 0 : DIProvider.deps) !== null && _a !== void 0 ? _a : useClass.inject) !== null && _b !== void 0 ? _b : [];\n        // Проверка соответствия количества параметров\n        const expectedLength = useClass.length;\n        if (expectedLength !== deps.length) {\n            throw new Error(`Invalid registration for '${name}': DIConstructor expects ${expectedLength} dependencies, but got ${deps.length}`);\n        }\n        this._registry.set(name, {\n            useClass,\n            deps,\n            scope: (_c = DIProvider === null || DIProvider === void 0 ? void 0 : DIProvider.scope) !== null && _c !== void 0 ? _c : 'singleton',\n        });\n    }\n    /**\n     * Разрешает (создаёт) экземпляр зависимости по имени или конструктору.\n     * Для синглтонов возвращает один и тот же экземпляр, для transient — новый.\n     * @template T Тип создаваемого экземпляра.\n     * @param key Имя класса или сам конструктор.\n     * @returns Экземпляр запрошенной зависимости.\n     * @throws Ошибка, если зависимость не зарегистрирована.\n     */\n    resolve(key) {\n        const name = typeof key === 'string' ? key : key.name;\n        const DIProvider = this._registry.get(name);\n        if (!DIProvider) {\n            throw new Error(`Dependency '${name}' is not registered.`);\n        }\n        if (DIProvider.scope !== 'transient' && this._singletons.has(name)) {\n            return this._singletons.get(name);\n        }\n        const dependencies = (DIProvider.deps || []).map(dep => this.resolve(dep));\n        const instance = new DIProvider.useClass(...dependencies);\n        if (DIProvider.scope !== 'transient') {\n            this._singletons.set(name, instance);\n        }\n        return instance;\n    }\n}\n/** Глобальный контейнер зависимостей */\nexport const container = new DIContainer();\n","export class Api {\n    constructor(baseUrl, options = {}) {\n        var _a;\n        this.baseUrl = baseUrl;\n        this.options = {\n            headers: Object.assign({ 'Content-Type': 'application/json' }, ((_a = options.headers) !== null && _a !== void 0 ? _a : {}))\n        };\n    }\n    get(uri) {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { method: 'GET' })).then((this.handleResponse));\n    }\n    post(uri, data, method = 'POST') {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { method, body: JSON.stringify(data) })).then((this.handleResponse));\n    }\n    handleResponse(response) {\n        if (response.ok)\n            return response.json();\n        else\n            return response.json()\n                .then(data => { var _a; return Promise.reject((_a = data.error) !== null && _a !== void 0 ? _a : response.statusText); });\n    }\n}\n","const API_ORIGIN = process.env.API_ORIGIN || 'https://larek-api.nomoreparties.com';\nexport const API_URL = `${API_ORIGIN}/api/weblarek`;\nexport const CDN_URL = `${API_ORIGIN}/content/weblarek`;\nexport const settings = {};\nexport const categoryCompareObj = {\n    'софт-скил': 'soft',\n    'дополнительное': 'additional',\n    'другое': 'other',\n    'кнопка': 'button',\n    'хард-скил': 'hard'\n};\n","import { Api } from \"../components/base/api\";\nimport { API_URL } from \"../utils/constants\";\n/**\n * Класс ApiService — конкретная реализация Api с фиксированным базовым URL.\n * Используется для взаимодействия с серверным API приложения.\n */\nexport class ApiService extends Api {\n    constructor() {\n        super(API_URL);\n    }\n}\n","import { ApiService } from \"./api.service\";\n/**\n * Сервис для работы с заказами через API.\n * Расширяет базовый ApiService, реализует метод отправки заказа.\n */\nexport class ApiOrderService extends ApiService {\n    constructor() {\n        super();\n    }\n    /**\n     * Отправить заказ на сервер.\n     * Выполняет POST-запрос по эндпоинту '/order' с данными заказа.\n     *\n     * @param createOrderRequest Объект с данными для создания заказа.\n     * @returns Промис, который разрешается ответом сервера с информацией о созданном заказе.\n     */\n    send(createOrderRequest) {\n        return this.post('/order', createOrderRequest);\n    }\n}\n","import { ApiService } from \"./api.service\";\n/**\n * Сервис для работы с продуктами через API.\n * Расширяет базовый ApiService, реализует методы получения списка продуктов и продукта по ID.\n */\nexport class ApiProductsService extends ApiService {\n    constructor() {\n        super();\n    }\n    /**\n     * Получить список всех продуктов.\n     * Выполняет GET-запрос по эндпоинту '/product' и возвращает массив продуктов.\n     *\n     * @returns Промис, который разрешается массивом продуктов.\n     */\n    getAll() {\n        return this.get('/product').then(productsResponse => productsResponse.items);\n    }\n    /**\n     * Получить продукт по его ID.\n     * Выполняет GET-запрос по эндпоинту '/product/{id}'.\n     *\n     * @param id Идентификатор продукта.\n     * @returns Промис, который разрешается объектом продукта.\n     */\n    getById(id) {\n        return this.get(`/product/${id}`);\n    }\n}\n","import { EventNames } from \"../types\";\n/**\n * Сервис корзины (BasketService) управляет списком товаров в корзине.\n * Все операции обновления и получения данных корзины выполняются\n * через StatefulEventEmitterService и события.\n */\nexport class BasketService {\n    constructor(_statefulEventEmitterService) {\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n    }\n    /**\n     * Получить все товары в корзине.\n     * Возвращает пустой массив, если корзина пуста.\n     * @returns {Product[]} Массив товаров в корзине.\n     */\n    getAll() {\n        const productsInBasket = this._statefulEventEmitterService.getLast(EventNames.BASKET);\n        if (productsInBasket === undefined) {\n            return [];\n        }\n        return productsInBasket;\n    }\n    /**\n     * Получить товар из корзины по его ID.\n     * @param {string} id Идентификатор товара.\n     * @returns {Product | undefined} Найденный товар или undefined, если не найден.\n     */\n    getById(id) {\n        const productsInBasket = this.getAll();\n        const product = productsInBasket.find(product => product.id === id);\n        return product;\n    }\n    /**\n     * Получить общую стоимость товаров в корзине.\n     * Суммирует поле price у всех товаров, учитывая, что цена может отсутствовать.\n     * @returns {number} Общая стоимость корзины.\n     */\n    getPriceBasket() {\n        const productsInBasket = this.getAll();\n        const price = productsInBasket.reduce((acc, product) => acc + (product.price || 0), 0);\n        return price;\n    }\n    /**\n     * Добавить товар в корзину.\n     * Если товар уже есть, добавление игнорируется.\n     * После добавления эмитит событие с обновлённым списком товаров,\n     * а также специальное событие добавления по ID товара.\n     * @param {Product} product Добавляемый товар.\n     */\n    add(product) {\n        const productsInBasket = this.getAll();\n        if (productsInBasket.find((item) => item.id === product.id)) {\n            return;\n        }\n        this._statefulEventEmitterService.emit(`add-card-to-basket-${product.id}`, product);\n        this._statefulEventEmitterService.offAllByEventName(`remove-card-to-basket-${product.id}`);\n        this._statefulEventEmitterService.emit(EventNames.BASKET, [...productsInBasket, product]);\n    }\n    /**\n     * Удалить товар из корзины.\n     * После удаления эмитит событие с обновлённым списком товаров,\n     * а также специальное событие удаления по ID товара.\n     * @param {Product} product Удаляемый товар.\n     */\n    remove(product) {\n        const productsInBasket = this.getAll();\n        const filteredProductsInBasket = productsInBasket.filter(item => item.id !== product.id);\n        this._statefulEventEmitterService.offAllByEventName(`add-card-to-basket-${product.id}`);\n        this._statefulEventEmitterService.emit(`remove-card-to-basket-${product.id}`, product);\n        this._statefulEventEmitterService.emit(EventNames.BASKET, filteredProductsInBasket);\n    }\n    /**\n     * Подписаться на обновления корзины.\n     * Вызывается при каждом изменении списка товаров.\n     * @param {(products: Product[]) => void} callback Коллбек с массивом товаров.\n     */\n    onBasket(callback) {\n        this._statefulEventEmitterService.on(EventNames.BASKET, callback);\n    }\n    /**\n     * Отписаться от обновлений корзины.\n     * @param {(products: Product[]) => void} callback Ранее добавленный обработчик.\n     */\n    offBasket(callback) {\n        this._statefulEventEmitterService.off(EventNames.BASKET, callback);\n    }\n    /**\n     * Подписаться на добавление конкретного товара по ID.\n     * Вызывается при добавлении этого товара в корзину.\n     * @param {string} id ID товара.\n     * @param {(product: Product) => void} callback Коллбек с товаром.\n     */\n    onBasketById(id, callback) {\n        this._statefulEventEmitterService.on(`add-card-to-basket-${id}`, callback);\n    }\n    /**\n     * Отписаться от событий добавления конкретного товара по ID.\n     * Удаляет все обработчики для события добавления товара с данным ID.\n     * @param {string} id ID товара.\n     */\n    offBasketById(id) {\n        this._statefulEventEmitterService.offAllByEventName(`add-card-to-basket-${id}`);\n    }\n    /**\n     * Очистить корзину — удалить все товары.\n     * Эмитит событие с пустым списком.\n     */\n    clear() {\n        this._statefulEventEmitterService.emit(EventNames.BASKET, []);\n    }\n}\n","/**\n * Сервис для управления модальными окнами в приложении.\n * Отвечает за открытие, закрытие модалок и обработку событий закрытия.\n *\n * Использует переданный экземпляр ModalComponent для отображения и скрытия модального окна.\n * Позволяет рендерить в модалку любой компонент или DOM-элемент.\n * Снижает дублирование кода и обеспечивает единое место управления поведением модалок.\n */\nexport class ModalService {\n    constructor(_modalComponent) {\n        this._modalComponent = _modalComponent;\n        this._currentModal = null;\n        this._onCloseListeners = new Map();\n    }\n    /**\n     * Открывает модальное окно с указанным содержимым.\n     * @param content - компонент с методом render() или уже готовый HTMLElement для отображения.\n     * @param renderArgs - опциональные аргументы для метода render компонента.\n     * @param options - дополнительные опции с коллбеками onOpen и onClose.\n     */\n    open(content, renderArgs, options) {\n        var _a;\n        const element = this._resolveElement(content, renderArgs);\n        // 👇 Присваиваем обратно в компонент — чтобы потом onClose знал что делать\n        if (this._isComponent(content)) {\n            content.__modalElement = element;\n        }\n        if (((_a = this._currentModal) === null || _a === void 0 ? void 0 : _a.element) === element)\n            return;\n        const modal = {\n            element,\n            component: this._isComponent(content) ? content : undefined,\n            onClose: options === null || options === void 0 ? void 0 : options.onClose,\n        };\n        this._currentModal = modal;\n        this._modalComponent.open(element, {\n            onOpen: options === null || options === void 0 ? void 0 : options.onOpen,\n            onClose: () => {\n                var _a;\n                this._invokeCloseCallbacks(element);\n                this._handleModalClose(modal);\n                if (((_a = this._currentModal) === null || _a === void 0 ? void 0 : _a.element) === element) {\n                    this._currentModal = null;\n                }\n            }\n        });\n    }\n    /**\n     * Закрывает модальное окно, связанное с указанным компонентом или элементом.\n     * Если модалка с этим элементом не открыта, метод не выполняет действий.\n     * @param content - компонент или DOM-элемент модалки, которую нужно закрыть.\n     */\n    close(content) {\n        if (!this._currentModal)\n            return;\n        let elementToClose;\n        if (this._isComponent(content)) {\n            const maybeRendered = content.__modalElement;\n            if (!maybeRendered) {\n                console.warn('[ModalService] Cannot close modal: component was not opened via ModalService');\n                return;\n            }\n            elementToClose = maybeRendered;\n        }\n        else {\n            elementToClose = content;\n        }\n        if (this._currentModal.element !== elementToClose)\n            return;\n        this._modalComponent.close();\n    }\n    /**\n     * Регистрирует callback, который будет вызван при закрытии модального окна,\n     * связанного с указанным компонентом или элементом.\n     * @param target - компонент или элемент, на закрытие которого нужно подписаться.\n     * @param callback - функция, вызываемая при закрытии модалки.\n     */\n    onClose(target, callback) {\n        setTimeout(() => this._onClose(target, callback), 0);\n    }\n    _onClose(target, callback) {\n        let element;\n        // Если это компонент и он уже был открыт\n        if (this._isComponent(target)) {\n            const maybeRendered = target.__modalElement;\n            if (!maybeRendered) {\n                console.warn('[ModalService] Cannot register onClose: component was not rendered via open()');\n                return;\n            }\n            element = maybeRendered;\n        }\n        else {\n            element = target;\n        }\n        if (!this._onCloseListeners.has(element)) {\n            this._onCloseListeners.set(element, new Set());\n        }\n        this._onCloseListeners.get(element).add(callback);\n    }\n    _invokeCloseCallbacks(element) {\n        const callbacks = this._onCloseListeners.get(element);\n        if (!callbacks)\n            return;\n        for (const cb of callbacks) {\n            try {\n                cb();\n            }\n            catch (err) {\n                console.error('ModalService onClose error:', err);\n            }\n        }\n        this._onCloseListeners.delete(element);\n    }\n    _handleModalClose(modal) {\n        var _a, _b, _c;\n        (_b = (_a = modal.component) === null || _a === void 0 ? void 0 : _a.onClose) === null || _b === void 0 ? void 0 : _b.call(_a);\n        (_c = modal.onClose) === null || _c === void 0 ? void 0 : _c.call(modal);\n    }\n    _resolveElement(content, renderArgs) {\n        if (this._isComponent(content)) {\n            if (Array.isArray(renderArgs)) {\n                return content.render(...renderArgs);\n            }\n            else if (renderArgs !== undefined) {\n                return content.render(renderArgs);\n            }\n            else {\n                return content.render();\n            }\n        }\n        else {\n            return content;\n        }\n    }\n    _isComponent(obj) {\n        return typeof obj === 'object' && typeof obj.render === 'function';\n    }\n}\n","import { EventNames } from \"../types\";\n/**\n * Сервис заказа (OrderService) реализует логику работы с заказом.\n * Взаимодействует со слоями через StatefulEventEmitterService,\n * используя пользовательские события.\n */\nexport class OrderService {\n    constructor(_statefulEventEmitterService, _validationOrderService, _apiOrderService, _basketService) {\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._validationOrderService = _validationOrderService;\n        this._apiOrderService = _apiOrderService;\n        this._basketService = _basketService;\n    }\n    /**\n     * Обновить email в заказе.\n     * @param {string} email Email пользователя.\n     */\n    updateEmail(email) {\n        this._emitOrderUpdate({ email });\n    }\n    /**\n     * Обновить телефон в заказе.\n     * @param {string} phone Телефон пользователя.\n     */\n    updatePhone(phone) {\n        this._emitOrderUpdate({ phone });\n    }\n    /**\n     * Установить адрес доставки.\n     * @param {string} address Адрес.\n     */\n    setAddress(address) {\n        this._emitOrderUpdate({ address });\n    }\n    /**\n     * Установить способ оплаты.\n     * @param {Payment} payment Объект оплаты.\n     */\n    setPaymentMethod(payment) {\n        this._emitOrderUpdate({ payment });\n    }\n    /**\n     * Очистить текущее состояние заказа.\n     */\n    clear() {\n        this._statefulEventEmitterService.clearLast(EventNames.ORDER_CHANGED);\n    }\n    /**\n     * Подписаться на изменение состояния формы.\n     * Вызывается при каждом изменении заказа,\n     * валидирует указанные поля и возвращает результат.\n     * @param {(keyof Order)[]} fields Массив ключей полей для валидации.\n     * @param {(state: {isValid: boolean, errors: Partial<Record<keyof Order, string>>}) => void} callback Коллбек с результатом валидации.\n     * @returns {() => void} Функция для отписки.\n     */\n    onFormStateChange(fields, callback) {\n        let hasChanged = false;\n        const handler = (order) => {\n            // Не вызываем ничего, пока не было первых данных\n            const hasAnyField = fields.some((field) => order[field] !== undefined && order[field] !== '');\n            if (!hasAnyField && !hasChanged)\n                return;\n            hasChanged = true;\n            const result = this._validationOrderService.validate(order, fields);\n            callback(result);\n        };\n        this._statefulEventEmitterService.on(EventNames.ORDER_CHANGED, handler);\n        return () => {\n            this._statefulEventEmitterService.off(EventNames.ORDER_CHANGED, handler);\n        };\n    }\n    /**\n     * Отправить заказ.\n     * Валидирует обязательные поля,\n     * если ошибки — выводит alert, иначе отправляет данные через ApiOrderService.\n     */\n    submit() {\n        const order = Object.assign({}, this._getCurrentOrder());\n        order.items = this._basketService.getAll().map(p => p.id);\n        order.total = this._basketService.getPriceBasket();\n        const validation = this._validationOrderService.validate(order, [\n            'email',\n            'phone',\n            'address'\n        ]);\n        if (!validation.isValid) {\n            alert('Форма содержит ошибки');\n            console.warn('Ошибки при сабмите:', validation.errors);\n            return;\n        }\n        this._apiOrderService.send(order)\n            .then(() => {\n            this._statefulEventEmitterService.emit(EventNames.OPEN_SUCCESS_ORDER);\n        })\n            .catch(err => {\n            console.error(err);\n            alert('Ошибка при отправке заказа');\n        });\n    }\n    /**\n     * Приватный метод — эмитит обновление заказа,\n     * объединяя частичные данные с текущим состоянием.\n     * @param {Partial<Order>} partialOrder Частичные данные заказа.\n     * @private\n     */\n    _emitOrderUpdate(partialOrder) {\n        const currentOrder = this._getCurrentOrder();\n        const newOrder = Object.assign(Object.assign({}, currentOrder), partialOrder);\n        this._statefulEventEmitterService.emit(EventNames.ORDER_CHANGED, newOrder);\n    }\n    /**\n     * Получить текущее состояние заказа из последнего события.\n     * @returns {Partial<Order>} Текущий заказ.\n     * @private\n     */\n    _getCurrentOrder() {\n        var _a;\n        return (_a = this._statefulEventEmitterService.getLast(EventNames.ORDER_CHANGED)) !== null && _a !== void 0 ? _a : {};\n    }\n}\n","import { EventEmitter } from \"../components/base/events\";\n/**\n * StatefulEventEmitterService — расширение EventEmitter,\n * которое сохраняет последнее значение каждого события.\n * При подписке сразу вызывает обработчик с последним сохранённым значением.\n */\nexport class StatefulEventEmitterService extends EventEmitter {\n    constructor() {\n        super(...arguments);\n        this._lastValues = new Map();\n    }\n    /**\n     * Переопределение emit для сохранения последнего значения события.\n     * @param eventName Имя события.\n     * @param data Данные события.\n     */\n    emit(eventName, data) {\n        this._lastValues.set(eventName, data);\n        super.emit(eventName, data);\n    }\n    /**\n     * Переопределение on для вызова обработчика сразу с последним значением.\n     * @param eventName Имя события.\n     * @param callback Обработчик события.\n     */\n    on(eventName, callback) {\n        super.on(eventName, callback);\n        if (typeof eventName === 'string' && this._lastValues.has(eventName)) {\n            const lastValue = this._lastValues.get(eventName);\n            callback(lastValue);\n        }\n    }\n    /**\n     * Удалить всех подписчиков указанного события и сбросить последнее значение.\n     * @param eventName Имя события.\n     */\n    offAllByEventName(eventName) {\n        this._events.delete(eventName);\n        if (typeof eventName === 'string') {\n            this._lastValues.delete(eventName);\n        }\n    }\n    /**\n     * Получить последнее значение события.\n     * @param eventName Имя события.\n     * @returns Последние данные события, либо undefined.\n     */\n    getLast(eventName) {\n        return this._lastValues.get(eventName);\n    }\n    /**\n     * Очистить сохранённые значения события или всех событий.\n     * @param eventName Имя события, если нужно очистить конкретное.\n     */\n    clearLast(eventName) {\n        if (eventName) {\n            this._lastValues.delete(eventName);\n        }\n        else {\n            this._lastValues.clear();\n        }\n    }\n}\n","/**\n * Брокер событий, классическая реализация\n * В расширенных вариантах есть возможность подписаться на все события\n * или слушать события по шаблону например\n */\nexport class EventEmitter {\n    constructor() {\n        this._events = new Map();\n    }\n    /**\n     * Установить обработчик на событие\n     */\n    on(eventName, callback) {\n        var _a;\n        if (!this._events.has(eventName)) {\n            this._events.set(eventName, new Set());\n        }\n        (_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.add(callback);\n    }\n    /**\n     * Снять обработчик с события\n     */\n    off(eventName, callback) {\n        var _a;\n        if (this._events.has(eventName)) {\n            this._events.get(eventName).delete(callback);\n            if (((_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.size) === 0) {\n                this._events.delete(eventName);\n            }\n        }\n    }\n    /**\n     * Инициировать событие с данными\n     */\n    emit(eventName, data) {\n        this._events.forEach((subscribers, name) => {\n            if (name === '*')\n                subscribers.forEach(callback => callback({\n                    eventName,\n                    data\n                }));\n            if (name instanceof RegExp && name.test(eventName) || name === eventName) {\n                subscribers.forEach(callback => callback(data));\n            }\n        });\n    }\n    /**\n     * Слушать все события\n     */\n    onAll(callback) {\n        this.on(\"*\", callback);\n    }\n    /**\n     * Сбросить все обработчики\n     */\n    offAll() {\n        this._events = new Map();\n    }\n    /**\n     * Сделать коллбек триггер, генерирующий событие при вызове\n     */\n    trigger(eventName, context) {\n        return (event = {}) => {\n            this.emit(eventName, Object.assign(Object.assign({}, (event || {})), (context || {})));\n        };\n    }\n}\n","/**\n * Сервис валидации данных заказа.\n * Позволяет проверить указанные поля объекта заказа и вернуть ошибки.\n */\nexport class ValidationOrderService {\n    /**\n     * Проверяет валидность указанных полей заказа.\n     * Для каждого поля вызывает приватный метод проверки.\n     *\n     * @param order Объект с данными заказа (частичный).\n     * @param fields Массив ключей полей, которые нужно валидировать.\n     * @returns Объект с результатом валидации:\n     * - isValid — true, если ошибок нет.\n     * - errors — объект с сообщениями ошибок по каждому полю.\n     */\n    validate(order, fields) {\n        const errors = {};\n        for (const field of fields) {\n            const error = this._validateField(field, order[field]);\n            if (error)\n                errors[field] = error;\n        }\n        const isValid = Object.keys(errors).length === 0;\n        return { isValid, errors };\n    }\n    /**\n     * Приватный метод проверки конкретного поля заказа.\n     * Возвращает строку с ошибкой или null, если ошибок нет.\n     *\n     * @param field Имя поля.\n     * @param value Значение поля.\n     * @returns Сообщение об ошибке или null.\n     * @private\n     */\n    _validateField(field, value) {\n        switch (field) {\n            case 'email':\n                if (!value)\n                    return 'Необходимо указать email';\n                return null;\n            case 'phone':\n                if (!value)\n                    return 'Необходимо указать телефон';\n                return null;\n            case 'address':\n                if (!value)\n                    return 'Необходимо указать адрес';\n                return null;\n            default:\n                return null;\n        }\n    }\n}\n","import { categoryCompareObj, CDN_URL } from \"./constants\";\nexport function pascalToKebab(value) {\n    return value.replace(/([a-z0–9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nexport function isSelector(x) {\n    return (typeof x === \"string\") && x.length > 1;\n}\nexport function isEmpty(value) {\n    return value === null || value === undefined;\n}\nexport function ensureAllElements(selectorElement, context = document) {\n    if (isSelector(selectorElement)) {\n        return Array.from(context.querySelectorAll(selectorElement));\n    }\n    if (selectorElement instanceof NodeList) {\n        return Array.from(selectorElement);\n    }\n    if (Array.isArray(selectorElement)) {\n        return selectorElement;\n    }\n    throw new Error(`Unknown selector element`);\n}\nexport function ensureElement(selectorElement, context) {\n    if (isSelector(selectorElement)) {\n        const elements = ensureAllElements(selectorElement, context);\n        if (elements.length > 1) {\n            console.warn(`selector ${selectorElement} return more then one element`);\n        }\n        if (elements.length === 0) {\n            throw new Error(`selector ${selectorElement} return nothing`);\n        }\n        return elements.pop();\n    }\n    if (selectorElement instanceof HTMLElement) {\n        return selectorElement;\n    }\n    throw new Error('Unknown selector element');\n}\nexport function cloneTemplate(query) {\n    const template = ensureElement(query);\n    return template.content.firstElementChild.cloneNode(true);\n}\nexport function bem(block, element, modifier) {\n    let name = block;\n    if (element)\n        name += `__${element}`;\n    if (modifier)\n        name += `_${modifier}`;\n    return {\n        name,\n        class: `.${name}`\n    };\n}\nexport function getObjectProperties(obj, filter) {\n    return Object.entries(Object.getOwnPropertyDescriptors(Object.getPrototypeOf(obj)))\n        .filter(([name, prop]) => filter ? filter(name, prop) : (name !== 'constructor'))\n        .map(([name, prop]) => name);\n}\n/**\n * Устанавливает dataset атрибуты элемента\n */\nexport function setElementData(el, data) {\n    for (const key in data) {\n        el.dataset[key] = String(data[key]);\n    }\n}\n/**\n * Получает типизированные данные из dataset атрибутов элемента\n */\nexport function getElementData(el, scheme) {\n    const data = {};\n    for (const key in el.dataset) {\n        data[key] = scheme[key](el.dataset[key]);\n    }\n    return data;\n}\n/**\n * Проверка на простой объект\n */\nexport function isPlainObject(obj) {\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype === Object.getPrototypeOf({}) ||\n        prototype === null;\n}\nexport function isBoolean(v) {\n    return typeof v === 'boolean';\n}\n/**\n * Фабрика DOM-элементов в простейшей реализации\n * здесь не учтено много факторов\n * в интернет можно найти более полные реализации\n */\nexport function createElement(tagName, props, children) {\n    const element = document.createElement(tagName);\n    if (props) {\n        for (const key in props) {\n            const value = props[key];\n            if (isPlainObject(value) && key === 'dataset') {\n                setElementData(element, value);\n            }\n            else {\n                // @ts-expect-error fix indexing later\n                element[key] = isBoolean(value) ? value : String(value);\n            }\n        }\n    }\n    if (children) {\n        for (const child of Array.isArray(children) ? children : [children]) {\n            element.append(child);\n        }\n    }\n    return element;\n}\nexport function getProductPriceText(price) {\n    return price === null ? 'Бесценно' : `${price} синапсов`;\n}\nexport function getProductPrice(price) {\n    return price === null ? 0 : price;\n}\nexport function getProductCategoryCssClass(category) {\n    for (const categoryItem in categoryCompareObj) {\n        if (categoryItem === category)\n            return `card__category_${categoryCompareObj[category]}`;\n    }\n    return `card__category_${categoryCompareObj['другое']}`;\n}\nexport function getCdnImgUrl(img) {\n    return `${CDN_URL}/${img}`;\n}\n","import { cloneTemplate, getProductPriceText } from \"../../utils/utils\";\n/**\n * Компонент карточки товара в корзине.\n *\n * Отвечает за создание HTML-элемента списка товара в корзине,\n * заполнение его данными и обработку удаления товара из корзины.\n */\nexport class BasketCardComponent {\n    constructor(_basketService) {\n        this._basketService = _basketService;\n        /**\n         * Обработчик удаления товара из корзины.\n         * Вызывает метод сервиса корзины для удаления переданного товара.\n         *\n         * @param product - товар, который нужно удалить из корзины\n         */\n        this._deleteProduct = (product) => {\n            this._basketService.remove(product);\n        };\n        this._basketCardTemplate = document.querySelector('#card-basket');\n    }\n    /**\n     * Создаёт DOM-элемент для товара в корзине на основе шаблона,\n     * заполняет элемент информацией о товаре и индексом,\n     * навешивает обработчик для кнопки удаления товара.\n     *\n     * @param product - объект товара для отображения\n     * @param index - индекс товара в списке корзины (для отображения порядкового номера)\n     * @returns HTMLLIElement - готовый элемент товара в корзине\n     */\n    createElement(product, index) {\n        const basketCardElement = cloneTemplate(this._basketCardTemplate);\n        const basketItemIndexElemet = basketCardElement.querySelector('.basket__item-index');\n        const basketItemTitleElement = basketCardElement.querySelector('.card__title');\n        const basketItemPriceElement = basketCardElement.querySelector('.card__price');\n        const basketItemDeleteBtnElement = basketCardElement.querySelector('.basket__item-delete');\n        basketItemIndexElemet.textContent = `${index + 1}`;\n        basketItemTitleElement.textContent = product.title;\n        basketItemPriceElement.textContent = getProductPriceText(product.price);\n        basketItemDeleteBtnElement.addEventListener('click', () => this._deleteProduct(product));\n        return basketCardElement;\n    }\n}\n","import { EventNames } from \"../../types\";\n/**\n * Компонент для отображения состояния корзины в шапке сайта.\n *\n * Отвечает за отображение количества товаров в корзине и\n * обработку клика по иконке корзины для открытия корзины.\n */\nexport class BasketHeaderComponent {\n    constructor(_statefulEventEmitterService) {\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._headerBasketElement = document.querySelector('.header__basket');\n        this._counterElement = this._headerBasketElement.querySelector('.header__basket-counter');\n        this._initEventListeners();\n    }\n    /**\n     * Обновляет отображаемое количество товаров в корзине.\n     *\n     * @param quantity - количество товаров для отображения\n     */\n    setQuantityProductsInBasket(quantity) {\n        this._counterElement.textContent = String(quantity);\n    }\n    /**\n     * Инициализирует обработчики событий компонента,\n     * в частности навешивает обработчик клика на иконку корзины,\n     * который инициирует событие открытия корзины через EventEmitter.\n     */\n    _initEventListeners() {\n        this._headerBasketElement.addEventListener('click', (event) => {\n            this._statefulEventEmitterService.emit(EventNames.OPEN_CART);\n        });\n    }\n}\n","import { EventNames } from \"../../types\";\nimport { cloneTemplate } from \"../../utils/utils\";\n/**\n * Компонент представления корзины, реализующий слой **View** в архитектуре MVVM (или MVP).\n *\n * Отвечает исключительно за отображение содержимого корзины и взаимодействие с DOM-элементами,\n * не содержит бизнес-логики, не хранит состояния и не взаимодействует напрямую ни с моделью,\n * ни с контроллером. Получает данные и инструкции исключительно через события.\n *\n *  Архитектурные особенности:\n *\n * - Использует `StatefulEventEmitterService` (реализация паттерна **EventEmitter**) для подписки на события и инициации пользовательских событий.\n * - Не создает экземпляры модели или контроллера, не зависит от них напрямую.\n * - Не валидирует данные, не изменяет модель, а только реагирует на изменения и инициирует переходы состояний.\n * - Подписывается на события изменения состояния корзины (`EventNames.BASKET`) и перерисовывает DOM при каждом обновлении.\n * - Вызывает событие `EventNames.OPEN_ORDER_ADDRESS_PAYMENT` при нажатии на кнопку оформления заказа, не передавая никаких данных напрямую.\n * - Отписывается от событий при закрытии модального окна (через this._modalService.onClose), избегая утечек памяти.\n *\n */\nexport class BasketComponent {\n    constructor(_basketService, _basketCardComponent, _statefulEventEmitterService, _modalService) {\n        this._basketService = _basketService;\n        this._basketCardComponent = _basketCardComponent;\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._modalService = _modalService;\n        this._basketTemplate = document.querySelector('#basket');\n    }\n    /**\n     * Рендерит корзину, создавая DOM-элемент на основе шаблона и текущего состояния корзины.\n     * Устанавливает обработчики кликов и подписки на изменения корзины.\n     *\n     * @returns HTMLElement, готовый к вставке в DOM.\n     */\n    render() {\n        const basketElement = cloneTemplate(this._basketTemplate);\n        const listElement = basketElement.querySelector('.basket__list');\n        const priceElement = basketElement.querySelector('.basket__price');\n        const submitBtnElement = basketElement.querySelector('.basket__button');\n        const getPriceBasket = () => this._basketService.getPriceBasket();\n        const renderAll = () => {\n            listElement.textContent = '';\n            this._renderActionsInfo(submitBtnElement, priceElement, listElement, getPriceBasket());\n            this._appendBasketElements(listElement, this._basketService.getAll());\n        };\n        renderAll();\n        const onBasketCallback = () => renderAll();\n        submitBtnElement.addEventListener('click', () => {\n            this._statefulEventEmitterService.emit(EventNames.OPEN_ORDER_ADDRESS_PAYMENT);\n            this._basketService.offBasket(onBasketCallback);\n        });\n        this._basketService.onBasket(onBasketCallback);\n        // Удаление подписки при закрытии\n        this._modalService.onClose(this, () => {\n            this._basketService.offBasket(onBasketCallback);\n        });\n        return basketElement;\n    }\n    /**\n     * Вспомогательный метод для добавления DOM-элементов товаров в список корзины.\n     *\n     * @param listElement - контейнер списка корзины\n     * @param products - массив продуктов, которые необходимо отобразить\n     */\n    _appendBasketElements(listElement, products) {\n        for (let i = 0; i < products.length; i++) {\n            const basketCardElement = this._basketCardComponent.createElement(products[i], i);\n            listElement.appendChild(basketCardElement);\n        }\n    }\n    /**\n     * Вспомогательный метод для обновления информации о стоимости корзины,\n     * а также управления состоянием кнопки оформления и отображением пустой корзины.\n     *\n     * @param submitBtnElement - кнопка оформления заказа\n     * @param priceElement - элемент для отображения общей стоимости\n     * @param listElement - контейнер списка корзины\n     * @param priceBasket - сумма стоимости товаров в корзине\n     */\n    _renderActionsInfo(submitBtnElement, priceElement, listElement, priceBasket) {\n        if (priceBasket === 0)\n            submitBtnElement.disabled = true;\n        priceElement.textContent = `${priceBasket} синапсов`;\n        if (priceBasket === 0) {\n            const listItemEmptyElement = document.createElement('div');\n            listItemEmptyElement.classList.add('basket__list-empty');\n            listItemEmptyElement.textContent = 'Корзина пуста';\n            listElement.appendChild(listItemEmptyElement);\n        }\n    }\n}\n","import { EventNames } from \"../../types\";\nimport { cloneTemplate, getCdnImgUrl, getProductCategoryCssClass, getProductPriceText } from \"../../utils/utils\";\n/**\n * Компонент карточки продукта в галерее.\n *\n * Отвечает за создание DOM-элемента карточки продукта,\n * заполнение его данными продукта и генерацию события при клике.\n */\nexport class CardCatalogComponent {\n    constructor(_statefulEventEmitterService) {\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        /**\n         * Обработчик клика по карточке, который инициирует событие открытия полной информации о продукте.\n         *\n         * @param product - продукт, связанный с данной карточкой\n         */\n        this._cardCatalogClick = (product) => {\n            this._statefulEventEmitterService.emit(EventNames.OPEN_CARD_FULL, product);\n        };\n        this._cardCatalogTemplateElement = document.querySelector('#card-catalog');\n    }\n    /**\n     * Создаёт DOM-элемент карточки продукта на основе шаблона,\n     * заполняет его данными и навешивает обработчик клика.\n     *\n     * @param product - объект продукта для отображения\n     * @returns HTMLElement - готовый элемент карточки продукта\n     */\n    render(product) {\n        const cardCatalogElement = cloneTemplate(this._cardCatalogTemplateElement);\n        const cardCategory = cardCatalogElement.querySelector('.card__category');\n        const cardTitle = cardCatalogElement.querySelector('.card__title');\n        const cardImg = cardCatalogElement.querySelector('.card__image');\n        const cardPrice = cardCatalogElement.querySelector('.card__price');\n        cardCategory.textContent = product.category;\n        cardCategory.classList.remove('card__category_soft');\n        cardCategory.classList.add(getProductCategoryCssClass(product.category));\n        cardTitle.textContent = product.title;\n        cardImg.alt = product.title;\n        cardImg.src = getCdnImgUrl(product.image);\n        cardPrice.textContent = getProductPriceText(product.price);\n        cardCatalogElement.addEventListener('click', () => this._cardCatalogClick(product));\n        return cardCatalogElement;\n    }\n}\n","import { cloneTemplate, getCdnImgUrl, getProductCategoryCssClass, getProductPriceText } from \"../../utils/utils\";\n/**\n * Компонент полной карточки товара с подробной информацией.\n *\n * Основные обязанности:\n * - Отображать данные товара: категория, название, изображение и цену.\n * - Управлять состоянием кнопки добавления/удаления товара из корзины,\n *   учитывая, доступен ли товар (цена не null) и находится ли он уже в корзине.\n * - Обрабатывать клики по кнопке для добавления или удаления товара из корзины,\n *   синхронизируя состояние с BasketService.\n */\nexport class CardFullComponent {\n    constructor(_basketService) {\n        this._basketService = _basketService;\n        this._template = document.querySelector('#card-preview');\n    }\n    render(product) {\n        const element = cloneTemplate(this._template);\n        const category = element.querySelector('.card__category');\n        const title = element.querySelector('.card__title');\n        const img = element.querySelector('.card__image');\n        const price = element.querySelector('.card__price');\n        const btn = element.querySelector('.card__button');\n        category.textContent = product.category;\n        category.classList.remove('card__category_soft');\n        category.classList.add(getProductCategoryCssClass(product.category));\n        title.textContent = product.title;\n        img.alt = product.title;\n        img.src = getCdnImgUrl(product.image);\n        price.textContent = getProductPriceText(product.price);\n        const isInBasket = !!this._basketService.getById(product.id);\n        if (product.price === null) {\n            btn.disabled = true;\n            btn.textContent = 'Недоступно';\n        }\n        else {\n            btn.textContent = isInBasket ? 'Удалить из корзины' : 'Купить';\n        }\n        btn.addEventListener('click', () => this._handleBtnClick(product, btn));\n        return element;\n    }\n    _handleBtnClick(product, btn) {\n        const isInBasket = !!this._basketService.getById(product.id);\n        if (isInBasket) {\n            this._basketService.remove(product);\n            btn.textContent = 'Купить';\n        }\n        else {\n            this._basketService.add(product);\n            btn.textContent = 'Удалить из корзины';\n        }\n    }\n}\n","import { cloneTemplate } from \"../../utils/utils\";\n/**\n * Компонент формы ввода Email и телефона для оформления заказа.\n *\n * Основные принципы:\n * - Обновление данных в модели происходит непосредственно при событии `input`,\n *   то есть при каждом изменении пользовательского ввода.\n * - Валидация данных выполняется в модели (OrderService) и ValidationOrderService,\n *   представление (этот компонент) **не выполняет валидацию и не хранит данные формы**.\n * - Представление только отображает текущее состояние модели,\n *   включая ошибки валидации, полученные через подписку на события.\n * - Кнопка отправки формы блокируется/разблокируется в зависимости от валидности данных в модели.\n * - Передача данных между слоем представления и моделью(OrderService) происходит через StatefulEventEmitterService, который в свою очередь наследуется от базового EventEmitter, что обеспечивает реактивность и разделение ответственности.\n *\n * Это гарантирует, что форма заказа никак не зависит от корзины,\n * и не хранит собственное состояние — все данные централизованно управляются через OrderService\n */\nexport class EmailPhoneOrderComponent {\n    constructor(_orderService, _modalService) {\n        this._orderService = _orderService;\n        this._modalService = _modalService;\n        this._template = document.querySelector('#contacts');\n    }\n    render() {\n        const element = cloneTemplate(this._template);\n        const inputEmail = element.querySelector('input[name=\"email\"]');\n        const inputPhone = element.querySelector('input[name=\"phone\"]');\n        const submitButton = element.querySelector('button[type=\"submit\"]');\n        const formErrors = element.querySelector('.form__errors');\n        const emailErrorEl = document.createElement('span');\n        const phoneErrorEl = document.createElement('span');\n        formErrors.append(emailErrorEl, phoneErrorEl);\n        inputEmail.addEventListener('input', () => {\n            this._orderService.updateEmail(inputEmail.value);\n        });\n        inputPhone.addEventListener('input', () => {\n            this._orderService.updatePhone(inputPhone.value);\n        });\n        const subsFormState = this._orderService.onFormStateChange(['email', 'phone'], (state) => {\n            var _a, _b;\n            emailErrorEl.innerHTML = `${(_a = state.errors.email) !== null && _a !== void 0 ? _a : ''}<br>`;\n            phoneErrorEl.innerHTML = (_b = state.errors.phone) !== null && _b !== void 0 ? _b : '';\n            submitButton.disabled = !state.isValid;\n        });\n        element.addEventListener('submit', (event) => {\n            event.preventDefault();\n            this._orderService.submit();\n        });\n        this._modalService.onClose(this, () => {\n            this._orderService.clear();\n            subsFormState();\n        });\n        return element;\n    }\n}\n","/**\n * Компонент галереи, отвечающий за отображение списка продуктов.\n *\n * Основная задача:\n * - Рендерить список продуктов, создавая для каждого карточку с помощью CardCatalogComponent\n *   и добавляя их в DOM-элемент галереи.\n */\nexport class GalleryComponent {\n    constructor(_cardCatalogComponent) {\n        this._cardCatalogComponent = _cardCatalogComponent;\n        this._galleryElement = document.querySelector('.gallery');\n    }\n    /**\n     * Создаёт и добавляет в галерею карточки продуктов.\n     *\n     * @param products - массив продуктов для отображения в галерее\n     */\n    renderProductList(products) {\n        for (const product of products) {\n            const cardElement = this._cardCatalogComponent.render(product);\n            this._galleryElement.append(cardElement);\n        }\n    }\n}\n","/**\n * Компонент модального окна, отвечающий за отображение, открытие и закрытие модалки.\n *\n * Основные задачи:\n * - Вставка переданного контента в модальное окно.\n * - Управление видимостью модального окна и блокировка скролла страницы при открытии.\n * - Обработка событий закрытия: клик по крестику, клик вне содержимого (оверлей) и клавиша Escape.\n * - Подписка и отписка от событий при открытии и закрытии модального окна.\n */\nexport class ModalComponent {\n    constructor() {\n        this._openCallback = () => { };\n        this._closeCallback = () => { };\n        this._isOpen = false;\n        this._pointerDownInsideModal = false;\n        this._pointerUpInsideModal = false;\n        /**\n         * Закрывает модальное окно, снимает блокировку скролла и вызывает колбэк onClose.\n         */\n        this.close = () => {\n            if (!this._isOpen)\n                return;\n            this._modalContainerElement.classList.remove('modal_active');\n            document.body.classList.remove('page_overflow-hidden');\n            this._isOpen = false;\n            this._destroyEventListeners();\n            this._closeCallback();\n        };\n        /**\n         * Обработчик события pointerdown внутри модального окна,\n         * отслеживает попадание клика внутрь контента модалки.\n         * @param event - событие указателя\n         * @private\n         */\n        this._onPointerDown = (event) => {\n            this._pointerDownInsideModal = this._modalContentElement.contains(event.target);\n        };\n        /**\n         * Обработчик события pointerup внутри модального окна,\n         * отслеживает отпускание клика внутри модалки.\n         * @param event - событие указателя\n         * @private\n         */\n        this._onPointerUp = (event) => {\n            this._pointerUpInsideModal = this._modalContentElement.contains(event.target);\n        };\n        /**\n         * Обработчик клика по оверлею (фону модального окна).\n         * Закрывает модалку, если клик был именно по оверлею\n         * и pointerdown и pointerup не были внутри контента.\n         * @param event - событие мыши\n         * @private\n         */\n        this._closeByOverlay = (event) => {\n            // Клик по оверлею\n            if (event.target === this._modalContainerElement) {\n                // Закрываем только если pointerdown и pointerup были вне модалки\n                if (!this._pointerDownInsideModal && !this._pointerUpInsideModal) {\n                    this.close();\n                }\n            }\n        };\n        /**\n         * Обработчик события нажатия клавиши Escape для закрытия модального окна.\n         * @param event - событие клавиатуры\n         * @private\n         */\n        this._closeByEsc = (event) => {\n            if (event.key === 'Escape') {\n                this.close();\n            }\n        };\n        this._modalContainerElement = document.querySelector('#modal-container');\n        this._modalContentElement = this._modalContainerElement.querySelector('.modal__content');\n        this._modalCloseElement = this._modalContainerElement.querySelector('.modal__close');\n    }\n    /**\n     * Открывает модальное окно с указанным содержимым.\n     * Если модалка уже открыта, просто обновляет контент.\n     *\n     * @param content - DOM элемент, который будет вставлен в тело модального окна.\n     * @param options - Опциональные колбэки для событий открытия и закрытия.\n     */\n    open(content, options) {\n        var _a, _b;\n        const isAlreadyOpen = this._isOpen;\n        this._modalContentElement.textContent = '';\n        this._modalContentElement.appendChild(content);\n        this._openCallback = (_a = options === null || options === void 0 ? void 0 : options.onOpen) !== null && _a !== void 0 ? _a : (() => { });\n        this._closeCallback = (_b = options === null || options === void 0 ? void 0 : options.onClose) !== null && _b !== void 0 ? _b : (() => { });\n        if (!isAlreadyOpen) {\n            this._initEventListeners();\n            this._modalContainerElement.classList.add('modal_active');\n            document.body.classList.add('page_overflow-hidden');\n            this._isOpen = true;\n            this._openCallback();\n        }\n    }\n    /**\n     * Инициализирует обработчики событий для управления закрытием модального окна:\n     * клики по крестику, оверлею, а также клавиша Escape.\n     * @private\n     */\n    _initEventListeners() {\n        this._modalCloseElement.addEventListener('click', this.close);\n        this._modalContainerElement.addEventListener('pointerdown', this._onPointerDown);\n        this._modalContainerElement.addEventListener('pointerup', this._onPointerUp);\n        this._modalContainerElement.addEventListener('click', this._closeByOverlay);\n        window.addEventListener('keydown', this._closeByEsc);\n    }\n    /**\n     * Удаляет ранее добавленные обработчики событий.\n     * @private\n     */\n    _destroyEventListeners() {\n        this._modalCloseElement.removeEventListener('click', this.close);\n        this._modalContainerElement.removeEventListener('pointerdown', this._onPointerDown);\n        this._modalContainerElement.removeEventListener('pointerup', this._onPointerUp);\n        this._modalContainerElement.removeEventListener('click', this._closeByOverlay);\n        window.removeEventListener('keydown', this._closeByEsc);\n    }\n}\n","import { EventNames } from \"../../types\";\nimport { cloneTemplate } from \"../../utils/utils\";\n/**\n * Компонент формы ввода адреса и выбора способа оплаты для оформления заказа.\n *\n * Основные принципы:\n * - Обновление данных модели происходит немедленно при событии `input` и переключении оплаты,\n *   то есть при каждом изменении пользовательского ввода или выборе метода оплаты.\n * - Валидация данных производится исключительно в модели (OrderService),\n *   этот компонент **не выполняет валидацию и не хранит состояние формы**.\n * - Представление отражает текущее состояние модели, включая ошибки валидации,\n *   которые поступают через подписку на события.\n * - Кнопка отправки блокируется или активируется в зависимости от валидности данных,\n *   предоставляемой моделью.\n * - Передача данных между представлением и моделью (OrderService) происходит через\n *   StatefulEventEmitterService, который наследует функциональность базового EventEmitter,\n *   что обеспечивает реактивность и чёткое разделение ответственности между слоями.\n *\n * Архитектура гарантирует, что форма заказа не зависит от корзины и не хранит локальное состояние —\n * все данные централизованно управляются через OrderService и распространяются посредством событий.\n */\nexport class PaymentAddressOrderComponent {\n    constructor(_orderService, _statefulEventEmitterService, _modalService) {\n        this._orderService = _orderService;\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._modalService = _modalService;\n        this._template = document.querySelector('#order');\n    }\n    /**\n     * Рендерит форму с полем ввода адреса и кнопками выбора способа оплаты (наличные или карта).\n     * Также настраивает реактивное отображение ошибок валидации и отключение кнопки сабмита.\n     *\n     * @returns {HTMLElement} HTML-элемент формы для вставки в DOM.\n     */\n    render() {\n        const element = cloneTemplate(this._template);\n        const btnOnline = element.querySelector('[name=\"card\"]');\n        const btnOffline = element.querySelector('[name=\"cash\"]');\n        const inputAddress = element.querySelector('[name=\"address\"]');\n        const submitBtn = element.querySelector('.order__button');\n        const errors = element.querySelector('.form__errors');\n        const form = element;\n        this._setPaymentMethod('online', btnOnline, btnOffline);\n        btnOnline.addEventListener('click', () => {\n            this._setPaymentMethod('online', btnOnline, btnOffline);\n        });\n        btnOffline.addEventListener('click', () => {\n            this._setPaymentMethod('offline', btnOnline, btnOffline);\n        });\n        inputAddress.addEventListener('input', () => {\n            this._orderService.setAddress(inputAddress.value);\n        });\n        const unsubscribe = this._orderService.onFormStateChange(['address'], (state) => {\n            var _a;\n            errors.textContent = (_a = state.errors.address) !== null && _a !== void 0 ? _a : '';\n            submitBtn.disabled = !state.isValid;\n        });\n        form.addEventListener('submit', (event) => {\n            event.preventDefault();\n            this._statefulEventEmitterService.emit(EventNames.OPEN_ORDER_EMAIL_PHONE);\n        });\n        // при закрытии модалки ручном (крестик, ESC) сбрасываем состояние заказа\n        this._modalService.onClose(this, () => {\n            this._orderService.clear();\n            unsubscribe();\n        });\n        return element;\n    }\n    /**\n     * Обновляет CSS-классы активного состояния для кнопок способов оплаты.\n     *\n     * @param method - Выбранный способ оплаты.\n     * @param btnOnline - Кнопка \"Онлайн\".\n     * @param btnOffline - Кнопка \"При получении\".\n     */\n    _updatePaymentButtonStyles(method, btnOnline, btnOffline) {\n        btnOnline.classList.toggle('button_alt-active', method === 'online');\n        btnOffline.classList.toggle('button_alt-active', method === 'offline');\n    }\n    /**\n     * Устанавливает выбранный способ оплаты в модель (OrderService)\n     * и обновляет отображение активной кнопки.\n     *\n     * @param currentMethod - Новый способ оплаты ('online' или 'offline').\n     * @param btnOnline - Кнопка \"Онлайн\".\n     * @param btnOffline - Кнопка \"При получении\".\n     */\n    _setPaymentMethod(currentMethod, btnOnline, btnOffline) {\n        this._orderService.setPaymentMethod(currentMethod);\n        this._updatePaymentButtonStyles(currentMethod, btnOnline, btnOffline);\n    }\n}\n","import { cloneTemplate, getProductPrice } from \"../../utils/utils\";\n/**\n * Компонент отображения успешного оформления заказа.\n *\n * Основные обязанности:\n * - Показывать информацию об успешно оформленном заказе, включая списанную сумму.\n * - Обеспечивать закрытие модального окна по клику на кнопку \"Закрыть\".\n * - Сброс состояния заказа и корзины при закрытии модального окна.\n */\nexport class SuccessOrderComponent {\n    constructor(_basketService, _orderService, _modalService) {\n        this._basketService = _basketService;\n        this._orderService = _orderService;\n        this._modalService = _modalService;\n        /**\n         * Обработчик закрытия модального окна:\n         * очищает данные заказа и корзины.\n         */\n        this._handleClose = () => {\n            this._orderService.clear();\n            this._basketService.clear();\n        };\n        this._successOrderTemplate = document.querySelector('#success');\n    }\n    /**\n     * Рендерит элемент с сообщением об успешном оформлении заказа.\n     *\n     * @returns HTMLElement, содержащий сообщение об успехе и кнопку закрытия\n     */\n    render() {\n        const successOrderElement = cloneTemplate(this._successOrderTemplate);\n        const descriptionElement = successOrderElement.querySelector('.order-success__description');\n        const successBtnElement = successOrderElement.querySelector('.order-success__close');\n        const priceBasket = this._basketService.getPriceBasket();\n        descriptionElement.textContent = `Списано ${getProductPrice(priceBasket)} синапсов`;\n        successBtnElement.addEventListener('click', () => {\n            this._modalService.close(this);\n        });\n        this._modalService.onClose(this, this._handleClose);\n        return successOrderElement;\n    }\n}\n","import { AppController } from \"../../../app.controller\";\nimport { ApiOrderService } from \"../../../services/api-order.service\";\nimport { ApiProductsService } from \"../../../services/api-products.service\";\nimport { BasketService } from \"../../../services/basket.service\";\nimport { ModalService } from \"../../../services/modal.service\";\nimport { OrderService } from \"../../../services/order.service\";\nimport { StatefulEventEmitterService } from \"../../../services/stateful-event-emitter.service\";\nimport { ValidationOrderService } from \"../../../services/validation-order.service\";\nimport { BasketCardComponent } from \"../basket-card.component\";\nimport { BasketHeaderComponent } from \"../basket-header.component\";\nimport { BasketComponent } from \"../basket.component\";\nimport { CardCatalogComponent } from \"../card-catalog.component\";\nimport { CardFullComponent } from \"../card-full.component\";\nimport { EmailPhoneOrderComponent } from \"../email-phone-order.component\";\nimport { GalleryComponent } from \"../gallery.component\";\nimport { ModalComponent } from \"../modal.component\";\nimport { PaymentAddressOrderComponent } from \"../payment-address-order.component\";\nimport { SuccessOrderComponent } from \"../succes-order.component\";\nimport { container } from \"./di-container\";\n/**\n * Регистрирует все необходимые зависимости в глобальном DI контейнере.\n *\n * Выполняет регистрацию сервисов, компонентов и контроллеров с указанием их зависимостей,\n * что позволяет контейнеру управлять созданием экземпляров и их инъекцией.\n *\n * Используется для единой централизованной настройки всех классов приложения,\n * чтобы при запросе нужного класса контейнер мог автоматически разрешить\n * и передать все необходимые зависимости.\n */\nexport function registerDependencies() {\n    container.register(ApiOrderService);\n    container.register(ApiProductsService);\n    container.register(StatefulEventEmitterService);\n    container.register(ValidationOrderService);\n    container.register(ModalComponent);\n    container.register(ModalService, { deps: [ModalComponent] });\n    container.register(CardCatalogComponent, { deps: [StatefulEventEmitterService] });\n    container.register(GalleryComponent, { deps: [CardCatalogComponent] });\n    container.register(BasketHeaderComponent, { deps: [StatefulEventEmitterService] });\n    container.register(BasketService, { deps: [StatefulEventEmitterService] });\n    container.register(CardFullComponent, { deps: [BasketService] });\n    container.register(BasketCardComponent, { deps: [BasketService] });\n    container.register(BasketComponent, { deps: [BasketService, BasketCardComponent, StatefulEventEmitterService, ModalService] });\n    container.register(OrderService, { deps: [StatefulEventEmitterService, ValidationOrderService, ApiOrderService, BasketService] });\n    container.register(PaymentAddressOrderComponent, { deps: [OrderService, StatefulEventEmitterService, ModalService] });\n    container.register(EmailPhoneOrderComponent, { deps: [OrderService, ModalService] });\n    container.register(SuccessOrderComponent, { deps: [BasketService, OrderService, ModalService] });\n    container.register(AppController, {\n        deps: [\n            ApiProductsService,\n            StatefulEventEmitterService,\n            ModalService,\n            GalleryComponent,\n            BasketHeaderComponent,\n            BasketService,\n            CardFullComponent,\n            BasketComponent,\n            PaymentAddressOrderComponent,\n            EmailPhoneOrderComponent,\n            SuccessOrderComponent\n        ]\n    });\n}\n","import './scss/styles.scss';\nimport { AppController } from './app.controller';\nimport { container } from './components/features/di/di-container';\nimport { registerDependencies } from './components/features/di/di-setup';\n/**\n * Точка входа в приложение.\n *\n * Выполняет регистрацию всех зависимостей через функцию `registerDependencies`,\n * затем создаёт и инициализирует главный контроллер приложения `AppController`\n * с помощью DI-контейнера.\n *\n * Такой подход обеспечивает централизованное управление зависимостями\n * и структурированное начало работы приложения.\n */\nregisterDependencies();\nconst appController = container.resolve(AppController);\nappController.init();\n"],"names":["EventNames","AppController","_apiProductsService","_statefulEventEmitterService","_modalService","_galleryComponent","_basketHeaderComponent","_basketService","_cardFullComponent","_basketComponent","_paymentAddressOrderComponent","_emailPhoneOrderComponent","_successOrderComponent","_classCallCheck","this","_createClass","key","value","init","_loadProductsAndRender","_initCustomEventListeners","_this","getAll","then","products","renderProductList","_this2","on","OPEN_CARD_FULL","product","open","render","onBasket","setQuantityProductsInBasket","length","OPEN_CART","OPEN_ORDER_ADDRESS_PAYMENT","OPEN_ORDER_EMAIL_PHONE","OPEN_SUCCESS_ORDER","container","DIContainer","_registry","Map","_singletons","register","DIProvider","_a","_b","_c","name","useClass","deps","inject","expectedLength","Error","concat","set","scope","resolve","get","has","dependencies","map","dep","instance","_construct","_toConsumableArray","Api","baseUrl","options","arguments","undefined","headers","Object","assign","uri","fetch","method","handleResponse","post","data","body","JSON","stringify","response","ok","json","Promise","reject","error","statusText","API_ORIGIN","API_URL","CDN_URL","categoryCompareObj","ApiService","_Api","_inherits","_super","_createSuper","call","ApiOrderService","_ApiService","send","createOrderRequest","ApiProductsService","productsResponse","items","getById","id","BasketService","productsInBasket","getLast","BASKET","find","getPriceBasket","reduce","acc","price","add","item","emit","offAllByEventName","remove","filteredProductsInBasket","filter","callback","offBasket","off","onBasketById","offBasketById","clear","ModalService","_modalComponent","_currentModal","_onCloseListeners","content","renderArgs","element","_resolveElement","_isComponent","__modalElement","modal","component","onClose","onOpen","_invokeCloseCallbacks","_handleModalClose","close","elementToClose","maybeRendered","console","warn","target","setTimeout","_onClose","Set","callbacks","_step","_iterator","_createForOfIteratorHelper","s","n","done","cb","err","e","f","Array","isArray","apply","obj","_typeof","OrderService","_validationOrderService","_apiOrderService","updateEmail","email","_emitOrderUpdate","updatePhone","phone","setAddress","address","setPaymentMethod","payment","clearLast","ORDER_CHANGED","onFormStateChange","fields","hasChanged","handler","order","some","field","result","validate","submit","_getCurrentOrder","p","total","validation","isValid","alert","errors","partialOrder","currentOrder","newOrder","StatefulEventEmitterService","_EventEmitter","_lastValues","eventName","_get","_getPrototypeOf","prototype","_events","EventEmitter","size","forEach","subscribers","RegExp","test","onAll","offAll","trigger","context","event","ValidationOrderService","_validateField","keys","isSelector","x","ensureElement","selectorElement","elements","ensureAllElements","document","from","querySelectorAll","NodeList","pop","HTMLElement","cloneTemplate","query","firstElementChild","cloneNode","getProductPriceText","getProductCategoryCssClass","category","categoryItem","getCdnImgUrl","img","BasketCardComponent","_deleteProduct","_basketCardTemplate","querySelector","createElement","index","basketCardElement","basketItemIndexElemet","basketItemTitleElement","basketItemPriceElement","basketItemDeleteBtnElement","textContent","title","addEventListener","BasketHeaderComponent","_headerBasketElement","_counterElement","_initEventListeners","quantity","String","BasketComponent","_basketCardComponent","_basketTemplate","basketElement","listElement","priceElement","submitBtnElement","renderAll","_renderActionsInfo","_appendBasketElements","onBasketCallback","i","appendChild","priceBasket","disabled","listItemEmptyElement","classList","CardCatalogComponent","_cardCatalogClick","_cardCatalogTemplateElement","cardCatalogElement","cardCategory","cardTitle","cardImg","cardPrice","alt","src","image","CardFullComponent","_template","btn","isInBasket","_handleBtnClick","EmailPhoneOrderComponent","_orderService","inputEmail","inputPhone","submitButton","formErrors","emailErrorEl","phoneErrorEl","append","subsFormState","state","innerHTML","preventDefault","GalleryComponent","_cardCatalogComponent","_galleryElement","cardElement","ModalComponent","_openCallback","_closeCallback","_isOpen","_pointerDownInsideModal","_pointerUpInsideModal","_modalContainerElement","_destroyEventListeners","_onPointerDown","_modalContentElement","contains","_onPointerUp","_closeByOverlay","_closeByEsc","_modalCloseElement","isAlreadyOpen","window","removeEventListener","PaymentAddressOrderComponent","btnOnline","btnOffline","inputAddress","submitBtn","form","_setPaymentMethod","unsubscribe","_updatePaymentButtonStyles","toggle","currentMethod","SuccessOrderComponent","_handleClose","_successOrderTemplate","successOrderElement","descriptionElement","successBtnElement","getProductPrice","registerDependencies"],"sourceRoot":""}
{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/types/index.ts","webpack://my-webpack-project/./src/app.controller.ts","webpack://my-webpack-project/./src/components/base/api.ts","webpack://my-webpack-project/./src/utils/constants.ts","webpack://my-webpack-project/./src/services/api.service.ts","webpack://my-webpack-project/./src/services/api-order.service.ts","webpack://my-webpack-project/./src/services/api-products.service.ts","webpack://my-webpack-project/./src/services/basket.service.ts","webpack://my-webpack-project/./src/utils/utils.ts","webpack://my-webpack-project/./src/services/component-registry.service.ts","webpack://my-webpack-project/./src/services/modal.service.ts","webpack://my-webpack-project/./src/services/order.service.ts","webpack://my-webpack-project/./src/services/products.service.ts","webpack://my-webpack-project/./src/services/stateful-event-emitter.service.ts","webpack://my-webpack-project/./src/components/base/events.ts","webpack://my-webpack-project/./src/services/validation-order.service.ts","webpack://my-webpack-project/./src/components/features/di/di-symbols.ts","webpack://my-webpack-project/./src/components/features/di/di-container.ts","webpack://my-webpack-project/./src/components/features/di/di-inject.ts","webpack://my-webpack-project/./src/components/features/components/base/base.component.ts","webpack://my-webpack-project/./src/components/features/components/base/stateless.component.ts","webpack://my-webpack-project/./src/components/features/components/basket-card.component.ts","webpack://my-webpack-project/./src/components/features/components/base/cached.component.ts","webpack://my-webpack-project/./src/components/features/components/basket.component.ts","webpack://my-webpack-project/./src/components/features/components/card-catalog.component.ts","webpack://my-webpack-project/./src/components/features/components/card-full.component.ts","webpack://my-webpack-project/./src/components/features/components/email-phone-order.component.ts","webpack://my-webpack-project/./src/components/features/components/base/modal.component.ts","webpack://my-webpack-project/./src/components/features/components/payment-address-order.component.ts","webpack://my-webpack-project/./src/components/features/components/succes-order.component.ts","webpack://my-webpack-project/./src/components/features/controllers/gallery.controller.ts","webpack://my-webpack-project/./src/components/features/controllers/basket-header.controller.ts","webpack://my-webpack-project/./src/components/features/di/di-setup.ts","webpack://my-webpack-project/./src/index.ts"],"sourcesContent":["export var EventNames;\n(function (EventNames) {\n    EventNames[\"OPEN_CARD_FULL\"] = \"open-card-full\";\n    EventNames[\"BASKET\"] = \"basket\";\n    EventNames[\"OPEN_CART\"] = \"open-cart\";\n    EventNames[\"ORDER\"] = \"order\";\n    EventNames[\"OPEN_ORDER_ADDRESS_PAYMENT\"] = \"open-order-address-payment\";\n    EventNames[\"OPEN_ORDER_EMAIL_PHONE\"] = \"open-order-email-phone\";\n    EventNames[\"OPEN_SUCCESS_ORDER\"] = \"open-success-order\";\n    EventNames[\"EMAIL_INPUT\"] = \"email-input\";\n    EventNames[\"PHONE_INPUT\"] = \"phone-input\";\n    EventNames[\"ORDER_SUBMIT\"] = \"order-submit\";\n    EventNames[\"ORDER_CLEAR\"] = \"order-clear\";\n    EventNames[\"ORDER_CHANGED\"] = \"order-changed\";\n    EventNames[\"PRODUCTS_CHANGED\"] = \"products-changed\";\n})(EventNames || (EventNames = {}));\n","import { EventNames } from \"./types\";\n/**\n * Главный контроллер приложения, отвечающий за инициализацию и\n * координацию взаимодействия между сервисами, компонентами и модальными окнами.\n *\n * Основные обязанности:\n * - Загрузка списка продуктов и передача их в галерею для отображения.\n * - Подписка на кастомные события приложения для открытия соответствующих модальных окон.\n * - Обновление информации о корзине в шапке при изменениях.\n *\n * Этот класс служит точкой входа для запуска логики приложения\n * и организации реактивного взаимодействия между слоями.\n */\nexport class AppController {\n    constructor(_statefulEventEmitterService, _modalService, _galleryController, _basketHeaderController, _basketService, _cardFullComponent, _basketComponent, _paymentAddressOrderComponent, _emailPhoneOrderComponent, _successOrderComponent, _productsService) {\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._modalService = _modalService;\n        this._galleryController = _galleryController;\n        this._basketHeaderController = _basketHeaderController;\n        this._basketService = _basketService;\n        this._cardFullComponent = _cardFullComponent;\n        this._basketComponent = _basketComponent;\n        this._paymentAddressOrderComponent = _paymentAddressOrderComponent;\n        this._emailPhoneOrderComponent = _emailPhoneOrderComponent;\n        this._successOrderComponent = _successOrderComponent;\n        this._productsService = _productsService;\n    }\n    /**\n     * Инициализирует приложение:\n     * - загружает продукты и отображает их в галерее;\n     * - устанавливает обработчики кастомных событий для управления модальными окнами и корзиной.\n     */\n    init() {\n        this._loadProductsAndRender();\n        this._initCustomEventListeners();\n    }\n    /**\n     * Загружает список продуктов через сервис-адаптер `ProductsService` и передаёт их в компонент галереи.\n     * Продукты реактивно передаются из модели (`StatefulEventEmitterService`), которая обновляется адаптером.\n     * Представление получает данные через адаптер, не взаимодействуя напрямую с API или моделью\n     */\n    _loadProductsAndRender() {\n        this._productsService.getAll((products) => {\n            this._galleryController.renderProductList(products);\n        });\n    }\n    /**\n     * Инициализирует подписки на кастомные события приложения.\n     * Обрабатывает открытие различных модальных окон и обновление корзины.\n     * @private\n     */\n    _initCustomEventListeners() {\n        this._statefulEventEmitterService.on(EventNames.OPEN_CARD_FULL, (product) => {\n            this._modalService.open(this._cardFullComponent.render(product));\n        });\n        this._basketService.onBasket(products => {\n            this._basketHeaderController.setQuantityProductsInBasket(products.length);\n        });\n        this._statefulEventEmitterService.on(EventNames.OPEN_CART, () => {\n            this._modalService.open(this._basketComponent);\n        });\n        this._statefulEventEmitterService.on(EventNames.OPEN_ORDER_ADDRESS_PAYMENT, () => {\n            this._modalService.open(this._paymentAddressOrderComponent);\n        });\n        this._statefulEventEmitterService.on(EventNames.OPEN_ORDER_EMAIL_PHONE, () => {\n            this._modalService.open(this._emailPhoneOrderComponent);\n        });\n        this._statefulEventEmitterService.on(EventNames.OPEN_SUCCESS_ORDER, (res) => {\n            this._modalService.open(this._successOrderComponent.render(res));\n        });\n    }\n}\n","export class Api {\n    constructor(baseUrl, options = {}) {\n        var _a;\n        this.baseUrl = baseUrl;\n        this.options = {\n            headers: Object.assign({ 'Content-Type': 'application/json' }, ((_a = options.headers) !== null && _a !== void 0 ? _a : {}))\n        };\n    }\n    get(uri) {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { method: 'GET' })).then((this.handleResponse));\n    }\n    post(uri, data, method = 'POST') {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { method, body: JSON.stringify(data) })).then((this.handleResponse));\n    }\n    handleResponse(response) {\n        if (response.ok)\n            return response.json();\n        else\n            return response.json()\n                .then(data => { var _a; return Promise.reject((_a = data.error) !== null && _a !== void 0 ? _a : response.statusText); });\n    }\n}\n","const API_ORIGIN = process.env.API_ORIGIN || 'https://larek-api.nomoreparties.com';\nexport const API_URL = `${API_ORIGIN}/api/weblarek`;\nexport const CDN_URL = `${API_ORIGIN}/content/weblarek`;\nexport const settings = {};\nexport const categoryCompareObj = {\n    'софт-скил': 'soft',\n    'дополнительное': 'additional',\n    'другое': 'other',\n    'кнопка': 'button',\n    'хард-скил': 'hard'\n};\n","import { Api } from \"../components/base/api\";\nimport { API_URL } from \"../utils/constants\";\n/**\n * Класс ApiService — конкретная реализация Api с фиксированным базовым URL.\n * Используется для взаимодействия с серверным API приложения.\n */\nexport class ApiService extends Api {\n    constructor() {\n        super(API_URL);\n    }\n}\n","import { ApiService } from \"./api.service\";\n/**\n * Сервис для работы с заказами через API.\n * Расширяет базовый ApiService, реализует метод отправки заказа.\n */\nexport class ApiOrderService extends ApiService {\n    constructor() {\n        super();\n    }\n    /**\n     * Отправить заказ на сервер.\n     * Выполняет POST-запрос по эндпоинту '/order' с данными заказа.\n     *\n     * @param createOrderRequest Объект с данными для создания заказа.\n     * @returns Промис, который разрешается ответом сервера с информацией о созданном заказе.\n     */\n    send(createOrderRequest) {\n        return this.post('/order', createOrderRequest);\n    }\n}\n","import { ApiService } from \"./api.service\";\n/**\n * Сервис для работы с продуктами через API.\n * Расширяет базовый ApiService, реализует методы получения списка продуктов и продукта по ID.\n */\nexport class ApiProductsService extends ApiService {\n    constructor() {\n        super();\n    }\n    /**\n     * Получить список всех продуктов.\n     * Выполняет GET-запрос по эндпоинту '/product' и возвращает массив продуктов.\n     *\n     * @returns Промис, который разрешается массивом продуктов.\n     */\n    getAll() {\n        return this.get('/product').then(productsResponse => productsResponse.items);\n    }\n    /**\n     * Получить продукт по его ID.\n     * Выполняет GET-запрос по эндпоинту '/product/{id}'.\n     *\n     * @param id Идентификатор продукта.\n     * @returns Промис, который разрешается объектом продукта.\n     */\n    getById(id) {\n        return this.get(`/product/${id}`);\n    }\n}\n","import { EventNames } from \"../types\";\n/**\n * Сервис корзины (BasketService) управляет списком товаров в корзине.\n * Все операции обновления и получения данных корзины выполняются\n * через StatefulEventEmitterService и события.\n */\nexport class BasketService {\n    constructor(_statefulEventEmitterService) {\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n    }\n    /**\n     * Получить все товары в корзине.\n     * Возвращает пустой массив, если корзина пуста.\n     * @returns {Product[]} Массив товаров в корзине.\n     */\n    getAll() {\n        const productsInBasket = this._statefulEventEmitterService.getLast(EventNames.BASKET);\n        if (productsInBasket === undefined) {\n            return [];\n        }\n        return productsInBasket;\n    }\n    /**\n     * Получить товар из корзины по его ID.\n     * @param {string} id Идентификатор товара.\n     * @returns {Product | undefined} Найденный товар или undefined, если не найден.\n     */\n    getById(id) {\n        const productsInBasket = this.getAll();\n        const product = productsInBasket.find(product => product.id === id);\n        return product;\n    }\n    /**\n     * Получить общую стоимость товаров в корзине.\n     * Суммирует поле price у всех товаров, учитывая, что цена может отсутствовать.\n     * @returns {number} Общая стоимость корзины.\n     */\n    getPriceBasket() {\n        const productsInBasket = this.getAll();\n        const price = productsInBasket.reduce((acc, product) => acc + (product.price || 0), 0);\n        return price;\n    }\n    /**\n     * Добавить товар в корзину.\n     * Если товар уже есть, добавление игнорируется.\n     * После добавления эмитит событие с обновлённым списком товаров,\n     * а также специальное событие добавления по ID товара.\n     * @param {Product} product Добавляемый товар.\n     */\n    add(product) {\n        const productsInBasket = this.getAll();\n        if (productsInBasket.find((item) => item.id === product.id)) {\n            return;\n        }\n        this._statefulEventEmitterService.emit(`add-card-to-basket-${product.id}`, product);\n        this._statefulEventEmitterService.offAllByEventName(`remove-card-to-basket-${product.id}`);\n        this._statefulEventEmitterService.emit(EventNames.BASKET, [...productsInBasket, product]);\n    }\n    /**\n     * Удалить товар из корзины.\n     * После удаления эмитит событие с обновлённым списком товаров,\n     * а также специальное событие удаления по ID товара.\n     * @param {Product} product Удаляемый товар.\n     */\n    remove(product) {\n        const productsInBasket = this.getAll();\n        const filteredProductsInBasket = productsInBasket.filter(item => item.id !== product.id);\n        this._statefulEventEmitterService.offAllByEventName(`add-card-to-basket-${product.id}`);\n        this._statefulEventEmitterService.emit(`remove-card-to-basket-${product.id}`, product);\n        this._statefulEventEmitterService.emit(EventNames.BASKET, filteredProductsInBasket);\n    }\n    /**\n     * Подписаться на обновления корзины.\n     * Вызывается при каждом изменении списка товаров.\n     * @param {(products: Product[]) => void} callback Коллбек с массивом товаров.\n     */\n    onBasket(callback) {\n        this._statefulEventEmitterService.on(EventNames.BASKET, callback);\n    }\n    /**\n     * Отписаться от обновлений корзины.\n     * @param {(products: Product[]) => void} callback Ранее добавленный обработчик.\n     */\n    offBasket(callback) {\n        this._statefulEventEmitterService.off(EventNames.BASKET, callback);\n    }\n    /**\n     * Подписаться на добавление конкретного товара по ID.\n     * Вызывается при добавлении этого товара в корзину.\n     * @param {string} id ID товара.\n     * @param {(product: Product) => void} callback Коллбек с товаром.\n     */\n    onBasketById(id, callback) {\n        this._statefulEventEmitterService.on(`add-card-to-basket-${id}`, callback);\n    }\n    /**\n     * Отписаться от событий добавления конкретного товара по ID.\n     * Удаляет все обработчики для события добавления товара с данным ID.\n     * @param {string} id ID товара.\n     */\n    offBasketById(id) {\n        this._statefulEventEmitterService.offAllByEventName(`add-card-to-basket-${id}`);\n    }\n    /**\n     * Очистить корзину — удалить все товары.\n     * Эмитит событие с пустым списком.\n     */\n    clear() {\n        this._statefulEventEmitterService.emit(EventNames.BASKET, []);\n    }\n}\n","import { categoryCompareObj, CDN_URL } from \"./constants\";\nexport function pascalToKebab(value) {\n    return value.replace(/([a-z0–9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nexport function isSelector(x) {\n    return (typeof x === \"string\") && x.length > 1;\n}\nexport function isEmpty(value) {\n    return value === null || value === undefined;\n}\nexport function ensureAllElements(selectorElement, context = document) {\n    if (isSelector(selectorElement)) {\n        return Array.from(context.querySelectorAll(selectorElement));\n    }\n    if (selectorElement instanceof NodeList) {\n        return Array.from(selectorElement);\n    }\n    if (Array.isArray(selectorElement)) {\n        return selectorElement;\n    }\n    throw new Error(`Unknown selector element`);\n}\nexport function ensureElement(selectorElement, context) {\n    if (isSelector(selectorElement)) {\n        const elements = ensureAllElements(selectorElement, context);\n        if (elements.length > 1) {\n            console.warn(`selector ${selectorElement} return more then one element`);\n        }\n        if (elements.length === 0) {\n            throw new Error(`selector ${selectorElement} return nothing`);\n        }\n        return elements.pop();\n    }\n    if (selectorElement instanceof HTMLElement) {\n        return selectorElement;\n    }\n    throw new Error('Unknown selector element');\n}\nexport function cloneTemplate(query) {\n    const template = ensureElement(query);\n    return template.content.firstElementChild.cloneNode(true);\n}\nexport function bem(block, element, modifier) {\n    let name = block;\n    if (element)\n        name += `__${element}`;\n    if (modifier)\n        name += `_${modifier}`;\n    return {\n        name,\n        class: `.${name}`\n    };\n}\nexport function getObjectProperties(obj, filter) {\n    return Object.entries(Object.getOwnPropertyDescriptors(Object.getPrototypeOf(obj)))\n        .filter(([name, prop]) => filter ? filter(name, prop) : (name !== 'constructor'))\n        .map(([name, prop]) => name);\n}\n/**\n * Устанавливает dataset атрибуты элемента\n */\nexport function setElementData(el, data) {\n    for (const key in data) {\n        el.dataset[key] = String(data[key]);\n    }\n}\n/**\n * Получает типизированные данные из dataset атрибутов элемента\n */\nexport function getElementData(el, scheme) {\n    const data = {};\n    for (const key in el.dataset) {\n        data[key] = scheme[key](el.dataset[key]);\n    }\n    return data;\n}\n/**\n * Проверка на простой объект\n */\nexport function isPlainObject(obj) {\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype === Object.getPrototypeOf({}) ||\n        prototype === null;\n}\nexport function isBoolean(v) {\n    return typeof v === 'boolean';\n}\n/**\n * Фабрика DOM-элементов в простейшей реализации\n * здесь не учтено много факторов\n * в интернет можно найти более полные реализации\n */\nexport function createElement(tagName, props, children) {\n    const element = document.createElement(tagName);\n    if (props) {\n        for (const key in props) {\n            const value = props[key];\n            if (isPlainObject(value) && key === 'dataset') {\n                setElementData(element, value);\n            }\n            else {\n                // @ts-expect-error fix indexing later\n                element[key] = isBoolean(value) ? value : String(value);\n            }\n        }\n    }\n    if (children) {\n        for (const child of Array.isArray(children) ? children : [children]) {\n            element.append(child);\n        }\n    }\n    return element;\n}\nexport function getProductPriceText(price) {\n    return price === null ? 'Бесценно' : `${price} синапсов`;\n}\nexport function getProductPrice(price) {\n    return price === null ? 0 : price;\n}\nexport function getProductCategoryCssClass(category) {\n    for (const categoryItem in categoryCompareObj) {\n        if (categoryItem === category)\n            return `card__category_${categoryCompareObj[category]}`;\n    }\n    return `card__category_${categoryCompareObj['другое']}`;\n}\nexport function getCdnImgUrl(img) {\n    return `${CDN_URL}/${img}`;\n}\nexport function hashCode(obj) {\n    return (Math.random() * 1e9 >>> 0).toString(36);\n}\n","import { hashCode } from \"../utils/utils\";\nexport class ComponentRegistryService {\n    constructor() {\n        this._byInstance = new WeakMap();\n        this._byElement = new WeakMap();\n        this._listeners = new Map();\n    }\n    register(instance, element) {\n        const id = this._generateId(instance);\n        const info = { instance, element, id };\n        this._byInstance.set(instance, info);\n        this._byElement.set(element, info);\n        element.dataset.componentId = id;\n        const listeners = this._listeners.get(id);\n        if (listeners) {\n            listeners.forEach(cb => cb());\n            this._listeners.delete(id);\n        }\n    }\n    getByInstance(instance) {\n        return this._byInstance.get(instance);\n    }\n    getByElement(element) {\n        return this._byElement.get(element);\n    }\n    onRegisteredByInstance(instance, callback) {\n        const info = this.getByInstance(instance);\n        if (info)\n            return callback();\n        const id = this._generateId(instance);\n        if (!this._listeners.has(id))\n            this._listeners.set(id, new Set());\n        this._listeners.get(id).add(callback);\n    }\n    _generateId(instance) {\n        return (instance.constructor.name || 'Component') + '_' + hashCode(instance);\n    }\n}\n","export class ModalService {\n    constructor(_modalComponent, _componentRegistryService) {\n        this._modalComponent = _modalComponent;\n        this._componentRegistryService = _componentRegistryService;\n        this._currentModal = null;\n        this._onCloseListeners = new Map();\n        this._pendingCloseListeners = new WeakMap();\n        this._pendingCloseOnceListeners = new WeakMap();\n    }\n    open(content, renderArgs, options) {\n        var _a;\n        const element = this._resolveElement(content, renderArgs);\n        // Закрываем текущую модалку\n        if (this._currentModal) {\n            this._handleModalClose(this._currentModal);\n            this._invokeRegularCloseCallbacks(this._currentModal.element);\n        }\n        const onceListeners = this._collectPendingOnceListeners(content);\n        const regularListeners = this._collectPendingRegularListeners(content);\n        let component = this._isComponent(content)\n            ? content\n            : (_a = this._componentRegistryService.getByElement(content)) === null || _a === void 0 ? void 0 : _a.instance;\n        this._currentModal = {\n            element,\n            component,\n            onClose: options === null || options === void 0 ? void 0 : options.onClose,\n        };\n        this._modalComponent.open(element, {\n            onOpen: options === null || options === void 0 ? void 0 : options.onOpen,\n            onClose: () => {\n                // Всегда вызывается при любом закрытии\n                this._handleModalClose(this._currentModal);\n                this._invokeRegularCloseCallbacks(element);\n            },\n            onCloseOnce: () => {\n                // Только ручное закрытие — сбрасываем состояние\n                onceListeners.forEach((cb) => cb());\n                this._currentModal = null;\n            },\n        });\n        if (regularListeners.length > 0) {\n            if (!this._onCloseListeners.has(element)) {\n                this._onCloseListeners.set(element, new Set());\n            }\n            const set = this._onCloseListeners.get(element);\n            regularListeners.forEach((cb) => set.add(cb));\n        }\n    }\n    close(content) {\n        if (!this._currentModal)\n            return;\n        const isSame = this._isComponent(content)\n            ? this._currentModal.component === content\n            : this._currentModal.element === content;\n        if (!isSame)\n            return;\n        // Программное закрытие — не вызывает onCloseOnce\n        this._modalComponent.close();\n        this._handleModalClose(this._currentModal);\n        this._invokeRegularCloseCallbacks(this._currentModal.element);\n        // Не обнуляем _currentModal — onCloseOnce этого не требует\n    }\n    onClose(target, callback) {\n        setTimeout(() => {\n            const element = this._getElementIfOpen(target);\n            if (element) {\n                if (!this._onCloseListeners.has(element)) {\n                    this._onCloseListeners.set(element, new Set());\n                }\n                this._onCloseListeners.get(element).add(callback);\n            }\n            else {\n                this._addPendingListener(this._pendingCloseListeners, target, callback);\n            }\n        }, 0);\n    }\n    onCloseOnce(target, callback) {\n        setTimeout(() => {\n            this._addPendingListener(this._pendingCloseOnceListeners, target, callback);\n        }, 0);\n    }\n    _invokeRegularCloseCallbacks(element) {\n        const regular = this._onCloseListeners.get(element);\n        regular === null || regular === void 0 ? void 0 : regular.forEach((cb) => cb());\n    }\n    _handleModalClose(modal) {\n        var _a;\n        (_a = modal === null || modal === void 0 ? void 0 : modal.onClose) === null || _a === void 0 ? void 0 : _a.call(modal);\n    }\n    _resolveElement(content, renderArgs) {\n        if (this._isComponent(content)) {\n            const args = Array.isArray(renderArgs) ? renderArgs : [renderArgs];\n            return content.render(...args);\n        }\n        return content;\n    }\n    _isComponent(obj) {\n        return typeof (obj === null || obj === void 0 ? void 0 : obj.render) === 'function';\n    }\n    _getElementIfOpen(content) {\n        if (!this._currentModal)\n            return null;\n        if (this._isComponent(content)) {\n            return this._currentModal.component === content ? this._currentModal.element : null;\n        }\n        return this._currentModal.element === content ? content : null;\n    }\n    _addPendingListener(storage, target, callback) {\n        if (!storage.has(target)) {\n            storage.set(target, new Set());\n        }\n        storage.get(target).add(callback);\n    }\n    _collectPendingRegularListeners(target) {\n        const listeners = this._pendingCloseListeners.get(target);\n        if (!listeners)\n            return [];\n        this._pendingCloseListeners.delete(target);\n        return Array.from(listeners);\n    }\n    _collectPendingOnceListeners(target) {\n        const listeners = this._pendingCloseOnceListeners.get(target);\n        if (!listeners)\n            return [];\n        this._pendingCloseOnceListeners.delete(target);\n        return Array.from(listeners);\n    }\n}\n","import { EventNames } from \"../types\";\n/**\n * Сервис заказа (OrderService) реализует логику работы с заказом.\n * Взаимодействует со слоями через StatefulEventEmitterService,\n * используя пользовательские события.\n */\nexport class OrderService {\n    constructor(_statefulEventEmitterService, _validationOrderService, _apiOrderService, _basketService) {\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._validationOrderService = _validationOrderService;\n        this._apiOrderService = _apiOrderService;\n        this._basketService = _basketService;\n    }\n    get isValid() {\n        const order = Object.assign({}, this._getCurrentOrder());\n        const result = this._validationOrderService.validate(order, ['email', 'phone', 'address']);\n        return result.isValid;\n    }\n    updateEmail(email) {\n        this._emitOrderUpdate({ email });\n    }\n    updatePhone(phone) {\n        this._emitOrderUpdate({ phone });\n    }\n    setAddress(address) {\n        this._emitOrderUpdate({ address });\n    }\n    setPaymentMethod(payment) {\n        this._emitOrderUpdate({ payment });\n    }\n    clear() {\n        this._statefulEventEmitterService.clearLast(EventNames.ORDER_CHANGED);\n    }\n    onFormStateChange(fields, callback) {\n        let hasChanged = false;\n        const handler = (order) => {\n            const hasAnyField = fields.some((field) => order[field] !== undefined && order[field] !== '');\n            if (!hasAnyField && !hasChanged)\n                return;\n            hasChanged = true;\n            const result = this._validationOrderService.validate(order, fields);\n            callback(result);\n        };\n        this._statefulEventEmitterService.on(EventNames.ORDER_CHANGED, handler);\n        return () => {\n            this._statefulEventEmitterService.off(EventNames.ORDER_CHANGED, handler);\n        };\n    }\n    submit() {\n        const order = Object.assign({}, this._getCurrentOrder());\n        order.items = this._basketService.getAll().map((p) => p.id);\n        order.total = this._basketService.getPriceBasket();\n        if (!this.isValid) {\n            alert('Форма содержит ошибки');\n            const result = this._validationOrderService.validate(order, ['email', 'phone', 'address']);\n            console.warn('Ошибки при сабмите:', result.errors);\n            return;\n        }\n        this._apiOrderService.send(order)\n            .then((res) => {\n            this._statefulEventEmitterService.emit(EventNames.OPEN_SUCCESS_ORDER, res);\n        })\n            .catch((err) => {\n            console.error(err);\n            alert('Ошибка при отправке заказа');\n        });\n    }\n    _emitOrderUpdate(partialOrder) {\n        const currentOrder = this._getCurrentOrder();\n        const newOrder = Object.assign(Object.assign({}, currentOrder), partialOrder);\n        this._statefulEventEmitterService.emit(EventNames.ORDER_CHANGED, newOrder);\n    }\n    _getCurrentOrder() {\n        var _a;\n        return (_a = this._statefulEventEmitterService.getLast(EventNames.ORDER_CHANGED)) !== null && _a !== void 0 ? _a : {};\n    }\n}\n","import { EventNames } from \"../types\";\n/**\n * Сервис модели для работы с продуктами.\n *\n * Основные обязанности:\n * - Загружает данные о продуктах с API.\n * - Хранит последнее состояние полученных данных.\n * - Рассылает изменения подписчикам через событийную шину (`StatefulEventEmitterService`).\n * - Позволяет реактивно или лениво подписаться на данные с возможностью отмены ожидания.\n *\n * Архитектурная роль:\n * - Является моделью данных для продуктов в терминах паттерна MV*.\n * - Представление (например, компонент галереи) не взаимодействует напрямую с API,\n *   а обращается к сервису модели, получая данные через `getAll()`.\n * - Это обеспечивает разделение ответственности: данные загружаются и управляются здесь,\n *   а представление только подписывается или ждёт результат.\n *\n * Преимущества:\n * - Централизованное хранение и распространение состояния.\n * - Унифицированный интерфейс подписки и отписки.\n * - Готов к расширению: можно добавить фильтрацию, кеширование, ошибки и т. д.\n */\nexport class ProductsService {\n    constructor(_apiProductsService, _statefulEventEmitterService) {\n        this._apiProductsService = _apiProductsService;\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n    }\n    /**\n     * Загружает список продуктов с API, эмитит событие об обновлении продуктов и подписывается на изменения.\n     *\n     * @param callback Функция, которая вызывается при каждом обновлении списка продуктов.\n     * @param onDestroy Опциональная функция, принимающая колбэк для отписки от события.\n     *                  Колбэк нужно вызвать, чтобы прекратить подписку (например, при размонтировании компонента).\n     */\n    getAll(callback, onDestroy) {\n        this._apiProductsService.getAll()\n            .then(products => {\n            // Сразу эмитируем полученные продукты\n            this._update(products);\n            const _callback = (products) => {\n                callback(products);\n            };\n            // Подписываемся на обновления через callback\n            this._statefulEventEmitterService.on(EventNames.PRODUCTS_CHANGED, _callback);\n            // Позволяем внешнему коду отписаться при необходимости\n            if (onDestroy) {\n                onDestroy(() => {\n                    this._statefulEventEmitterService.off(EventNames.PRODUCTS_CHANGED, _callback);\n                });\n            }\n        })\n            .catch(error => {\n            console.error('Ошибка при попытке загрузить список товаров', error);\n        });\n    }\n    /**\n     * Эмитит событие об обновлении продуктов\n     * @param products Список продуктов\n     */\n    _update(products) {\n        this._statefulEventEmitterService.emit(EventNames.PRODUCTS_CHANGED, products);\n    }\n}\n","import { EventEmitter } from \"../components/base/events\";\n/**\n * StatefulEventEmitterService — расширение EventEmitter,\n * которое сохраняет последнее значение каждого события.\n * При подписке сразу вызывает обработчик с последним сохранённым значением.\n */\nexport class StatefulEventEmitterService extends EventEmitter {\n    constructor() {\n        super(...arguments);\n        this._lastValues = new Map();\n    }\n    /**\n     * Переопределение emit для сохранения последнего значения события.\n     * @param eventName Имя события.\n     * @param data Данные события.\n     */\n    emit(eventName, data) {\n        this._lastValues.set(eventName, data);\n        super.emit(eventName, data);\n    }\n    /**\n     * Переопределение on для вызова обработчика сразу с последним значением.\n     * @param eventName Имя события.\n     * @param callback Обработчик события.\n     */\n    on(eventName, callback) {\n        super.on(eventName, callback);\n        if (typeof eventName === 'string' && this._lastValues.has(eventName)) {\n            const lastValue = this._lastValues.get(eventName);\n            callback(lastValue);\n        }\n    }\n    /**\n     * Удалить всех подписчиков указанного события и сбросить последнее значение.\n     * @param eventName Имя события.\n     */\n    offAllByEventName(eventName) {\n        this._events.delete(eventName);\n        if (typeof eventName === 'string') {\n            this._lastValues.delete(eventName);\n        }\n    }\n    /**\n     * Получить последнее значение события.\n     * @param eventName Имя события.\n     * @returns Последние данные события, либо undefined.\n     */\n    getLast(eventName) {\n        return this._lastValues.get(eventName);\n    }\n    /**\n     * Очистить сохранённые значения события или всех событий.\n     * @param eventName Имя события, если нужно очистить конкретное.\n     */\n    clearLast(eventName) {\n        if (eventName) {\n            this._lastValues.delete(eventName);\n        }\n        else {\n            this._lastValues.clear();\n        }\n    }\n}\n","/**\n * Брокер событий, классическая реализация\n * В расширенных вариантах есть возможность подписаться на все события\n * или слушать события по шаблону например\n */\nexport class EventEmitter {\n    constructor() {\n        this._events = new Map();\n    }\n    /**\n     * Установить обработчик на событие\n     */\n    on(eventName, callback) {\n        var _a;\n        if (!this._events.has(eventName)) {\n            this._events.set(eventName, new Set());\n        }\n        (_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.add(callback);\n    }\n    /**\n     * Снять обработчик с события\n     */\n    off(eventName, callback) {\n        var _a;\n        if (this._events.has(eventName)) {\n            this._events.get(eventName).delete(callback);\n            if (((_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.size) === 0) {\n                this._events.delete(eventName);\n            }\n        }\n    }\n    /**\n     * Инициировать событие с данными\n     */\n    emit(eventName, data) {\n        this._events.forEach((subscribers, name) => {\n            if (name === '*')\n                subscribers.forEach(callback => callback({\n                    eventName,\n                    data\n                }));\n            if (name instanceof RegExp && name.test(eventName) || name === eventName) {\n                subscribers.forEach(callback => callback(data));\n            }\n        });\n    }\n    /**\n     * Слушать все события\n     */\n    onAll(callback) {\n        this.on(\"*\", callback);\n    }\n    /**\n     * Сбросить все обработчики\n     */\n    offAll() {\n        this._events = new Map();\n    }\n    /**\n     * Сделать коллбек триггер, генерирующий событие при вызове\n     */\n    trigger(eventName, context) {\n        return (event = {}) => {\n            this.emit(eventName, Object.assign(Object.assign({}, (event || {})), (context || {})));\n        };\n    }\n}\n","/**\n * Сервис валидации данных заказа.\n * Позволяет проверить указанные поля объекта заказа и вернуть ошибки.\n */\nexport class ValidationOrderService {\n    /**\n     * Проверяет валидность указанных полей заказа.\n     * Для каждого поля вызывает приватный метод проверки.\n     *\n     * @param order Объект с данными заказа (частичный).\n     * @param fields Массив ключей полей, которые нужно валидировать.\n     * @returns Объект с результатом валидации:\n     * - isValid — true, если ошибок нет.\n     * - errors — объект с сообщениями ошибок по каждому полю.\n     */\n    validate(order, fields) {\n        const errors = {};\n        for (const field of fields) {\n            const error = this._validateField(field, order[field]);\n            if (error)\n                errors[field] = error;\n        }\n        const isValid = Object.keys(errors).length === 0;\n        return { isValid, errors };\n    }\n    /**\n     * Приватный метод проверки конкретного поля заказа.\n     * Возвращает строку с ошибкой или null, если ошибок нет.\n     *\n     * @param field Имя поля.\n     * @param value Значение поля.\n     * @returns Сообщение об ошибке или null.\n     * @private\n     */\n    _validateField(field, value) {\n        switch (field) {\n            case 'email':\n                if (!value)\n                    return 'Необходимо указать email';\n                return null;\n            case 'phone':\n                if (!value)\n                    return 'Необходимо указать телефон';\n                return null;\n            case 'address':\n                if (!value)\n                    return 'Необходимо указать адрес';\n                return null;\n            default:\n                return null;\n        }\n    }\n}\n","export const DI_INIT = Symbol('di_init');\n","import { DI_INIT } from \"./di-symbols\";\n/**\n * Контейнер для управления зависимостями (DI) с поддержкой синглтонов и transient-сервисов.\n */\nclass DIContainer {\n    constructor() {\n        /** Реестр зарегистрированных провайдеров */\n        this._registry = new Map();\n        /** Хранилище синглтон-экземпляров */\n        this._singletons = new Map();\n    }\n    /**\n     * Регистрирует провайдера для класса.\n     * @template T Тип создаваемого экземпляра.\n     * @param key Конструктор класса, который регистрируется.\n     * @param DIProvider Параметры провайдера (класс, зависимости, область).\n     * @throws Ошибка, если количество зависимостей не совпадает с количеством параметров конструктора.\n     */\n    register(key, DIProvider) {\n        var _a, _b, _c;\n        const name = key.name;\n        const useClass = (DIProvider === null || DIProvider === void 0 ? void 0 : DIProvider.useClass) || key;\n        const deps = (_b = (_a = DIProvider === null || DIProvider === void 0 ? void 0 : DIProvider.deps) !== null && _a !== void 0 ? _a : useClass.inject) !== null && _b !== void 0 ? _b : [];\n        // Проверка соответствия количества параметров\n        const expectedLength = useClass.length;\n        if (expectedLength !== deps.length) {\n            throw new Error(`Invalid registration for '${name}': DIConstructor expects ${expectedLength} dependencies, but got ${deps.length}`);\n        }\n        this._registry.set(name, {\n            useClass,\n            deps,\n            scope: (_c = DIProvider === null || DIProvider === void 0 ? void 0 : DIProvider.scope) !== null && _c !== void 0 ? _c : 'singleton',\n        });\n    }\n    /**\n     * Разрешает (создаёт) экземпляр зависимости по имени или конструктору.\n     * Для синглтонов возвращает один и тот же экземпляр, для transient — новый.\n     * @template T Тип создаваемого экземпляра.\n     * @param key Имя класса или сам конструктор.\n     * @returns Экземпляр запрошенной зависимости.\n     * @throws Ошибка, если зависимость не зарегистрирована.\n     */\n    resolve(key) {\n        const name = typeof key === 'string' ? key : key.name;\n        const DIProvider = this._registry.get(name);\n        if (!DIProvider) {\n            throw new Error(`Dependency '${name}' is not registered.`);\n        }\n        if (DIProvider.scope !== 'transient' && this._singletons.has(name)) {\n            return this._singletons.get(name);\n        }\n        const dependencies = (DIProvider.deps || []).map(dep => this.resolve(dep));\n        const instance = new DIProvider.useClass(...dependencies);\n        // только контейнер знает про этот Symbol\n        if (typeof instance[DI_INIT] === 'function') {\n            instance[DI_INIT]();\n        }\n        if (DIProvider.scope !== 'transient') {\n            this._singletons.set(name, instance);\n        }\n        return instance;\n    }\n}\n/** Глобальный контейнер зависимостей */\nexport const container = new DIContainer();\n","import { container } from \"./di-container\";\nexport function inject(key) {\n    return container.resolve(key);\n}\n","import { ComponentRegistryService } from \"../../../../services/component-registry.service\";\nimport { cloneTemplate } from \"../../../../utils/utils\";\nimport { inject } from \"../../di/di-inject\";\n/**\n * Базовый абстрактный компонент\n */\nexport class BaseComponent {\n    constructor(template) {\n        this._template = template;\n        this._componentRegistryService = inject(ComponentRegistryService);\n    }\n    _cloneTemplate() {\n        const element = cloneTemplate(this._template);\n        return this._registerElement(element);\n    }\n    _registerElement(element) {\n        this._componentRegistryService.register(this, element);\n        return element;\n    }\n}\n","import { BaseComponent } from \"./base.component\";\n/**\n * Не кэшируемый компонент — каждый вызов render возвращает новый элемент\n */\nexport class StatelessComponent extends BaseComponent {\n}\n","import { getProductPriceText } from \"../../../utils/utils\";\nimport { StatelessComponent } from \"./base/stateless.component\";\nexport class BasketCardComponent extends StatelessComponent {\n    constructor(_basketService) {\n        super(document.querySelector('#card-basket'));\n        this._basketService = _basketService;\n        this._deleteProduct = (product) => {\n            this._basketService.remove(product);\n        };\n    }\n    render(product, index) {\n        const basketCardElement = this._cloneTemplate();\n        const basketItemIndexElemet = basketCardElement.querySelector('.basket__item-index');\n        const basketItemTitleElement = basketCardElement.querySelector('.card__title');\n        const basketItemPriceElement = basketCardElement.querySelector('.card__price');\n        const basketItemDeleteBtnElement = basketCardElement.querySelector('.basket__item-delete');\n        basketItemIndexElemet.textContent = `${index + 1}`;\n        basketItemTitleElement.textContent = product.title;\n        basketItemPriceElement.textContent = getProductPriceText(product.price);\n        basketItemDeleteBtnElement.addEventListener('click', () => this._deleteProduct(product));\n        return basketCardElement;\n    }\n}\n","import { DI_INIT } from \"../../di/di-symbols\";\nimport { BaseComponent } from \"./base.component\";\n/**\n * Кэшируемый компонент (рендерит только один раз, затем возвращает сохранённый элемент)\n */\nexport class CachedComponent extends BaseComponent {\n    constructor(template) {\n        super(template);\n        this._cachedElement = this._cloneTemplate();\n        this._cachedData = this._initCachedData();\n        this._isRegistered = false;\n        this[DI_INIT] = () => {\n            this._afterInit();\n        };\n    }\n    render(...args) {\n        this._update(...args);\n        if (!this._isRegistered) {\n            this._cachedElement = this._registerElement(this._cachedElement);\n            this._isRegistered = true;\n        }\n        return this._cachedElement;\n    }\n    _afterInit() {\n        // Переопределяется при необходимости\n    }\n    _update(...args) {\n        // Переопределяется при необходимости\n    }\n}\n","import { EventNames } from \"../../../types\";\nimport { CachedComponent } from \"./base/cached.component\";\nexport class BasketComponent extends CachedComponent {\n    constructor(_basketService, _basketCardComponent, _statefulEventEmitterService) {\n        super(document.querySelector('#basket'));\n        this._basketService = _basketService;\n        this._basketCardComponent = _basketCardComponent;\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n    }\n    _initCachedData() {\n        const listItemEmptyElement = document.createElement('div');\n        const basketList = this._cachedElement.querySelector('.basket__list');\n        const basketListContent = document.createElement('div');\n        listItemEmptyElement.classList.add('basket__list-empty');\n        basketListContent.classList.add('basket__list-content');\n        basketList.parentElement.insertBefore(basketListContent, basketList);\n        basketListContent.appendChild(listItemEmptyElement);\n        basketListContent.appendChild(basketList);\n        return {\n            basketElement: this._cachedElement,\n            basketList: basketList,\n            priceElement: this._cachedElement.querySelector('.basket__price'),\n            submitBtnElement: this._cachedElement.querySelector('.basket__button'),\n            listItemEmptyElement: listItemEmptyElement\n        };\n    }\n    _afterInit() {\n        const { basketList, listItemEmptyElement, priceElement, submitBtnElement } = this._cachedData;\n        const getPriceBasket = () => this._basketService.getPriceBasket();\n        const renderAll = (products = []) => {\n            basketList.textContent = '';\n            this._renderActionsInfo(submitBtnElement, priceElement, listItemEmptyElement, getPriceBasket());\n            this._appendBasketElements(basketList, products);\n        };\n        renderAll();\n        this._basketService.onBasket((products) => renderAll(products));\n        submitBtnElement.addEventListener('click', () => {\n            this._statefulEventEmitterService.emit(EventNames.OPEN_ORDER_ADDRESS_PAYMENT);\n        });\n    }\n    _appendBasketElements(basketList, products) {\n        basketList.textContent = '';\n        for (let i = 0; i < products.length; i++) {\n            const basketCardElement = this._basketCardComponent.render(products[i], i);\n            basketList.appendChild(basketCardElement);\n        }\n    }\n    _renderActionsInfo(submitBtnElement, priceElement, listItemEmptyElement, priceBasket) {\n        submitBtnElement.disabled = priceBasket === 0;\n        priceElement.textContent = `${priceBasket} синапсов`;\n        listItemEmptyElement.textContent = priceBasket === 0 ? 'Корзина пуста' : '';\n    }\n}\n","import { EventNames } from \"../../../types\";\nimport { getCdnImgUrl, getProductCategoryCssClass, getProductPriceText } from \"../../../utils/utils\";\nimport { StatelessComponent } from \"./base/stateless.component\";\nexport class CardCatalogComponent extends StatelessComponent {\n    constructor(_statefulEventEmitterService) {\n        super(document.querySelector('#card-catalog'));\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        /**\n         * Обработчик клика по карточке, который инициирует событие открытия полной информации о продукте.\n         *\n         * @param product - продукт, связанный с данной карточкой\n         */\n        this._cardCatalogClick = (product) => {\n            this._statefulEventEmitterService.emit(EventNames.OPEN_CARD_FULL, product);\n        };\n    }\n    render(product) {\n        const cardCatalogElement = this._cloneTemplate();\n        const cardCategory = cardCatalogElement.querySelector('.card__category');\n        const cardTitle = cardCatalogElement.querySelector('.card__title');\n        const cardImg = cardCatalogElement.querySelector('.card__image');\n        const cardPrice = cardCatalogElement.querySelector('.card__price');\n        cardCategory.textContent = product.category;\n        cardCategory.classList.remove('card__category_soft');\n        cardCategory.classList.add(getProductCategoryCssClass(product.category));\n        cardTitle.textContent = product.title;\n        cardImg.alt = product.title;\n        cardImg.src = getCdnImgUrl(product.image);\n        cardPrice.textContent = getProductPriceText(product.price);\n        cardCatalogElement.addEventListener('click', () => this._cardCatalogClick(product));\n        return cardCatalogElement;\n    }\n}\n","import { getCdnImgUrl, getProductCategoryCssClass, getProductPriceText } from \"../../../utils/utils\";\nimport { CachedComponent } from \"./base/cached.component\";\nexport class CardFullComponent extends CachedComponent {\n    constructor(_basketService) {\n        super(document.querySelector('#card-preview'));\n        this._basketService = _basketService;\n    }\n    _initCachedData() {\n        return {\n            category: this._cachedElement.querySelector('.card__category'),\n            title: this._cachedElement.querySelector('.card__title'),\n            img: this._cachedElement.querySelector('.card__image'),\n            price: this._cachedElement.querySelector('.card__price'),\n            btn: this._cachedElement.querySelector('.card__button'),\n            product: null\n        };\n    }\n    _afterInit() {\n        this._cachedData.category.className = '';\n        this._cachedData.btn.addEventListener('click', () => {\n            if (this._cachedData.product !== null) {\n                this._renderBtnText(this._cachedData.product, this._cachedData.btn);\n            }\n        });\n    }\n    _update(product) {\n        const { category, title, img, price, btn } = this._cachedData;\n        this._cachedData.product = product;\n        category.textContent = product.category;\n        category.className = '';\n        category.classList.add('card__category', getProductCategoryCssClass(product.category));\n        title.textContent = product.title;\n        img.alt = product.title;\n        img.src = getCdnImgUrl(product.image);\n        price.textContent = getProductPriceText(product.price);\n        const isInBasket = this._basketService.getById(product.id);\n        if (product.price === null) {\n            btn.disabled = true;\n            btn.textContent = 'Недоступно';\n        }\n        else {\n            btn.disabled = false;\n            btn.textContent = isInBasket ? 'Удалить из корзины' : 'Купить';\n        }\n    }\n    _renderBtnText(product, btn) {\n        const isInBasket = this._basketService.getById(product.id);\n        if (isInBasket) {\n            this._basketService.remove(product);\n            btn.textContent = 'Купить';\n        }\n        else {\n            this._basketService.add(product);\n            btn.textContent = 'Удалить из корзины';\n        }\n    }\n}\n","import { CachedComponent } from \"./base/cached.component\";\nexport class EmailPhoneOrderComponent extends CachedComponent {\n    constructor(_orderService, _modalService, _basketService) {\n        super(document.querySelector('#contacts'));\n        this._orderService = _orderService;\n        this._modalService = _modalService;\n        this._basketService = _basketService;\n    }\n    _initCachedData() {\n        const emailErrorEl = document.createElement('span');\n        const phoneErrorEl = document.createElement('span');\n        const formErrors = this._cachedElement.querySelector('.form__errors');\n        formErrors.append(emailErrorEl, phoneErrorEl);\n        return {\n            inputEmail: this._cachedElement.querySelector('input[name=\"email\"]'),\n            inputPhone: this._cachedElement.querySelector('input[name=\"phone\"]'),\n            submitButton: this._cachedElement.querySelector('button[type=\"submit\"]'),\n            formErrors: formErrors,\n            emailErrorEl: emailErrorEl,\n            phoneErrorEl: phoneErrorEl\n        };\n    }\n    _afterInit() {\n        const { inputEmail, inputPhone, submitButton, emailErrorEl, phoneErrorEl } = this._cachedData;\n        this._cachedData.inputEmail.addEventListener('input', () => {\n            this._orderService.updateEmail(inputEmail.value);\n        });\n        inputPhone.addEventListener('input', () => {\n            this._orderService.updatePhone(inputPhone.value);\n        });\n        this._orderService.onFormStateChange(['email', 'phone'], (state) => {\n            var _a, _b;\n            emailErrorEl.innerHTML = `${(_a = state.errors.email) !== null && _a !== void 0 ? _a : ''}<br>`;\n            phoneErrorEl.innerHTML = (_b = state.errors.phone) !== null && _b !== void 0 ? _b : '';\n            submitButton.disabled = !state.isValid;\n        });\n        this._cachedElement.addEventListener('submit', (event) => {\n            event.preventDefault();\n            this._orderService.submit();\n            if (this._orderService.isValid) {\n                this._orderService.clear();\n                this._basketService.clear();\n            }\n        });\n        this._modalService.onCloseOnce(this, () => {\n            this._orderService.clear();\n        });\n    }\n    _clearElements() {\n        this._cachedData.inputEmail.value = '';\n        this._cachedData.inputPhone.value = '';\n        this._cachedData.submitButton.disabled = true;\n        this._cachedData.emailErrorEl.textContent = '';\n        this._cachedData.phoneErrorEl.textContent = '';\n    }\n    _update() {\n        this._clearElements();\n    }\n}\n","/**\n * Компонент модального окна, отвечающий за отображение, открытие и закрытие модалки.\n *\n * Основные задачи:\n * - Вставка переданного контента в модальное окно.\n * - Управление видимостью модального окна и блокировка скролла страницы при открытии.\n * - Обработка событий закрытия: клик по крестику, клик вне содержимого (оверлей) и клавиша Escape.\n * - Подписка и отписка от событий при открытии и закрытии модального окна.\n */\nexport class ModalComponent {\n    constructor() {\n        this._openCallback = () => { };\n        this._closeCallback = () => { };\n        this._closeOnceCallback = () => { };\n        this._isOpen = false;\n        this._pointerDownInsideModal = false;\n        this._pointerUpInsideModal = false;\n        this._isProgrammaticClose = false;\n        /**\n         * Программное закрытие модалки (по команде сервиса).\n         */\n        this.close = () => {\n            if (!this._isOpen)\n                return;\n            this._isProgrammaticClose = true;\n            this._modalContainerElement.classList.remove('modal_active');\n            document.body.classList.remove('page_overflow-hidden');\n            this._isOpen = false;\n            this._destroyEventListeners();\n            this._closeCallback();\n            // `onCloseOnce` вызывается только при ручном закрытии\n            // (т.е. здесь — не вызывается)\n            this._isProgrammaticClose = false;\n        };\n        /**\n         * Ручное закрытие (крестик, оверлей, Esc).\n         */\n        this._manualClose = () => {\n            if (!this._isOpen)\n                return;\n            this._modalContainerElement.classList.remove('modal_active');\n            document.body.classList.remove('page_overflow-hidden');\n            this._isOpen = false;\n            this._destroyEventListeners();\n            this._closeCallback();\n            if (!this._isProgrammaticClose) {\n                this._closeOnceCallback();\n            }\n        };\n        this._onPointerDown = (event) => {\n            this._pointerDownInsideModal = this._modalContentElement.contains(event.target);\n        };\n        this._onPointerUp = (event) => {\n            this._pointerUpInsideModal = this._modalContentElement.contains(event.target);\n        };\n        this._closeByOverlay = (event) => {\n            if (event.target === this._modalContainerElement &&\n                !this._pointerDownInsideModal &&\n                !this._pointerUpInsideModal) {\n                this._manualClose();\n            }\n        };\n        this._closeByEsc = (event) => {\n            if (event.key === 'Escape') {\n                this._manualClose();\n            }\n        };\n        this._modalContainerElement = document.querySelector('#modal-container');\n        this._modalContentElement = this._modalContainerElement.querySelector('.modal__content');\n        this._modalCloseElement = this._modalContainerElement.querySelector('.modal__close');\n    }\n    /**\n     * Открывает модальное окно с указанным содержимым.\n     * Если модалка уже открыта, просто обновляет контент.\n     */\n    open(content, options) {\n        var _a, _b, _c;\n        const isAlreadyOpen = this._isOpen;\n        this._modalContentElement.textContent = '';\n        this._modalContentElement.appendChild(content);\n        this._openCallback = (_a = options === null || options === void 0 ? void 0 : options.onOpen) !== null && _a !== void 0 ? _a : (() => { });\n        this._closeCallback = (_b = options === null || options === void 0 ? void 0 : options.onClose) !== null && _b !== void 0 ? _b : (() => { });\n        this._closeOnceCallback = (_c = options === null || options === void 0 ? void 0 : options.onCloseOnce) !== null && _c !== void 0 ? _c : (() => { });\n        if (!isAlreadyOpen) {\n            this._initEventListeners();\n            this._modalContainerElement.classList.add('modal_active');\n            document.body.classList.add('page_overflow-hidden');\n            this._isOpen = true;\n            this._openCallback();\n        }\n    }\n    _initEventListeners() {\n        this._modalCloseElement.addEventListener('click', this._manualClose);\n        this._modalContainerElement.addEventListener('pointerdown', this._onPointerDown);\n        this._modalContainerElement.addEventListener('pointerup', this._onPointerUp);\n        this._modalContainerElement.addEventListener('click', this._closeByOverlay);\n        window.addEventListener('keydown', this._closeByEsc);\n    }\n    _destroyEventListeners() {\n        this._modalCloseElement.removeEventListener('click', this._manualClose);\n        this._modalContainerElement.removeEventListener('pointerdown', this._onPointerDown);\n        this._modalContainerElement.removeEventListener('pointerup', this._onPointerUp);\n        this._modalContainerElement.removeEventListener('click', this._closeByOverlay);\n        window.removeEventListener('keydown', this._closeByEsc);\n    }\n}\n","import { EventNames } from \"../../../types\";\nimport { CachedComponent } from \"./base/cached.component\";\nexport class PaymentAddressOrderComponent extends CachedComponent {\n    constructor(_orderService, _statefulEventEmitterService, _modalService) {\n        super(document.querySelector('#order'));\n        this._orderService = _orderService;\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._modalService = _modalService;\n    }\n    _initCachedData() {\n        return {\n            btnOnline: this._cachedElement.querySelector('[name=\"card\"]'),\n            btnOffline: this._cachedElement.querySelector('[name=\"cash\"]'),\n            inputAddress: this._cachedElement.querySelector('[name=\"address\"]'),\n            submitBtn: this._cachedElement.querySelector('.order__button'),\n            errors: this._cachedElement.querySelector('.form__errors'),\n            form: this._cachedElement\n        };\n    }\n    _afterInit() {\n        const { btnOnline, btnOffline, inputAddress, submitBtn, errors, form } = this._cachedData;\n        this._setPaymentMethod('online', btnOnline, btnOffline);\n        btnOnline.addEventListener('click', () => {\n            this._setPaymentMethod('online', btnOnline, btnOffline);\n        });\n        btnOffline.addEventListener('click', () => {\n            this._setPaymentMethod('offline', btnOnline, btnOffline);\n        });\n        inputAddress.addEventListener('input', () => {\n            this._orderService.setAddress(inputAddress.value);\n        });\n        this._orderService.onFormStateChange(['address'], (state) => {\n            var _a;\n            errors.textContent = (_a = state.errors.address) !== null && _a !== void 0 ? _a : '';\n            submitBtn.disabled = !state.isValid;\n        });\n        form.addEventListener('submit', (event) => {\n            event.preventDefault();\n            this._statefulEventEmitterService.emit(EventNames.OPEN_ORDER_EMAIL_PHONE);\n        });\n        // при закрытии модалки ручном (крестик, ESC) сбрасываем состояние заказа\n        this._modalService.onCloseOnce(this, () => {\n            this._orderService.clear();\n        });\n    }\n    _setPaymentMethod(currentMethod, btnOnline, btnOffline) {\n        this._orderService.setPaymentMethod(currentMethod);\n        this._updatePaymentButtonStyles(currentMethod, btnOnline, btnOffline);\n    }\n    _updatePaymentButtonStyles(method, btnOnline, btnOffline) {\n        btnOnline.classList.toggle('button_alt-active', method === 'online');\n        btnOffline.classList.toggle('button_alt-active', method === 'offline');\n    }\n    _update() {\n        const { btnOnline, btnOffline, submitBtn, inputAddress, errors } = this._cachedData;\n        this._setPaymentMethod('online', btnOnline, btnOffline);\n        inputAddress.value = '';\n        submitBtn.disabled = true;\n        errors.textContent = '';\n    }\n}\n","import { CachedComponent } from \"./base/cached.component\";\nexport class SuccessOrderComponent extends CachedComponent {\n    constructor(_modalService) {\n        super(document.querySelector('#success'));\n        this._modalService = _modalService;\n    }\n    _initCachedData() {\n        return {\n            successOrderElement: this._cachedElement,\n            descriptionElement: this._cachedElement.querySelector('.order-success__description'),\n            successBtnElement: this._cachedElement.querySelector('.order-success__close')\n        };\n    }\n    _afterInit() {\n        const { successBtnElement } = this._cachedData;\n        successBtnElement.addEventListener('click', () => {\n            this._modalService.close(this);\n        });\n    }\n    _update(res) {\n        const { descriptionElement } = this._cachedData;\n        descriptionElement.textContent = `Списано ${res.total} синапсов`;\n    }\n}\n","export class GalleryController {\n    constructor(_cardCatalogComponent) {\n        this._cardCatalogComponent = _cardCatalogComponent;\n        this._galleryElement = document.querySelector('.gallery');\n    }\n    renderProductList(products) {\n        this._galleryElement.innerHTML = '';\n        for (const product of products) {\n            const cardElement = this._cardCatalogComponent.render(product);\n            this._galleryElement.append(cardElement);\n        }\n    }\n}\n","import { EventNames } from \"../../../types\";\nexport class BasketHeaderController {\n    constructor(_statefulEventEmitterService) {\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._headerBasketElement = document.querySelector('.header__basket');\n        this._counterElement = this._headerBasketElement.querySelector('.header__basket-counter');\n        this._initEventListeners();\n    }\n    setQuantityProductsInBasket(quantity) {\n        this._counterElement.textContent = String(quantity);\n    }\n    _initEventListeners() {\n        this._headerBasketElement.addEventListener('click', (event) => {\n            this._statefulEventEmitterService.emit(EventNames.OPEN_CART);\n        });\n    }\n}\n","import { AppController } from \"../../../app.controller\";\nimport { ApiOrderService } from \"../../../services/api-order.service\";\nimport { ApiProductsService } from \"../../../services/api-products.service\";\nimport { BasketService } from \"../../../services/basket.service\";\nimport { ComponentRegistryService } from \"../../../services/component-registry.service\";\nimport { ModalService } from \"../../../services/modal.service\";\nimport { OrderService } from \"../../../services/order.service\";\nimport { ProductsService } from \"../../../services/products.service\";\nimport { StatefulEventEmitterService } from \"../../../services/stateful-event-emitter.service\";\nimport { ValidationOrderService } from \"../../../services/validation-order.service\";\nimport { BasketCardComponent } from \"../components/basket-card.component\";\nimport { BasketComponent } from \"../components/basket.component\";\nimport { CardCatalogComponent } from \"../components/card-catalog.component\";\nimport { CardFullComponent } from \"../components/card-full.component\";\nimport { EmailPhoneOrderComponent } from \"../components/email-phone-order.component\";\nimport { ModalComponent } from \"../components/base/modal.component\";\nimport { PaymentAddressOrderComponent } from \"../components/payment-address-order.component\";\nimport { SuccessOrderComponent } from \"../components/succes-order.component\";\nimport { container } from \"./di-container\";\nimport { GalleryController } from \"../controllers/gallery.controller\";\nimport { BasketHeaderController } from \"../controllers/basket-header.controller\";\n/**\n * Регистрирует все необходимые зависимости в глобальном DI контейнере.\n *\n * Выполняет регистрацию сервисов, компонентов и контроллеров с указанием их зависимостей,\n * что позволяет контейнеру управлять созданием экземпляров и их инъекцией.\n *\n * Используется для единой централизованной настройки всех классов приложения,\n * чтобы при запросе нужного класса контейнер мог автоматически разрешить\n * и передать все необходимые зависимости.\n */\nexport function registerDependencies() {\n    container.register(ComponentRegistryService);\n    container.register(ApiOrderService);\n    container.register(ApiProductsService);\n    container.register(StatefulEventEmitterService);\n    container.register(ValidationOrderService);\n    container.register(ModalComponent);\n    container.register(ModalService, { deps: [ModalComponent, ComponentRegistryService] });\n    container.register(CardCatalogComponent, { deps: [StatefulEventEmitterService] });\n    container.register(GalleryController, { deps: [CardCatalogComponent] });\n    container.register(BasketHeaderController, { deps: [StatefulEventEmitterService] });\n    container.register(BasketService, { deps: [StatefulEventEmitterService] });\n    container.register(CardFullComponent, { deps: [BasketService] });\n    container.register(BasketCardComponent, { deps: [BasketService] });\n    container.register(BasketComponent, { deps: [BasketService, BasketCardComponent, StatefulEventEmitterService] });\n    container.register(OrderService, { deps: [StatefulEventEmitterService, ValidationOrderService, ApiOrderService, BasketService] });\n    container.register(PaymentAddressOrderComponent, { deps: [OrderService, StatefulEventEmitterService, ModalService] });\n    container.register(EmailPhoneOrderComponent, { deps: [OrderService, ModalService, BasketService] });\n    container.register(SuccessOrderComponent, { deps: [ModalService] });\n    container.register(ProductsService, { deps: [ApiProductsService, StatefulEventEmitterService] });\n    container.register(AppController, {\n        deps: [\n            StatefulEventEmitterService,\n            ModalService,\n            GalleryController,\n            BasketHeaderController,\n            BasketService,\n            CardFullComponent,\n            BasketComponent,\n            PaymentAddressOrderComponent,\n            EmailPhoneOrderComponent,\n            SuccessOrderComponent,\n            ProductsService\n        ]\n    });\n}\n","import './scss/styles.scss';\nimport { AppController } from './app.controller';\nimport { registerDependencies } from './components/features/di/di-setup';\nimport { inject } from './components/features/di/di-inject';\n/**\n * Точка входа в приложение.\n *\n * Выполняет регистрацию всех зависимостей через функцию `registerDependencies`,\n * затем создаёт и инициализирует главный контроллер приложения `AppController`\n * с помощью DI-контейнера.\n *\n * Такой подход обеспечивает централизованное управление зависимостями\n * и структурированное начало работы приложения.\n */\nregisterDependencies();\nconst appController = inject(AppController);\nappController.init();\n"],"names":["EventNames","AppController","_statefulEventEmitterService","_modalService","_galleryController","_basketHeaderController","_basketService","_cardFullComponent","_basketComponent","_paymentAddressOrderComponent","_emailPhoneOrderComponent","_successOrderComponent","_productsService","_classCallCheck","this","_createClass","key","value","init","_loadProductsAndRender","_initCustomEventListeners","_this","getAll","products","renderProductList","_this2","on","OPEN_CARD_FULL","product","open","render","onBasket","setQuantityProductsInBasket","length","OPEN_CART","OPEN_ORDER_ADDRESS_PAYMENT","OPEN_ORDER_EMAIL_PHONE","OPEN_SUCCESS_ORDER","res","Api","baseUrl","_a","options","arguments","undefined","headers","Object","assign","get","uri","fetch","method","then","handleResponse","post","data","body","JSON","stringify","response","ok","json","Promise","reject","error","statusText","API_ORIGIN","API_URL","concat","CDN_URL","categoryCompareObj","ApiService","_Api","_inherits","_super","_createSuper","call","ApiOrderService","_ApiService","send","createOrderRequest","ApiProductsService","productsResponse","items","getById","id","BasketService","productsInBasket","getLast","BASKET","find","getPriceBasket","reduce","acc","price","add","item","emit","offAllByEventName","_toConsumableArray","remove","filteredProductsInBasket","filter","callback","offBasket","off","onBasketById","offBasketById","clear","isSelector","x","ensureElement","selectorElement","context","elements","ensureAllElements","document","Array","from","querySelectorAll","NodeList","isArray","Error","console","warn","pop","HTMLElement","getProductPriceText","getProductCategoryCssClass","category","categoryItem","getCdnImgUrl","img","ComponentRegistryService","_byInstance","WeakMap","_byElement","_listeners","Map","register","instance","element","_generateId","info","set","dataset","componentId","listeners","forEach","cb","getByInstance","getByElement","onRegisteredByInstance","has","Set","constructor","name","hashCode","obj","Math","random","toString","ModalService","_modalComponent","_componentRegistryService","_currentModal","_onCloseListeners","_pendingCloseListeners","_pendingCloseOnceListeners","content","renderArgs","_resolveElement","_handleModalClose","_invokeRegularCloseCallbacks","onceListeners","_collectPendingOnceListeners","regularListeners","_collectPendingRegularListeners","component","_isComponent","onClose","onOpen","onCloseOnce","close","target","setTimeout","_getElementIfOpen","_addPendingListener","_this3","regular","modal","args","apply","storage","OrderService","_validationOrderService","_apiOrderService","order","_getCurrentOrder","validate","isValid","updateEmail","email","_emitOrderUpdate","updatePhone","phone","setAddress","address","setPaymentMethod","payment","clearLast","ORDER_CHANGED","onFormStateChange","fields","hasChanged","handler","some","field","result","submit","map","p","total","err","alert","errors","partialOrder","currentOrder","newOrder","ProductsService","_apiProductsService","onDestroy","_update","_callback","PRODUCTS_CHANGED","StatefulEventEmitterService","_EventEmitter","_lastValues","eventName","_get","_getPrototypeOf","prototype","_events","EventEmitter","size","subscribers","RegExp","test","onAll","offAll","trigger","event","ValidationOrderService","_step","_iterator","_createForOfIteratorHelper","s","n","done","_validateField","e","f","keys","DI_INIT","Symbol","container","DIContainer","_registry","_singletons","DIProvider","_b","_c","useClass","deps","inject","expectedLength","scope","resolve","dependencies","dep","_construct","BaseComponent","template","_template","_cloneTemplate","cloneTemplate","query","firstElementChild","cloneNode","_registerElement","StatelessComponent","_BaseComponent","BasketCardComponent","_StatelessComponent","querySelector","_deleteProduct","index","basketCardElement","basketItemIndexElemet","basketItemTitleElement","basketItemPriceElement","basketItemDeleteBtnElement","textContent","title","addEventListener","CachedComponent","_cachedElement","_cachedData","_initCachedData","_isRegistered","_afterInit","BasketComponent","_CachedComponent","_basketCardComponent","listItemEmptyElement","createElement","basketList","basketListContent","classList","parentElement","insertBefore","appendChild","basketElement","priceElement","submitBtnElement","_this$_cachedData","renderAll","_renderActionsInfo","_appendBasketElements","i","priceBasket","disabled","CardCatalogComponent","_cardCatalogClick","cardCatalogElement","cardCategory","cardTitle","cardImg","cardPrice","alt","src","image","CardFullComponent","btn","className","_renderBtnText","isInBasket","EmailPhoneOrderComponent","_orderService","emailErrorEl","phoneErrorEl","formErrors","append","inputEmail","inputPhone","submitButton","state","innerHTML","preventDefault","_clearElements","ModalComponent","_openCallback","_closeCallback","_closeOnceCallback","_isOpen","_pointerDownInsideModal","_pointerUpInsideModal","_isProgrammaticClose","_modalContainerElement","_destroyEventListeners","_manualClose","_onPointerDown","_modalContentElement","contains","_onPointerUp","_closeByOverlay","_closeByEsc","_modalCloseElement","isAlreadyOpen","_initEventListeners","window","removeEventListener","PaymentAddressOrderComponent","btnOnline","btnOffline","inputAddress","submitBtn","form","_setPaymentMethod","currentMethod","_updatePaymentButtonStyles","toggle","_this$_cachedData2","SuccessOrderComponent","successOrderElement","descriptionElement","successBtnElement","GalleryController","_cardCatalogComponent","_galleryElement","cardElement","BasketHeaderController","_headerBasketElement","_counterElement","quantity","String","registerDependencies"],"sourceRoot":""}
{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/types/index.ts","webpack://my-webpack-project/./src/app.controller.ts","webpack://my-webpack-project/./src/components/features/di/di-symbols.ts","webpack://my-webpack-project/./src/components/features/di/di-container.ts","webpack://my-webpack-project/./src/components/base/api.ts","webpack://my-webpack-project/./src/utils/constants.ts","webpack://my-webpack-project/./src/services/api.service.ts","webpack://my-webpack-project/./src/services/api-order.service.ts","webpack://my-webpack-project/./src/services/api-products.service.ts","webpack://my-webpack-project/./src/services/basket.service.ts","webpack://my-webpack-project/./src/services/modal.service.ts","webpack://my-webpack-project/./src/services/order.service.ts","webpack://my-webpack-project/./src/services/products.service.ts","webpack://my-webpack-project/./src/services/stateful-event-emitter.service.ts","webpack://my-webpack-project/./src/components/base/events.ts","webpack://my-webpack-project/./src/services/validation-order.service.ts","webpack://my-webpack-project/./src/utils/utils.ts","webpack://my-webpack-project/./src/components/features/base/base.component.ts","webpack://my-webpack-project/./src/components/features/base/stateless.component.ts","webpack://my-webpack-project/./src/components/features/basket-card.component.ts","webpack://my-webpack-project/./src/components/features/basket-header.component.ts","webpack://my-webpack-project/./src/components/features/base/cached.component.ts","webpack://my-webpack-project/./src/components/features/basket.component.ts","webpack://my-webpack-project/./src/components/features/card-catalog.component.ts","webpack://my-webpack-project/./src/components/features/card-full.component.ts","webpack://my-webpack-project/./src/components/features/email-phone-order.component.ts","webpack://my-webpack-project/./src/components/features/gallery.component.ts","webpack://my-webpack-project/./src/components/features/modal.component.ts","webpack://my-webpack-project/./src/components/features/payment-address-order.component.ts","webpack://my-webpack-project/./src/components/features/succes-order.component.ts","webpack://my-webpack-project/./src/components/features/di/di-setup.ts","webpack://my-webpack-project/./src/index.ts"],"sourcesContent":["export var EventNames;\n(function (EventNames) {\n    EventNames[\"OPEN_CARD_FULL\"] = \"open-card-full\";\n    EventNames[\"BASKET\"] = \"basket\";\n    EventNames[\"OPEN_CART\"] = \"open-cart\";\n    EventNames[\"ORDER\"] = \"order\";\n    EventNames[\"OPEN_ORDER_ADDRESS_PAYMENT\"] = \"open-order-address-payment\";\n    EventNames[\"OPEN_ORDER_EMAIL_PHONE\"] = \"open-order-email-phone\";\n    EventNames[\"OPEN_SUCCESS_ORDER\"] = \"open-success-order\";\n    EventNames[\"EMAIL_INPUT\"] = \"email-input\";\n    EventNames[\"PHONE_INPUT\"] = \"phone-input\";\n    EventNames[\"ORDER_SUBMIT\"] = \"order-submit\";\n    EventNames[\"ORDER_CLEAR\"] = \"order-clear\";\n    EventNames[\"ORDER_CHANGED\"] = \"order-changed\";\n    EventNames[\"PRODUCTS_CHANGED\"] = \"products-changed\";\n})(EventNames || (EventNames = {}));\n","import { EventNames } from \"./types\";\n/**\n * Главный контроллер приложения, отвечающий за инициализацию и\n * координацию взаимодействия между сервисами, компонентами и модальными окнами.\n *\n * Основные обязанности:\n * - Загрузка списка продуктов и передача их в галерею для отображения.\n * - Подписка на кастомные события приложения для открытия соответствующих модальных окон.\n * - Обновление информации о корзине в шапке при изменениях.\n *\n * Этот класс служит точкой входа для запуска логики приложения\n * и организации реактивного взаимодействия между слоями.\n */\nexport class AppController {\n    constructor(_statefulEventEmitterService, _modalService, _galleryComponent, _basketHeaderComponent, _basketService, _cardFullComponent, _basketComponent, _paymentAddressOrderComponent, _emailPhoneOrderComponent, _successOrderComponent, _productsService) {\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._modalService = _modalService;\n        this._galleryComponent = _galleryComponent;\n        this._basketHeaderComponent = _basketHeaderComponent;\n        this._basketService = _basketService;\n        this._cardFullComponent = _cardFullComponent;\n        this._basketComponent = _basketComponent;\n        this._paymentAddressOrderComponent = _paymentAddressOrderComponent;\n        this._emailPhoneOrderComponent = _emailPhoneOrderComponent;\n        this._successOrderComponent = _successOrderComponent;\n        this._productsService = _productsService;\n    }\n    /**\n     * Инициализирует приложение:\n     * - загружает продукты и отображает их в галерее;\n     * - устанавливает обработчики кастомных событий для управления модальными окнами и корзиной.\n     */\n    init() {\n        this._loadProductsAndRender();\n        this._initCustomEventListeners();\n    }\n    /**\n     * Загружает список продуктов через сервис-адаптер `ProductsService` и передаёт их в компонент галереи.\n     * Продукты реактивно передаются из модели (`StatefulEventEmitterService`), которая обновляется адаптером.\n     * Представление получает данные через адаптер, не взаимодействуя напрямую с API или моделью\n     */\n    _loadProductsAndRender() {\n        this._productsService.getAll((products) => {\n            this._galleryComponent.renderProductList(products);\n        });\n    }\n    /**\n     * Инициализирует подписки на кастомные события приложения.\n     * Обрабатывает открытие различных модальных окон и обновление корзины.\n     * @private\n     */\n    _initCustomEventListeners() {\n        this._statefulEventEmitterService.on(EventNames.OPEN_CARD_FULL, (product) => {\n            this._modalService.open(this._cardFullComponent.render(product));\n        });\n        this._basketService.onBasket(products => {\n            this._basketHeaderComponent.setQuantityProductsInBasket(products.length);\n        });\n        this._statefulEventEmitterService.on(EventNames.OPEN_CART, () => {\n            this._modalService.open(this._basketComponent);\n        });\n        this._statefulEventEmitterService.on(EventNames.OPEN_ORDER_ADDRESS_PAYMENT, () => {\n            this._modalService.open(this._paymentAddressOrderComponent);\n        });\n        this._statefulEventEmitterService.on(EventNames.OPEN_ORDER_EMAIL_PHONE, () => {\n            this._modalService.open(this._emailPhoneOrderComponent);\n        });\n        this._statefulEventEmitterService.on(EventNames.OPEN_SUCCESS_ORDER, (res) => {\n            this._modalService.open(this._successOrderComponent.render(res));\n        });\n    }\n}\n","export const DI_INIT = Symbol('di_init');\n","import { DI_INIT } from \"./di-symbols\";\n/**\n * Контейнер для управления зависимостями (DI) с поддержкой синглтонов и transient-сервисов.\n */\nclass DIContainer {\n    constructor() {\n        /** Реестр зарегистрированных провайдеров */\n        this._registry = new Map();\n        /** Хранилище синглтон-экземпляров */\n        this._singletons = new Map();\n    }\n    /**\n     * Регистрирует провайдера для класса.\n     * @template T Тип создаваемого экземпляра.\n     * @param key Конструктор класса, который регистрируется.\n     * @param DIProvider Параметры провайдера (класс, зависимости, область).\n     * @throws Ошибка, если количество зависимостей не совпадает с количеством параметров конструктора.\n     */\n    register(key, DIProvider) {\n        var _a, _b, _c;\n        const name = key.name;\n        const useClass = (DIProvider === null || DIProvider === void 0 ? void 0 : DIProvider.useClass) || key;\n        const deps = (_b = (_a = DIProvider === null || DIProvider === void 0 ? void 0 : DIProvider.deps) !== null && _a !== void 0 ? _a : useClass.inject) !== null && _b !== void 0 ? _b : [];\n        // Проверка соответствия количества параметров\n        const expectedLength = useClass.length;\n        if (expectedLength !== deps.length) {\n            throw new Error(`Invalid registration for '${name}': DIConstructor expects ${expectedLength} dependencies, but got ${deps.length}`);\n        }\n        this._registry.set(name, {\n            useClass,\n            deps,\n            scope: (_c = DIProvider === null || DIProvider === void 0 ? void 0 : DIProvider.scope) !== null && _c !== void 0 ? _c : 'singleton',\n        });\n    }\n    /**\n     * Разрешает (создаёт) экземпляр зависимости по имени или конструктору.\n     * Для синглтонов возвращает один и тот же экземпляр, для transient — новый.\n     * @template T Тип создаваемого экземпляра.\n     * @param key Имя класса или сам конструктор.\n     * @returns Экземпляр запрошенной зависимости.\n     * @throws Ошибка, если зависимость не зарегистрирована.\n     */\n    resolve(key) {\n        const name = typeof key === 'string' ? key : key.name;\n        const DIProvider = this._registry.get(name);\n        if (!DIProvider) {\n            throw new Error(`Dependency '${name}' is not registered.`);\n        }\n        if (DIProvider.scope !== 'transient' && this._singletons.has(name)) {\n            return this._singletons.get(name);\n        }\n        const dependencies = (DIProvider.deps || []).map(dep => this.resolve(dep));\n        const instance = new DIProvider.useClass(...dependencies);\n        // только контейнер знает про этот Symbol\n        if (typeof instance[DI_INIT] === 'function') {\n            instance[DI_INIT]();\n        }\n        if (DIProvider.scope !== 'transient') {\n            this._singletons.set(name, instance);\n        }\n        return instance;\n    }\n}\n/** Глобальный контейнер зависимостей */\nexport const container = new DIContainer();\n","export class Api {\n    constructor(baseUrl, options = {}) {\n        var _a;\n        this.baseUrl = baseUrl;\n        this.options = {\n            headers: Object.assign({ 'Content-Type': 'application/json' }, ((_a = options.headers) !== null && _a !== void 0 ? _a : {}))\n        };\n    }\n    get(uri) {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { method: 'GET' })).then((this.handleResponse));\n    }\n    post(uri, data, method = 'POST') {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { method, body: JSON.stringify(data) })).then((this.handleResponse));\n    }\n    handleResponse(response) {\n        if (response.ok)\n            return response.json();\n        else\n            return response.json()\n                .then(data => { var _a; return Promise.reject((_a = data.error) !== null && _a !== void 0 ? _a : response.statusText); });\n    }\n}\n","const API_ORIGIN = process.env.API_ORIGIN || 'https://larek-api.nomoreparties.com';\nexport const API_URL = `${API_ORIGIN}/api/weblarek`;\nexport const CDN_URL = `${API_ORIGIN}/content/weblarek`;\nexport const settings = {};\nexport const categoryCompareObj = {\n    'софт-скил': 'soft',\n    'дополнительное': 'additional',\n    'другое': 'other',\n    'кнопка': 'button',\n    'хард-скил': 'hard'\n};\n","import { Api } from \"../components/base/api\";\nimport { API_URL } from \"../utils/constants\";\n/**\n * Класс ApiService — конкретная реализация Api с фиксированным базовым URL.\n * Используется для взаимодействия с серверным API приложения.\n */\nexport class ApiService extends Api {\n    constructor() {\n        super(API_URL);\n    }\n}\n","import { ApiService } from \"./api.service\";\n/**\n * Сервис для работы с заказами через API.\n * Расширяет базовый ApiService, реализует метод отправки заказа.\n */\nexport class ApiOrderService extends ApiService {\n    constructor() {\n        super();\n    }\n    /**\n     * Отправить заказ на сервер.\n     * Выполняет POST-запрос по эндпоинту '/order' с данными заказа.\n     *\n     * @param createOrderRequest Объект с данными для создания заказа.\n     * @returns Промис, который разрешается ответом сервера с информацией о созданном заказе.\n     */\n    send(createOrderRequest) {\n        return this.post('/order', createOrderRequest);\n    }\n}\n","import { ApiService } from \"./api.service\";\n/**\n * Сервис для работы с продуктами через API.\n * Расширяет базовый ApiService, реализует методы получения списка продуктов и продукта по ID.\n */\nexport class ApiProductsService extends ApiService {\n    constructor() {\n        super();\n    }\n    /**\n     * Получить список всех продуктов.\n     * Выполняет GET-запрос по эндпоинту '/product' и возвращает массив продуктов.\n     *\n     * @returns Промис, который разрешается массивом продуктов.\n     */\n    getAll() {\n        return this.get('/product').then(productsResponse => productsResponse.items);\n    }\n    /**\n     * Получить продукт по его ID.\n     * Выполняет GET-запрос по эндпоинту '/product/{id}'.\n     *\n     * @param id Идентификатор продукта.\n     * @returns Промис, который разрешается объектом продукта.\n     */\n    getById(id) {\n        return this.get(`/product/${id}`);\n    }\n}\n","import { EventNames } from \"../types\";\n/**\n * Сервис корзины (BasketService) управляет списком товаров в корзине.\n * Все операции обновления и получения данных корзины выполняются\n * через StatefulEventEmitterService и события.\n */\nexport class BasketService {\n    constructor(_statefulEventEmitterService) {\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n    }\n    /**\n     * Получить все товары в корзине.\n     * Возвращает пустой массив, если корзина пуста.\n     * @returns {Product[]} Массив товаров в корзине.\n     */\n    getAll() {\n        const productsInBasket = this._statefulEventEmitterService.getLast(EventNames.BASKET);\n        if (productsInBasket === undefined) {\n            return [];\n        }\n        return productsInBasket;\n    }\n    /**\n     * Получить товар из корзины по его ID.\n     * @param {string} id Идентификатор товара.\n     * @returns {Product | undefined} Найденный товар или undefined, если не найден.\n     */\n    getById(id) {\n        const productsInBasket = this.getAll();\n        const product = productsInBasket.find(product => product.id === id);\n        return product;\n    }\n    /**\n     * Получить общую стоимость товаров в корзине.\n     * Суммирует поле price у всех товаров, учитывая, что цена может отсутствовать.\n     * @returns {number} Общая стоимость корзины.\n     */\n    getPriceBasket() {\n        const productsInBasket = this.getAll();\n        const price = productsInBasket.reduce((acc, product) => acc + (product.price || 0), 0);\n        return price;\n    }\n    /**\n     * Добавить товар в корзину.\n     * Если товар уже есть, добавление игнорируется.\n     * После добавления эмитит событие с обновлённым списком товаров,\n     * а также специальное событие добавления по ID товара.\n     * @param {Product} product Добавляемый товар.\n     */\n    add(product) {\n        const productsInBasket = this.getAll();\n        if (productsInBasket.find((item) => item.id === product.id)) {\n            return;\n        }\n        this._statefulEventEmitterService.emit(`add-card-to-basket-${product.id}`, product);\n        this._statefulEventEmitterService.offAllByEventName(`remove-card-to-basket-${product.id}`);\n        this._statefulEventEmitterService.emit(EventNames.BASKET, [...productsInBasket, product]);\n    }\n    /**\n     * Удалить товар из корзины.\n     * После удаления эмитит событие с обновлённым списком товаров,\n     * а также специальное событие удаления по ID товара.\n     * @param {Product} product Удаляемый товар.\n     */\n    remove(product) {\n        const productsInBasket = this.getAll();\n        const filteredProductsInBasket = productsInBasket.filter(item => item.id !== product.id);\n        this._statefulEventEmitterService.offAllByEventName(`add-card-to-basket-${product.id}`);\n        this._statefulEventEmitterService.emit(`remove-card-to-basket-${product.id}`, product);\n        this._statefulEventEmitterService.emit(EventNames.BASKET, filteredProductsInBasket);\n    }\n    /**\n     * Подписаться на обновления корзины.\n     * Вызывается при каждом изменении списка товаров.\n     * @param {(products: Product[]) => void} callback Коллбек с массивом товаров.\n     */\n    onBasket(callback) {\n        this._statefulEventEmitterService.on(EventNames.BASKET, callback);\n    }\n    /**\n     * Отписаться от обновлений корзины.\n     * @param {(products: Product[]) => void} callback Ранее добавленный обработчик.\n     */\n    offBasket(callback) {\n        this._statefulEventEmitterService.off(EventNames.BASKET, callback);\n    }\n    /**\n     * Подписаться на добавление конкретного товара по ID.\n     * Вызывается при добавлении этого товара в корзину.\n     * @param {string} id ID товара.\n     * @param {(product: Product) => void} callback Коллбек с товаром.\n     */\n    onBasketById(id, callback) {\n        this._statefulEventEmitterService.on(`add-card-to-basket-${id}`, callback);\n    }\n    /**\n     * Отписаться от событий добавления конкретного товара по ID.\n     * Удаляет все обработчики для события добавления товара с данным ID.\n     * @param {string} id ID товара.\n     */\n    offBasketById(id) {\n        this._statefulEventEmitterService.offAllByEventName(`add-card-to-basket-${id}`);\n    }\n    /**\n     * Очистить корзину — удалить все товары.\n     * Эмитит событие с пустым списком.\n     */\n    clear() {\n        this._statefulEventEmitterService.emit(EventNames.BASKET, []);\n    }\n}\n","/**\n * Сервис для управления модальными окнами.\n *\n * Отвечает за открытие и закрытие модалок, подписку на события закрытия,\n * а также за реактивное поведение — позволяет отслеживать как обычные события закрытия,\n * так и закрытие компонента только в случае, если он был перезаписан (onCloseOnce).\n *\n * Обеспечивает единый способ управления модальными окнами, изолируя логику отображения от логики управления.\n */\nexport class ModalService {\n    constructor(_modalComponent) {\n        this._modalComponent = _modalComponent;\n        this._currentModal = null;\n        this._onCloseListeners = new Map();\n        this._onCloseOnceListeners = new Map();\n    }\n    open(content, renderArgs, options) {\n        var _a;\n        console.log('open', this);\n        const element = this._resolveElement(content, renderArgs);\n        console.log(this._isComponent(content));\n        if (this._isComponent(content)) {\n            content.__modalElement = element;\n        }\n        if (this._currentModal && this._currentModal.element !== element) {\n            this._modalComponent.close();\n            this._currentModal = null;\n        }\n        if (((_a = this._currentModal) === null || _a === void 0 ? void 0 : _a.element) === element)\n            return;\n        const modal = {\n            element,\n            component: this._isComponent(content) ? content : undefined,\n            onClose: options === null || options === void 0 ? void 0 : options.onClose,\n        };\n        this._currentModal = modal;\n        this._modalComponent.open(element, {\n            onOpen: options === null || options === void 0 ? void 0 : options.onOpen,\n            onClose: () => {\n                var _a;\n                this._invokeAllCloseCallbacks(element);\n                this._handleModalClose(modal);\n                if (((_a = this._currentModal) === null || _a === void 0 ? void 0 : _a.element) === element) {\n                    this._currentModal = null;\n                }\n            }\n        });\n    }\n    close(content) {\n        console.log('close', this);\n        if (!this._currentModal)\n            return;\n        let elementToClose;\n        if (this._isComponent(content)) {\n            const maybeRendered = content.__modalElement;\n            if (!maybeRendered) {\n                console.warn('[ModalService] Cannot close modal: component was not opened via ModalService');\n                return;\n            }\n            elementToClose = maybeRendered;\n        }\n        else {\n            elementToClose = content;\n        }\n        if (this._currentModal.element !== elementToClose) {\n            console.warn('[ModalService] Tried to close modal with element that is not currently open.');\n            return;\n        }\n        this._modalComponent.close();\n    }\n    onClose(target, callback) {\n        setTimeout(() => this._onClose(target, callback), 0);\n    }\n    _onClose(content, callback) {\n        let element;\n        console.log('onClose', this);\n        if (this._isComponent(content)) {\n            const maybeRendered = content.__modalElement;\n            if (!maybeRendered) {\n                console.warn('[ModalService] Cannot register onClose: component was not rendered via open()');\n                return;\n            }\n            element = maybeRendered;\n        }\n        else {\n            element = content;\n        }\n        if (!this._onCloseListeners.has(element)) {\n            this._onCloseListeners.set(element, new Set());\n        }\n        this._onCloseListeners.get(element).add(callback);\n    }\n    onCloseOnce(target, callback) {\n        setTimeout(() => this._onCloseOnce(target, callback), 0);\n    }\n    _onCloseOnce(content, callback) {\n        let element;\n        if (this._isComponent(content)) {\n            const maybeRendered = content.__modalElement;\n            if (!maybeRendered) {\n                console.warn('[ModalService] Cannot register onCloseOnce: component was not rendered via open()');\n                return;\n            }\n            element = maybeRendered;\n        }\n        else {\n            element = content;\n        }\n        if (!this._onCloseOnceListeners.has(element)) {\n            this._onCloseOnceListeners.set(element, new Set());\n        }\n        this._onCloseOnceListeners.get(element).add(callback);\n    }\n    _invokeAllCloseCallbacks(element) {\n        const callbacks = this._onCloseListeners.get(element);\n        if (callbacks) {\n            for (const cb of callbacks) {\n                try {\n                    cb();\n                }\n                catch (err) {\n                    console.error('ModalService onClose error:', err);\n                }\n            }\n            this._onCloseListeners.delete(element);\n        }\n        if (!this._currentModal || this._currentModal.element !== element) {\n            const onceCallbacks = this._onCloseOnceListeners.get(element);\n            if (onceCallbacks) {\n                for (const cb of onceCallbacks) {\n                    try {\n                        cb();\n                    }\n                    catch (err) {\n                        console.error('ModalService onCloseOnce error:', err);\n                    }\n                }\n                this._onCloseOnceListeners.delete(element);\n            }\n        }\n    }\n    _handleModalClose(modal) {\n        var _a;\n        (_a = modal.onClose) === null || _a === void 0 ? void 0 : _a.call(modal);\n    }\n    _resolveElement(content, renderArgs) {\n        if (this._isComponent(content)) {\n            if (Array.isArray(renderArgs)) {\n                return content.render(...renderArgs);\n            }\n            else if (renderArgs !== undefined) {\n                return content.render(renderArgs);\n            }\n            else {\n                return content.render();\n            }\n        }\n        else {\n            return content;\n        }\n    }\n    _isComponent(obj) {\n        return typeof obj === 'object' && typeof obj.render === 'function';\n    }\n}\n","import { EventNames } from \"../types\";\n/**\n * Сервис заказа (OrderService) реализует логику работы с заказом.\n * Взаимодействует со слоями через StatefulEventEmitterService,\n * используя пользовательские события.\n */\nexport class OrderService {\n    constructor(_statefulEventEmitterService, _validationOrderService, _apiOrderService, _basketService) {\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._validationOrderService = _validationOrderService;\n        this._apiOrderService = _apiOrderService;\n        this._basketService = _basketService;\n    }\n    /**\n     * Обновить email в заказе.\n     * @param {string} email Email пользователя.\n     */\n    updateEmail(email) {\n        this._emitOrderUpdate({ email });\n    }\n    /**\n     * Обновить телефон в заказе.\n     * @param {string} phone Телефон пользователя.\n     */\n    updatePhone(phone) {\n        this._emitOrderUpdate({ phone });\n    }\n    /**\n     * Установить адрес доставки.\n     * @param {string} address Адрес.\n     */\n    setAddress(address) {\n        this._emitOrderUpdate({ address });\n    }\n    /**\n     * Установить способ оплаты.\n     * @param {Payment} payment Объект оплаты.\n     */\n    setPaymentMethod(payment) {\n        this._emitOrderUpdate({ payment });\n    }\n    /**\n     * Очистить текущее состояние заказа.\n     */\n    clear() {\n        this._statefulEventEmitterService.clearLast(EventNames.ORDER_CHANGED);\n    }\n    /**\n     * Подписаться на изменение состояния формы.\n     * Вызывается при каждом изменении заказа,\n     * валидирует указанные поля и возвращает результат.\n     * @param {(keyof Order)[]} fields Массив ключей полей для валидации.\n     * @param {(state: {isValid: boolean, errors: Partial<Record<keyof Order, string>>}) => void} callback Коллбек с результатом валидации.\n     * @returns {() => void} Функция для отписки.\n     */\n    onFormStateChange(fields, callback) {\n        let hasChanged = false;\n        const handler = (order) => {\n            // Не вызываем ничего, пока не было первых данных\n            const hasAnyField = fields.some((field) => order[field] !== undefined && order[field] !== '');\n            if (!hasAnyField && !hasChanged)\n                return;\n            hasChanged = true;\n            const result = this._validationOrderService.validate(order, fields);\n            callback(result);\n        };\n        this._statefulEventEmitterService.on(EventNames.ORDER_CHANGED, handler);\n        return () => {\n            this._statefulEventEmitterService.off(EventNames.ORDER_CHANGED, handler);\n        };\n    }\n    /**\n     * Отправить заказ.\n     * Валидирует обязательные поля,\n     * если ошибки — выводит alert, иначе отправляет данные через ApiOrderService.\n     */\n    submit() {\n        const order = Object.assign({}, this._getCurrentOrder());\n        order.items = this._basketService.getAll().map(p => p.id);\n        order.total = this._basketService.getPriceBasket();\n        const validation = this._validationOrderService.validate(order, [\n            'email',\n            'phone',\n            'address'\n        ]);\n        if (!validation.isValid) {\n            alert('Форма содержит ошибки');\n            console.warn('Ошибки при сабмите:', validation.errors);\n            return;\n        }\n        this._apiOrderService.send(order)\n            .then((res) => {\n            this._statefulEventEmitterService.emit(EventNames.OPEN_SUCCESS_ORDER, res);\n        })\n            .catch(err => {\n            console.error(err);\n            alert('Ошибка при отправке заказа');\n        });\n    }\n    /**\n     * Приватный метод — эмитит обновление заказа,\n     * объединяя частичные данные с текущим состоянием.\n     * @param {Partial<Order>} partialOrder Частичные данные заказа.\n     * @private\n     */\n    _emitOrderUpdate(partialOrder) {\n        const currentOrder = this._getCurrentOrder();\n        const newOrder = Object.assign(Object.assign({}, currentOrder), partialOrder);\n        this._statefulEventEmitterService.emit(EventNames.ORDER_CHANGED, newOrder);\n    }\n    /**\n     * Получить текущее состояние заказа из последнего события.\n     * @returns {Partial<Order>} Текущий заказ.\n     * @private\n     */\n    _getCurrentOrder() {\n        var _a;\n        return (_a = this._statefulEventEmitterService.getLast(EventNames.ORDER_CHANGED)) !== null && _a !== void 0 ? _a : {};\n    }\n}\n","import { EventNames } from \"../types\";\n/**\n * Сервис модели для работы с продуктами.\n *\n * Основные обязанности:\n * - Загружает данные о продуктах с API.\n * - Хранит последнее состояние полученных данных.\n * - Рассылает изменения подписчикам через событийную шину (`StatefulEventEmitterService`).\n * - Позволяет реактивно или лениво подписаться на данные с возможностью отмены ожидания.\n *\n * Архитектурная роль:\n * - Является моделью данных для продуктов в терминах паттерна MV*.\n * - Представление (например, компонент галереи) не взаимодействует напрямую с API,\n *   а обращается к сервису модели, получая данные через `getAll()`.\n * - Это обеспечивает разделение ответственности: данные загружаются и управляются здесь,\n *   а представление только подписывается или ждёт результат.\n *\n * Преимущества:\n * - Централизованное хранение и распространение состояния.\n * - Унифицированный интерфейс подписки и отписки.\n * - Готов к расширению: можно добавить фильтрацию, кеширование, ошибки и т. д.\n */\nexport class ProductsService {\n    constructor(_apiProductsService, _statefulEventEmitterService) {\n        this._apiProductsService = _apiProductsService;\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n    }\n    /**\n     * Загружает список продуктов с API, эмитит событие об обновлении продуктов и подписывается на изменения.\n     *\n     * @param callback Функция, которая вызывается при каждом обновлении списка продуктов.\n     * @param onDestroy Опциональная функция, принимающая колбэк для отписки от события.\n     *                  Колбэк нужно вызвать, чтобы прекратить подписку (например, при размонтировании компонента).\n     */\n    getAll(callback, onDestroy) {\n        this._apiProductsService.getAll()\n            .then(products => {\n            // Сразу эмитируем полученные продукты\n            this._update(products);\n            const _callback = (products) => {\n                callback(products);\n            };\n            // Подписываемся на обновления через callback\n            this._statefulEventEmitterService.on(EventNames.PRODUCTS_CHANGED, _callback);\n            // Позволяем внешнему коду отписаться при необходимости\n            if (onDestroy) {\n                onDestroy(() => {\n                    this._statefulEventEmitterService.off(EventNames.PRODUCTS_CHANGED, _callback);\n                });\n            }\n        })\n            .catch(error => {\n            console.error('Ошибка при попытке загрузить список товаров', error);\n        });\n    }\n    /**\n     * Эмитит событие об обновлении продуктов\n     * @param products Список продуктов\n     */\n    _update(products) {\n        this._statefulEventEmitterService.emit(EventNames.PRODUCTS_CHANGED, products);\n    }\n}\n","import { EventEmitter } from \"../components/base/events\";\n/**\n * StatefulEventEmitterService — расширение EventEmitter,\n * которое сохраняет последнее значение каждого события.\n * При подписке сразу вызывает обработчик с последним сохранённым значением.\n */\nexport class StatefulEventEmitterService extends EventEmitter {\n    constructor() {\n        super(...arguments);\n        this._lastValues = new Map();\n    }\n    /**\n     * Переопределение emit для сохранения последнего значения события.\n     * @param eventName Имя события.\n     * @param data Данные события.\n     */\n    emit(eventName, data) {\n        this._lastValues.set(eventName, data);\n        super.emit(eventName, data);\n    }\n    /**\n     * Переопределение on для вызова обработчика сразу с последним значением.\n     * @param eventName Имя события.\n     * @param callback Обработчик события.\n     */\n    on(eventName, callback) {\n        super.on(eventName, callback);\n        if (typeof eventName === 'string' && this._lastValues.has(eventName)) {\n            const lastValue = this._lastValues.get(eventName);\n            callback(lastValue);\n        }\n    }\n    /**\n     * Удалить всех подписчиков указанного события и сбросить последнее значение.\n     * @param eventName Имя события.\n     */\n    offAllByEventName(eventName) {\n        this._events.delete(eventName);\n        if (typeof eventName === 'string') {\n            this._lastValues.delete(eventName);\n        }\n    }\n    /**\n     * Получить последнее значение события.\n     * @param eventName Имя события.\n     * @returns Последние данные события, либо undefined.\n     */\n    getLast(eventName) {\n        return this._lastValues.get(eventName);\n    }\n    /**\n     * Очистить сохранённые значения события или всех событий.\n     * @param eventName Имя события, если нужно очистить конкретное.\n     */\n    clearLast(eventName) {\n        if (eventName) {\n            this._lastValues.delete(eventName);\n        }\n        else {\n            this._lastValues.clear();\n        }\n    }\n}\n","/**\n * Брокер событий, классическая реализация\n * В расширенных вариантах есть возможность подписаться на все события\n * или слушать события по шаблону например\n */\nexport class EventEmitter {\n    constructor() {\n        this._events = new Map();\n    }\n    /**\n     * Установить обработчик на событие\n     */\n    on(eventName, callback) {\n        var _a;\n        if (!this._events.has(eventName)) {\n            this._events.set(eventName, new Set());\n        }\n        (_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.add(callback);\n    }\n    /**\n     * Снять обработчик с события\n     */\n    off(eventName, callback) {\n        var _a;\n        if (this._events.has(eventName)) {\n            this._events.get(eventName).delete(callback);\n            if (((_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.size) === 0) {\n                this._events.delete(eventName);\n            }\n        }\n    }\n    /**\n     * Инициировать событие с данными\n     */\n    emit(eventName, data) {\n        this._events.forEach((subscribers, name) => {\n            if (name === '*')\n                subscribers.forEach(callback => callback({\n                    eventName,\n                    data\n                }));\n            if (name instanceof RegExp && name.test(eventName) || name === eventName) {\n                subscribers.forEach(callback => callback(data));\n            }\n        });\n    }\n    /**\n     * Слушать все события\n     */\n    onAll(callback) {\n        this.on(\"*\", callback);\n    }\n    /**\n     * Сбросить все обработчики\n     */\n    offAll() {\n        this._events = new Map();\n    }\n    /**\n     * Сделать коллбек триггер, генерирующий событие при вызове\n     */\n    trigger(eventName, context) {\n        return (event = {}) => {\n            this.emit(eventName, Object.assign(Object.assign({}, (event || {})), (context || {})));\n        };\n    }\n}\n","/**\n * Сервис валидации данных заказа.\n * Позволяет проверить указанные поля объекта заказа и вернуть ошибки.\n */\nexport class ValidationOrderService {\n    /**\n     * Проверяет валидность указанных полей заказа.\n     * Для каждого поля вызывает приватный метод проверки.\n     *\n     * @param order Объект с данными заказа (частичный).\n     * @param fields Массив ключей полей, которые нужно валидировать.\n     * @returns Объект с результатом валидации:\n     * - isValid — true, если ошибок нет.\n     * - errors — объект с сообщениями ошибок по каждому полю.\n     */\n    validate(order, fields) {\n        const errors = {};\n        for (const field of fields) {\n            const error = this._validateField(field, order[field]);\n            if (error)\n                errors[field] = error;\n        }\n        const isValid = Object.keys(errors).length === 0;\n        return { isValid, errors };\n    }\n    /**\n     * Приватный метод проверки конкретного поля заказа.\n     * Возвращает строку с ошибкой или null, если ошибок нет.\n     *\n     * @param field Имя поля.\n     * @param value Значение поля.\n     * @returns Сообщение об ошибке или null.\n     * @private\n     */\n    _validateField(field, value) {\n        switch (field) {\n            case 'email':\n                if (!value)\n                    return 'Необходимо указать email';\n                return null;\n            case 'phone':\n                if (!value)\n                    return 'Необходимо указать телефон';\n                return null;\n            case 'address':\n                if (!value)\n                    return 'Необходимо указать адрес';\n                return null;\n            default:\n                return null;\n        }\n    }\n}\n","import { categoryCompareObj, CDN_URL } from \"./constants\";\nexport function pascalToKebab(value) {\n    return value.replace(/([a-z0–9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nexport function isSelector(x) {\n    return (typeof x === \"string\") && x.length > 1;\n}\nexport function isEmpty(value) {\n    return value === null || value === undefined;\n}\nexport function ensureAllElements(selectorElement, context = document) {\n    if (isSelector(selectorElement)) {\n        return Array.from(context.querySelectorAll(selectorElement));\n    }\n    if (selectorElement instanceof NodeList) {\n        return Array.from(selectorElement);\n    }\n    if (Array.isArray(selectorElement)) {\n        return selectorElement;\n    }\n    throw new Error(`Unknown selector element`);\n}\nexport function ensureElement(selectorElement, context) {\n    if (isSelector(selectorElement)) {\n        const elements = ensureAllElements(selectorElement, context);\n        if (elements.length > 1) {\n            console.warn(`selector ${selectorElement} return more then one element`);\n        }\n        if (elements.length === 0) {\n            throw new Error(`selector ${selectorElement} return nothing`);\n        }\n        return elements.pop();\n    }\n    if (selectorElement instanceof HTMLElement) {\n        return selectorElement;\n    }\n    throw new Error('Unknown selector element');\n}\nexport function cloneTemplate(query) {\n    const template = ensureElement(query);\n    return template.content.firstElementChild.cloneNode(true);\n}\nexport function bem(block, element, modifier) {\n    let name = block;\n    if (element)\n        name += `__${element}`;\n    if (modifier)\n        name += `_${modifier}`;\n    return {\n        name,\n        class: `.${name}`\n    };\n}\nexport function getObjectProperties(obj, filter) {\n    return Object.entries(Object.getOwnPropertyDescriptors(Object.getPrototypeOf(obj)))\n        .filter(([name, prop]) => filter ? filter(name, prop) : (name !== 'constructor'))\n        .map(([name, prop]) => name);\n}\n/**\n * Устанавливает dataset атрибуты элемента\n */\nexport function setElementData(el, data) {\n    for (const key in data) {\n        el.dataset[key] = String(data[key]);\n    }\n}\n/**\n * Получает типизированные данные из dataset атрибутов элемента\n */\nexport function getElementData(el, scheme) {\n    const data = {};\n    for (const key in el.dataset) {\n        data[key] = scheme[key](el.dataset[key]);\n    }\n    return data;\n}\n/**\n * Проверка на простой объект\n */\nexport function isPlainObject(obj) {\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype === Object.getPrototypeOf({}) ||\n        prototype === null;\n}\nexport function isBoolean(v) {\n    return typeof v === 'boolean';\n}\n/**\n * Фабрика DOM-элементов в простейшей реализации\n * здесь не учтено много факторов\n * в интернет можно найти более полные реализации\n */\nexport function createElement(tagName, props, children) {\n    const element = document.createElement(tagName);\n    if (props) {\n        for (const key in props) {\n            const value = props[key];\n            if (isPlainObject(value) && key === 'dataset') {\n                setElementData(element, value);\n            }\n            else {\n                // @ts-expect-error fix indexing later\n                element[key] = isBoolean(value) ? value : String(value);\n            }\n        }\n    }\n    if (children) {\n        for (const child of Array.isArray(children) ? children : [children]) {\n            element.append(child);\n        }\n    }\n    return element;\n}\nexport function getProductPriceText(price) {\n    return price === null ? 'Бесценно' : `${price} синапсов`;\n}\nexport function getProductPrice(price) {\n    return price === null ? 0 : price;\n}\nexport function getProductCategoryCssClass(category) {\n    for (const categoryItem in categoryCompareObj) {\n        if (categoryItem === category)\n            return `card__category_${categoryCompareObj[category]}`;\n    }\n    return `card__category_${categoryCompareObj['другое']}`;\n}\nexport function getCdnImgUrl(img) {\n    return `${CDN_URL}/${img}`;\n}\n","/**\n * Базовый абстрактный компонент\n */\nexport class BaseComponent {\n    constructor(template) {\n        this._template = template;\n    }\n}\n","import { BaseComponent } from \"./base.component\";\n/**\n * Не кэшируемый компонент — каждый вызов render возвращает новый элемент\n */\nexport class StatelessComponent extends BaseComponent {\n}\n","import { cloneTemplate, getProductPriceText } from \"../../utils/utils\";\nimport { StatelessComponent } from \"./base/stateless.component\";\n/**\n * Компонент карточки товара в корзине.\n *\n * Отвечает за создание HTML-элемента списка товара в корзине,\n * заполнение его данными и обработку удаления товара из корзины.\n */\nexport class BasketCardComponent extends StatelessComponent {\n    constructor(_basketService) {\n        super(document.querySelector('#card-basket'));\n        this._basketService = _basketService;\n        /**\n         * Обработчик удаления товара из корзины.\n         * Вызывает метод сервиса корзины для удаления переданного товара.\n         *\n         * @param product - товар, который нужно удалить из корзины\n         */\n        this._deleteProduct = (product) => {\n            this._basketService.remove(product);\n        };\n    }\n    render(product, index) {\n        const basketCardElement = cloneTemplate(this._template);\n        const basketItemIndexElemet = basketCardElement.querySelector('.basket__item-index');\n        const basketItemTitleElement = basketCardElement.querySelector('.card__title');\n        const basketItemPriceElement = basketCardElement.querySelector('.card__price');\n        const basketItemDeleteBtnElement = basketCardElement.querySelector('.basket__item-delete');\n        basketItemIndexElemet.textContent = `${index + 1}`;\n        basketItemTitleElement.textContent = product.title;\n        basketItemPriceElement.textContent = getProductPriceText(product.price);\n        basketItemDeleteBtnElement.addEventListener('click', () => this._deleteProduct(product));\n        return basketCardElement;\n    }\n}\n","import { EventNames } from \"../../types\";\n/**\n * Компонент для отображения состояния корзины в шапке сайта.\n *\n * Отвечает за отображение количества товаров в корзине и\n * обработку клика по иконке корзины для открытия корзины.\n */\nexport class BasketHeaderComponent {\n    constructor(_statefulEventEmitterService) {\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._headerBasketElement = document.querySelector('.header__basket');\n        this._counterElement = this._headerBasketElement.querySelector('.header__basket-counter');\n        this._initEventListeners();\n    }\n    /**\n     * Обновляет отображаемое количество товаров в корзине.\n     *\n     * @param quantity - количество товаров для отображения\n     */\n    setQuantityProductsInBasket(quantity) {\n        this._counterElement.textContent = String(quantity);\n    }\n    /**\n     * Инициализирует обработчики событий компонента,\n     * в частности навешивает обработчик клика на иконку корзины,\n     * который инициирует событие открытия корзины через EventEmitter.\n     */\n    _initEventListeners() {\n        this._headerBasketElement.addEventListener('click', (event) => {\n            this._statefulEventEmitterService.emit(EventNames.OPEN_CART);\n        });\n    }\n}\n","import { cloneTemplate } from \"../../../utils/utils\";\nimport { DI_INIT } from \"../di/di-symbols\";\nimport { BaseComponent } from \"./base.component\";\n/**\n * Кэшируемый компонент (рендерит только один раз, затем возвращает сохранённый элемент)\n */\nexport class CachedComponent extends BaseComponent {\n    constructor(template) {\n        super(template);\n        this._cachedElement = this._cloneTemplate(template);\n        this._cachedData = this._initCachedData();\n        this[DI_INIT] = () => {\n            this._afterInit();\n        };\n    }\n    render(...args) {\n        this._update(...args);\n        return this._cachedElement;\n    }\n    _cloneTemplate(template) {\n        return cloneTemplate(template);\n    }\n    _afterInit() {\n        // Переопределяется при необходимости\n    }\n    _update(...args) {\n        // Переопределяется при необходимости\n    }\n}\n","import { EventNames } from \"../../types\";\nimport { CachedComponent } from \"./base/cached.component\";\n/**\n * Компонент представления корзины, реализующий слой **View** в архитектуре MVVM (или MVP).\n *\n * Отвечает исключительно за отображение содержимого корзины и взаимодействие с DOM-элементами,\n * не содержит бизнес-логики, не хранит состояния и не взаимодействует напрямую ни с моделью,\n * ни с контроллером. Получает данные и инструкции исключительно через события.\n *\n *  Архитектурные особенности:\n *\n * - Использует `StatefulEventEmitterService` (реализация паттерна **EventEmitter**) для подписки на события и инициации пользовательских событий.\n * - Не создает экземпляры модели или контроллера, не зависит от них напрямую.\n * - Не валидирует данные, не изменяет модель, а только реагирует на изменения и инициирует переходы состояний.\n * - Подписывается на события изменения состояния корзины (`EventNames.BASKET`) и перерисовывает DOM при каждом обновлении.\n * - Вызывает событие `EventNames.OPEN_ORDER_ADDRESS_PAYMENT` при нажатии на кнопку оформления заказа, не передавая никаких данных напрямую.\n * - Отписывается от событий при закрытии модального окна (через this._modalService.onClose), избегая утечек памяти.\n *\n */\nexport class BasketComponent extends CachedComponent {\n    constructor(_basketService, _basketCardComponent, _statefulEventEmitterService, _modalService) {\n        super(document.querySelector('#basket'));\n        this._basketService = _basketService;\n        this._basketCardComponent = _basketCardComponent;\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._modalService = _modalService;\n    }\n    _initCachedData() {\n        return {\n            basketElement: this._cachedElement,\n            listElement: this._cachedElement.querySelector('.basket__list'),\n            priceElement: this._cachedElement.querySelector('.basket__price'),\n            submitBtnElement: this._cachedElement.querySelector('.basket__button')\n        };\n    }\n    _afterInit() {\n        const { listElement, priceElement, submitBtnElement } = this._cachedData;\n        const getPriceBasket = () => this._basketService.getPriceBasket();\n        const renderAll = () => {\n            listElement.textContent = '';\n            this._renderActionsInfo(submitBtnElement, priceElement, listElement, getPriceBasket());\n            this._appendBasketElements(listElement, this._basketService.getAll());\n        };\n        renderAll();\n        const onBasketCallback = () => renderAll();\n        this._basketService.onBasket(onBasketCallback);\n        submitBtnElement.addEventListener('click', () => {\n            this._statefulEventEmitterService.emit(EventNames.OPEN_ORDER_ADDRESS_PAYMENT);\n            this._basketService.offBasket(onBasketCallback);\n        });\n        // Удаление подписки при закрытии\n        this._modalService.onClose(this, () => {\n            this._basketService.offBasket(onBasketCallback);\n        });\n    }\n    /**\n     * Вспомогательный метод для добавления DOM-элементов товаров в список корзины.\n     *\n     * @param listElement - контейнер списка корзины\n     * @param products - массив продуктов, которые необходимо отобразить\n     */\n    _appendBasketElements(listElement, products) {\n        for (let i = 0; i < products.length; i++) {\n            const basketCardElement = this._basketCardComponent.render(products[i], i);\n            listElement.appendChild(basketCardElement);\n        }\n    }\n    /**\n     * Вспомогательный метод для обновления информации о стоимости корзины,\n     * а также управления состоянием кнопки оформления и отображением пустой корзины.\n     *\n     * @param submitBtnElement - кнопка оформления заказа\n     * @param priceElement - элемент для отображения общей стоимости\n     * @param listElement - контейнер списка корзины\n     * @param priceBasket - сумма стоимости товаров в корзине\n     */\n    _renderActionsInfo(submitBtnElement, priceElement, listElement, priceBasket) {\n        submitBtnElement.disabled = priceBasket === 0;\n        priceElement.textContent = `${priceBasket} синапсов`;\n        if (priceBasket === 0) {\n            const listItemEmptyElement = document.createElement('div');\n            listItemEmptyElement.classList.add('basket__list-empty');\n            listItemEmptyElement.textContent = 'Корзина пуста';\n            listElement.appendChild(listItemEmptyElement);\n        }\n    }\n}\n","import { EventNames } from \"../../types\";\nimport { cloneTemplate, getCdnImgUrl, getProductCategoryCssClass, getProductPriceText } from \"../../utils/utils\";\nimport { StatelessComponent } from \"./base/stateless.component\";\n/**\n * Компонент карточки продукта в галерее.\n *\n * Отвечает за создание DOM-элемента карточки продукта,\n * заполнение его данными продукта и генерацию события при клике.\n */\nexport class CardCatalogComponent extends StatelessComponent {\n    constructor(_statefulEventEmitterService) {\n        super(document.querySelector('#card-catalog'));\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        /**\n         * Обработчик клика по карточке, который инициирует событие открытия полной информации о продукте.\n         *\n         * @param product - продукт, связанный с данной карточкой\n         */\n        this._cardCatalogClick = (product) => {\n            this._statefulEventEmitterService.emit(EventNames.OPEN_CARD_FULL, product);\n        };\n    }\n    render(product) {\n        const cardCatalogElement = cloneTemplate(this._template);\n        const cardCategory = cardCatalogElement.querySelector('.card__category');\n        const cardTitle = cardCatalogElement.querySelector('.card__title');\n        const cardImg = cardCatalogElement.querySelector('.card__image');\n        const cardPrice = cardCatalogElement.querySelector('.card__price');\n        cardCategory.textContent = product.category;\n        cardCategory.classList.remove('card__category_soft');\n        cardCategory.classList.add(getProductCategoryCssClass(product.category));\n        cardTitle.textContent = product.title;\n        cardImg.alt = product.title;\n        cardImg.src = getCdnImgUrl(product.image);\n        cardPrice.textContent = getProductPriceText(product.price);\n        cardCatalogElement.addEventListener('click', () => this._cardCatalogClick(product));\n        return cardCatalogElement;\n    }\n}\n","import { getCdnImgUrl, getProductCategoryCssClass, getProductPriceText } from \"../../utils/utils\";\nimport { CachedComponent } from \"./base/cached.component\";\n/**\n * Компонент полной карточки товара с подробной информацией.\n *\n * Основные обязанности:\n * - Отображать данные товара: категория, название, изображение и цену.\n * - Управлять состоянием кнопки добавления/удаления товара из корзины,\n *   учитывая, доступен ли товар (цена не null) и находится ли он уже в корзине.\n * - Обрабатывать клики по кнопке для добавления или удаления товара из корзины,\n *   синхронизируя состояние с BasketService.\n */\nexport class CardFullComponent extends CachedComponent {\n    constructor(_basketService) {\n        super(document.querySelector('#card-preview'));\n        this._basketService = _basketService;\n    }\n    _initCachedData() {\n        return {\n            category: this._cachedElement.querySelector('.card__category'),\n            title: this._cachedElement.querySelector('.card__title'),\n            img: this._cachedElement.querySelector('.card__image'),\n            price: this._cachedElement.querySelector('.card__price'),\n            btn: this._cachedElement.querySelector('.card__button'),\n            product: null\n        };\n    }\n    _afterInit() {\n        this._cachedData.category.classList.remove('card__category_soft');\n        this._cachedData.btn.addEventListener('click', () => {\n            if (this._cachedData.product !== null) {\n                this._renderBtnText(this._cachedData.product, this._cachedData.btn);\n            }\n        });\n    }\n    _update(product) {\n        this._cachedData.product = product;\n        this._cachedData.category.textContent = product.category;\n        this._cachedData.category.classList.add(getProductCategoryCssClass(product.category));\n        this._cachedData.title.textContent = product.title;\n        this._cachedData.img.alt = product.title;\n        this._cachedData.img.src = getCdnImgUrl(product.image);\n        this._cachedData.price.textContent = getProductPriceText(product.price);\n        const isInBasket = this._basketService.getById(product.id);\n        if (product.price === null) {\n            this._cachedData.btn.disabled = true;\n            this._cachedData.btn.textContent = 'Недоступно';\n        }\n        else {\n            this._cachedData.btn.textContent = isInBasket ? 'Удалить из корзины' : 'Купить';\n        }\n    }\n    _renderBtnText(product, btn) {\n        const isInBasket = this._basketService.getById(product.id);\n        if (isInBasket) {\n            this._basketService.remove(product);\n            btn.textContent = 'Купить';\n        }\n        else {\n            this._basketService.add(product);\n            btn.textContent = 'Удалить из корзины';\n        }\n    }\n}\n","import { CachedComponent } from \"./base/cached.component\";\n/**\n * Компонент формы ввода Email и телефона для оформления заказа.\n *\n * Основные принципы:\n * - Обновление данных в модели происходит непосредственно при событии `input`,\n *   то есть при каждом изменении пользовательского ввода.\n * - Валидация данных выполняется в модели (OrderService) и ValidationOrderService,\n *   представление (этот компонент) **не выполняет валидацию и не хранит данные формы**.\n * - Представление только отображает текущее состояние модели,\n *   включая ошибки валидации, полученные через подписку на события.\n * - Кнопка отправки формы блокируется/разблокируется в зависимости от валидности данных в модели.\n * - Передача данных между слоем представления и моделью(OrderService) происходит через StatefulEventEmitterService, который в свою очередь наследуется от базового EventEmitter, что обеспечивает реактивность и разделение ответственности.\n *\n * Это гарантирует, что форма заказа никак не зависит от корзины,\n * и не хранит собственное состояние — все данные централизованно управляются через OrderService\n */\nexport class EmailPhoneOrderComponent extends CachedComponent {\n    constructor(_orderService, _modalService, _basketService) {\n        super(document.querySelector('#contacts'));\n        this._orderService = _orderService;\n        this._modalService = _modalService;\n        this._basketService = _basketService;\n    }\n    _initCachedData() {\n        const emailErrorEl = document.createElement('span');\n        const phoneErrorEl = document.createElement('span');\n        const formErrors = this._cachedElement.querySelector('.form__errors');\n        formErrors.append(emailErrorEl, phoneErrorEl);\n        return {\n            inputEmail: this._cachedElement.querySelector('input[name=\"email\"]'),\n            inputPhone: this._cachedElement.querySelector('input[name=\"phone\"]'),\n            submitButton: this._cachedElement.querySelector('button[type=\"submit\"]'),\n            formErrors: formErrors,\n            emailErrorEl: emailErrorEl,\n            phoneErrorEl: phoneErrorEl\n        };\n    }\n    _afterInit() {\n        const { inputEmail, inputPhone, submitButton, emailErrorEl, phoneErrorEl } = this._cachedData;\n        this._cachedData.inputEmail.addEventListener('input', () => {\n            this._orderService.updateEmail(inputEmail.value);\n        });\n        inputPhone.addEventListener('input', () => {\n            this._orderService.updatePhone(inputPhone.value);\n        });\n        const subsFormState = this._orderService.onFormStateChange(['email', 'phone'], (state) => {\n            var _a, _b;\n            emailErrorEl.innerHTML = `${(_a = state.errors.email) !== null && _a !== void 0 ? _a : ''}<br>`;\n            phoneErrorEl.innerHTML = (_b = state.errors.phone) !== null && _b !== void 0 ? _b : '';\n            submitButton.disabled = !state.isValid;\n        });\n        this._cachedElement.addEventListener('submit', (event) => {\n            event.preventDefault();\n            this._orderService.submit();\n        });\n        this._modalService.onClose(this, () => {\n            subsFormState();\n            this._orderService.clear();\n            this._basketService.clear();\n        });\n    }\n}\n","/**\n * Компонент галереи, отвечающий за отображение списка продуктов.\n *\n * Основная задача:\n * - Рендерить список продуктов, создавая для каждого карточку с помощью CardCatalogComponent\n *   и добавляя их в DOM-элемент галереи.\n */\nexport class GalleryComponent {\n    constructor(_cardCatalogComponent) {\n        this._cardCatalogComponent = _cardCatalogComponent;\n        this._galleryElement = document.querySelector('.gallery');\n    }\n    /**\n     * Создаёт и добавляет в галерею карточки продуктов.\n     *\n     * @param products - массив продуктов для отображения в галерее\n     */\n    renderProductList(products) {\n        this._galleryElement.innerHTML = '';\n        for (const product of products) {\n            const cardElement = this._cardCatalogComponent.render(product);\n            this._galleryElement.append(cardElement);\n        }\n    }\n}\n","/**\n * Компонент модального окна, отвечающий за отображение, открытие и закрытие модалки.\n *\n * Основные задачи:\n * - Вставка переданного контента в модальное окно.\n * - Управление видимостью модального окна и блокировка скролла страницы при открытии.\n * - Обработка событий закрытия: клик по крестику, клик вне содержимого (оверлей) и клавиша Escape.\n * - Подписка и отписка от событий при открытии и закрытии модального окна.\n */\nexport class ModalComponent {\n    constructor() {\n        this._openCallback = () => { };\n        this._closeCallback = () => { };\n        this._isOpen = false;\n        this._pointerDownInsideModal = false;\n        this._pointerUpInsideModal = false;\n        /**\n         * Закрывает модальное окно, снимает блокировку скролла и вызывает колбэк onClose.\n         */\n        this.close = () => {\n            if (!this._isOpen)\n                return;\n            this._modalContainerElement.classList.remove('modal_active');\n            document.body.classList.remove('page_overflow-hidden');\n            this._isOpen = false;\n            this._destroyEventListeners();\n            this._closeCallback();\n        };\n        /**\n         * Обработчик события pointerdown внутри модального окна,\n         * отслеживает попадание клика внутрь контента модалки.\n         * @param event - событие указателя\n         * @private\n         */\n        this._onPointerDown = (event) => {\n            this._pointerDownInsideModal = this._modalContentElement.contains(event.target);\n        };\n        /**\n         * Обработчик события pointerup внутри модального окна,\n         * отслеживает отпускание клика внутри модалки.\n         * @param event - событие указателя\n         * @private\n         */\n        this._onPointerUp = (event) => {\n            this._pointerUpInsideModal = this._modalContentElement.contains(event.target);\n        };\n        /**\n         * Обработчик клика по оверлею (фону модального окна).\n         * Закрывает модалку, если клик был именно по оверлею\n         * и pointerdown и pointerup не были внутри контента.\n         * @param event - событие мыши\n         * @private\n         */\n        this._closeByOverlay = (event) => {\n            // Клик по оверлею\n            if (event.target === this._modalContainerElement) {\n                // Закрываем только если pointerdown и pointerup были вне модалки\n                if (!this._pointerDownInsideModal && !this._pointerUpInsideModal) {\n                    this.close();\n                }\n            }\n        };\n        /**\n         * Обработчик события нажатия клавиши Escape для закрытия модального окна.\n         * @param event - событие клавиатуры\n         * @private\n         */\n        this._closeByEsc = (event) => {\n            if (event.key === 'Escape') {\n                this.close();\n            }\n        };\n        this._modalContainerElement = document.querySelector('#modal-container');\n        this._modalContentElement = this._modalContainerElement.querySelector('.modal__content');\n        this._modalCloseElement = this._modalContainerElement.querySelector('.modal__close');\n    }\n    /**\n     * Открывает модальное окно с указанным содержимым.\n     * Если модалка уже открыта, просто обновляет контент.\n     *\n     * @param content - DOM элемент, который будет вставлен в тело модального окна.\n     * @param options - Опциональные колбэки для событий открытия и закрытия.\n     */\n    open(content, options) {\n        var _a, _b;\n        const isAlreadyOpen = this._isOpen;\n        this._modalContentElement.textContent = '';\n        this._modalContentElement.appendChild(content);\n        this._openCallback = (_a = options === null || options === void 0 ? void 0 : options.onOpen) !== null && _a !== void 0 ? _a : (() => { });\n        this._closeCallback = (_b = options === null || options === void 0 ? void 0 : options.onClose) !== null && _b !== void 0 ? _b : (() => { });\n        if (!isAlreadyOpen) {\n            this._initEventListeners();\n            this._modalContainerElement.classList.add('modal_active');\n            document.body.classList.add('page_overflow-hidden');\n            this._isOpen = true;\n            this._openCallback();\n        }\n    }\n    /**\n     * Инициализирует обработчики событий для управления закрытием модального окна:\n     * клики по крестику, оверлею, а также клавиша Escape.\n     * @private\n     */\n    _initEventListeners() {\n        this._modalCloseElement.addEventListener('click', this.close);\n        this._modalContainerElement.addEventListener('pointerdown', this._onPointerDown);\n        this._modalContainerElement.addEventListener('pointerup', this._onPointerUp);\n        this._modalContainerElement.addEventListener('click', this._closeByOverlay);\n        window.addEventListener('keydown', this._closeByEsc);\n    }\n    /**\n     * Удаляет ранее добавленные обработчики событий.\n     * @private\n     */\n    _destroyEventListeners() {\n        this._modalCloseElement.removeEventListener('click', this.close);\n        this._modalContainerElement.removeEventListener('pointerdown', this._onPointerDown);\n        this._modalContainerElement.removeEventListener('pointerup', this._onPointerUp);\n        this._modalContainerElement.removeEventListener('click', this._closeByOverlay);\n        window.removeEventListener('keydown', this._closeByEsc);\n    }\n}\n","import { EventNames } from \"../../types\";\nimport { CachedComponent } from \"./base/cached.component\";\n/**\n * Компонент формы ввода адреса и выбора способа оплаты для оформления заказа.\n *\n * Основные принципы:\n * - Обновление данных модели происходит немедленно при событии `input` и переключении оплаты,\n *   то есть при каждом изменении пользовательского ввода или выборе метода оплаты.\n * - Валидация данных производится исключительно в модели (OrderService),\n *   этот компонент **не выполняет валидацию и не хранит состояние формы**.\n * - Представление отражает текущее состояние модели, включая ошибки валидации,\n *   которые поступают через подписку на события.\n * - Кнопка отправки блокируется или активируется в зависимости от валидности данных,\n *   предоставляемой моделью.\n * - Передача данных между представлением и моделью (OrderService) происходит через\n *   StatefulEventEmitterService, который наследует функциональность базового EventEmitter,\n *   что обеспечивает реактивность и чёткое разделение ответственности между слоями.\n *\n * Архитектура гарантирует, что форма заказа не зависит от корзины и не хранит локальное состояние —\n * все данные централизованно управляются через OrderService и распространяются посредством событий.\n */\nexport class PaymentAddressOrderComponent extends CachedComponent {\n    constructor(_orderService, _statefulEventEmitterService, _modalService) {\n        super(document.querySelector('#order'));\n        this._orderService = _orderService;\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._modalService = _modalService;\n    }\n    _initCachedData() {\n        return {\n            btnOnline: this._cachedElement.querySelector('[name=\"card\"]'),\n            btnOffline: this._cachedElement.querySelector('[name=\"cash\"]'),\n            inputAddress: this._cachedElement.querySelector('[name=\"address\"]'),\n            submitBtn: this._cachedElement.querySelector('.order__button'),\n            errors: this._cachedElement.querySelector('.form__errors'),\n            form: this._cachedElement\n        };\n    }\n    _afterInit() {\n        const { btnOnline, btnOffline, inputAddress, submitBtn, errors, form } = this._cachedData;\n        this._setPaymentMethod('online', btnOnline, btnOffline);\n        btnOnline.addEventListener('click', () => {\n            this._setPaymentMethod('online', btnOnline, btnOffline);\n        });\n        btnOffline.addEventListener('click', () => {\n            this._setPaymentMethod('offline', btnOnline, btnOffline);\n        });\n        inputAddress.addEventListener('input', () => {\n            this._orderService.setAddress(inputAddress.value);\n        });\n        const unsubscribe = this._orderService.onFormStateChange(['address'], (state) => {\n            var _a;\n            errors.textContent = (_a = state.errors.address) !== null && _a !== void 0 ? _a : '';\n            submitBtn.disabled = !state.isValid;\n        });\n        form.addEventListener('submit', (event) => {\n            event.preventDefault();\n            this._statefulEventEmitterService.emit(EventNames.OPEN_ORDER_EMAIL_PHONE);\n        });\n        // при закрытии модалки ручном (крестик, ESC) сбрасываем состояние заказа\n        this._modalService.onCloseOnce(this, () => {\n            this._orderService.clear();\n            unsubscribe();\n        });\n    }\n    /**\n     * Устанавливает выбранный способ оплаты в модель (OrderService)\n     * и обновляет отображение активной кнопки.\n     *\n     * @param currentMethod - Новый способ оплаты ('online' или 'offline').\n     * @param btnOnline - Кнопка \"Онлайн\".\n     * @param btnOffline - Кнопка \"При получении\".\n     */\n    _setPaymentMethod(currentMethod, btnOnline, btnOffline) {\n        this._orderService.setPaymentMethod(currentMethod);\n        this._updatePaymentButtonStyles(currentMethod, btnOnline, btnOffline);\n    }\n    /**\n     * Обновляет CSS-классы активного состояния для кнопок способов оплаты.\n     *\n     * @param method - Выбранный способ оплаты.\n     * @param btnOnline - Кнопка \"Онлайн\".\n     * @param btnOffline - Кнопка \"При получении\".\n     */\n    _updatePaymentButtonStyles(method, btnOnline, btnOffline) {\n        btnOnline.classList.toggle('button_alt-active', method === 'online');\n        btnOffline.classList.toggle('button_alt-active', method === 'offline');\n    }\n}\n","import { CachedComponent } from \"./base/cached.component\";\n/**\n * Компонент отображения успешного оформления заказа.\n *\n * Основные обязанности:\n * - Показывать информацию об успешно оформленном заказе, включая списанную сумму.\n * - Обеспечивать закрытие модального окна по клику на кнопку \"Закрыть\".\n * - Сброс состояния заказа и корзины при закрытии модального окна.\n */\nexport class SuccessOrderComponent extends CachedComponent {\n    constructor(_modalService) {\n        super(document.querySelector('#success'));\n        this._modalService = _modalService;\n    }\n    _initCachedData() {\n        return {\n            successOrderElement: this._cachedElement,\n            descriptionElement: this._cachedElement.querySelector('.order-success__description'),\n            successBtnElement: this._cachedElement.querySelector('.order-success__close')\n        };\n    }\n    _afterInit() {\n        const { successOrderElement, successBtnElement } = this._cachedData;\n        successBtnElement.addEventListener('click', () => {\n            this._modalService.close(successOrderElement);\n        });\n    }\n    _update(res) {\n        const { descriptionElement } = this._cachedData;\n        descriptionElement.textContent = `Списано ${res.total} синапсов`;\n    }\n}\n","import { AppController } from \"../../../app.controller\";\nimport { ApiOrderService } from \"../../../services/api-order.service\";\nimport { ApiProductsService } from \"../../../services/api-products.service\";\nimport { BasketService } from \"../../../services/basket.service\";\nimport { ModalService } from \"../../../services/modal.service\";\nimport { OrderService } from \"../../../services/order.service\";\nimport { ProductsService } from \"../../../services/products.service\";\nimport { StatefulEventEmitterService } from \"../../../services/stateful-event-emitter.service\";\nimport { ValidationOrderService } from \"../../../services/validation-order.service\";\nimport { BasketCardComponent } from \"../basket-card.component\";\nimport { BasketHeaderComponent } from \"../basket-header.component\";\nimport { BasketComponent } from \"../basket.component\";\nimport { CardCatalogComponent } from \"../card-catalog.component\";\nimport { CardFullComponent } from \"../card-full.component\";\nimport { EmailPhoneOrderComponent } from \"../email-phone-order.component\";\nimport { GalleryComponent } from \"../gallery.component\";\nimport { ModalComponent } from \"../modal.component\";\nimport { PaymentAddressOrderComponent } from \"../payment-address-order.component\";\nimport { SuccessOrderComponent } from \"../succes-order.component\";\nimport { container } from \"./di-container\";\n/**\n * Регистрирует все необходимые зависимости в глобальном DI контейнере.\n *\n * Выполняет регистрацию сервисов, компонентов и контроллеров с указанием их зависимостей,\n * что позволяет контейнеру управлять созданием экземпляров и их инъекцией.\n *\n * Используется для единой централизованной настройки всех классов приложения,\n * чтобы при запросе нужного класса контейнер мог автоматически разрешить\n * и передать все необходимые зависимости.\n */\nexport function registerDependencies() {\n    container.register(ApiOrderService);\n    container.register(ApiProductsService);\n    container.register(StatefulEventEmitterService);\n    container.register(ValidationOrderService);\n    container.register(ModalComponent);\n    container.register(ModalService, { deps: [ModalComponent] });\n    container.register(CardCatalogComponent, { deps: [StatefulEventEmitterService] });\n    container.register(GalleryComponent, { deps: [CardCatalogComponent] });\n    container.register(BasketHeaderComponent, { deps: [StatefulEventEmitterService] });\n    container.register(BasketService, { deps: [StatefulEventEmitterService] });\n    container.register(CardFullComponent, { deps: [BasketService] });\n    container.register(BasketCardComponent, { deps: [BasketService] });\n    container.register(BasketComponent, { deps: [BasketService, BasketCardComponent, StatefulEventEmitterService, ModalService] });\n    container.register(OrderService, { deps: [StatefulEventEmitterService, ValidationOrderService, ApiOrderService, BasketService] });\n    container.register(PaymentAddressOrderComponent, { deps: [OrderService, StatefulEventEmitterService, ModalService] });\n    container.register(EmailPhoneOrderComponent, { deps: [OrderService, ModalService, BasketService] });\n    container.register(SuccessOrderComponent, { deps: [ModalService] });\n    container.register(ProductsService, { deps: [ApiProductsService, StatefulEventEmitterService] });\n    container.register(AppController, {\n        deps: [\n            StatefulEventEmitterService,\n            ModalService,\n            GalleryComponent,\n            BasketHeaderComponent,\n            BasketService,\n            CardFullComponent,\n            BasketComponent,\n            PaymentAddressOrderComponent,\n            EmailPhoneOrderComponent,\n            SuccessOrderComponent,\n            ProductsService\n        ]\n    });\n}\n","import './scss/styles.scss';\nimport { AppController } from './app.controller';\nimport { container } from './components/features/di/di-container';\nimport { registerDependencies } from './components/features/di/di-setup';\n/**\n * Точка входа в приложение.\n *\n * Выполняет регистрацию всех зависимостей через функцию `registerDependencies`,\n * затем создаёт и инициализирует главный контроллер приложения `AppController`\n * с помощью DI-контейнера.\n *\n * Такой подход обеспечивает централизованное управление зависимостями\n * и структурированное начало работы приложения.\n */\nregisterDependencies();\nconst appController = container.resolve(AppController);\nappController.init();\n"],"names":["EventNames","AppController","_statefulEventEmitterService","_modalService","_galleryComponent","_basketHeaderComponent","_basketService","_cardFullComponent","_basketComponent","_paymentAddressOrderComponent","_emailPhoneOrderComponent","_successOrderComponent","_productsService","_classCallCheck","this","_createClass","key","value","init","_loadProductsAndRender","_initCustomEventListeners","_this","getAll","products","renderProductList","_this2","on","OPEN_CARD_FULL","product","open","render","onBasket","setQuantityProductsInBasket","length","OPEN_CART","OPEN_ORDER_ADDRESS_PAYMENT","OPEN_ORDER_EMAIL_PHONE","OPEN_SUCCESS_ORDER","res","DI_INIT","Symbol","container","DIContainer","_registry","Map","_singletons","register","DIProvider","_a","_b","_c","name","useClass","deps","inject","expectedLength","Error","concat","set","scope","resolve","get","has","dependencies","map","dep","instance","_construct","_toConsumableArray","Api","baseUrl","options","arguments","undefined","headers","Object","assign","uri","fetch","method","then","handleResponse","post","data","body","JSON","stringify","response","ok","json","Promise","reject","error","statusText","API_ORIGIN","API_URL","CDN_URL","categoryCompareObj","ApiService","_Api","_inherits","_super","_createSuper","call","ApiOrderService","_ApiService","send","createOrderRequest","ApiProductsService","productsResponse","items","getById","id","BasketService","productsInBasket","getLast","BASKET","find","getPriceBasket","reduce","acc","price","add","item","emit","offAllByEventName","remove","filteredProductsInBasket","filter","callback","offBasket","off","onBasketById","offBasketById","clear","ModalService","_modalComponent","_currentModal","_onCloseListeners","_onCloseOnceListeners","content","renderArgs","console","log","element","_resolveElement","_isComponent","__modalElement","close","modal","component","onClose","onOpen","_invokeAllCloseCallbacks","_handleModalClose","elementToClose","maybeRendered","warn","target","setTimeout","_onClose","Set","onCloseOnce","_this3","_onCloseOnce","callbacks","_step","_iterator","_createForOfIteratorHelper","s","n","done","cb","err","e","f","onceCallbacks","_step2","_iterator2","Array","isArray","apply","obj","_typeof","OrderService","_validationOrderService","_apiOrderService","updateEmail","email","_emitOrderUpdate","updatePhone","phone","setAddress","address","setPaymentMethod","payment","clearLast","ORDER_CHANGED","onFormStateChange","fields","hasChanged","handler","order","some","field","result","validate","submit","_getCurrentOrder","p","total","validation","isValid","alert","errors","partialOrder","currentOrder","newOrder","ProductsService","_apiProductsService","onDestroy","_update","_callback","PRODUCTS_CHANGED","StatefulEventEmitterService","_EventEmitter","_lastValues","eventName","_get","_getPrototypeOf","prototype","_events","EventEmitter","size","forEach","subscribers","RegExp","test","onAll","offAll","trigger","context","event","ValidationOrderService","_validateField","keys","isSelector","x","ensureElement","selectorElement","elements","ensureAllElements","document","from","querySelectorAll","NodeList","pop","HTMLElement","cloneTemplate","query","firstElementChild","cloneNode","getProductPriceText","getProductCategoryCssClass","category","categoryItem","getCdnImgUrl","img","BaseComponent","template","_template","StatelessComponent","_BaseComponent","BasketCardComponent","_StatelessComponent","querySelector","_deleteProduct","index","basketCardElement","basketItemIndexElemet","basketItemTitleElement","basketItemPriceElement","basketItemDeleteBtnElement","textContent","title","addEventListener","BasketHeaderComponent","_headerBasketElement","_counterElement","_initEventListeners","quantity","String","CachedComponent","_cachedElement","_cloneTemplate","_cachedData","_initCachedData","_afterInit","BasketComponent","_CachedComponent","_basketCardComponent","basketElement","listElement","priceElement","submitBtnElement","_this$_cachedData","renderAll","_renderActionsInfo","_appendBasketElements","onBasketCallback","i","appendChild","priceBasket","disabled","listItemEmptyElement","createElement","classList","CardCatalogComponent","_cardCatalogClick","cardCatalogElement","cardCategory","cardTitle","cardImg","cardPrice","alt","src","image","CardFullComponent","btn","_renderBtnText","isInBasket","EmailPhoneOrderComponent","_orderService","emailErrorEl","phoneErrorEl","formErrors","append","inputEmail","inputPhone","submitButton","subsFormState","state","innerHTML","preventDefault","GalleryComponent","_cardCatalogComponent","_galleryElement","cardElement","ModalComponent","_openCallback","_closeCallback","_isOpen","_pointerDownInsideModal","_pointerUpInsideModal","_modalContainerElement","_destroyEventListeners","_onPointerDown","_modalContentElement","contains","_onPointerUp","_closeByOverlay","_closeByEsc","_modalCloseElement","isAlreadyOpen","window","removeEventListener","PaymentAddressOrderComponent","btnOnline","btnOffline","inputAddress","submitBtn","form","_setPaymentMethod","unsubscribe","currentMethod","_updatePaymentButtonStyles","toggle","SuccessOrderComponent","successOrderElement","descriptionElement","successBtnElement","registerDependencies"],"sourceRoot":""}
{"version":3,"file":"main.js","mappings":"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","sources":["webpack://my-webpack-project/./src/types/index.ts","webpack://my-webpack-project/./src/app.controller.ts","webpack://my-webpack-project/./src/components/features/di/di-container.ts","webpack://my-webpack-project/./src/components/base/api.ts","webpack://my-webpack-project/./src/utils/constants.ts","webpack://my-webpack-project/./src/services/api.service.ts","webpack://my-webpack-project/./src/services/api-order.service.ts","webpack://my-webpack-project/./src/services/api-products.service.ts","webpack://my-webpack-project/./src/services/basket.service.ts","webpack://my-webpack-project/./src/services/modal.service.ts","webpack://my-webpack-project/./src/services/order.service.ts","webpack://my-webpack-project/./src/services/products.service.ts","webpack://my-webpack-project/./src/services/stateful-event-emitter.service.ts","webpack://my-webpack-project/./src/components/base/events.ts","webpack://my-webpack-project/./src/services/validation-order.service.ts","webpack://my-webpack-project/./src/utils/utils.ts","webpack://my-webpack-project/./src/components/features/basket-card.component.ts","webpack://my-webpack-project/./src/components/features/basket-header.component.ts","webpack://my-webpack-project/./src/components/features/basket.component.ts","webpack://my-webpack-project/./src/components/features/card-catalog.component.ts","webpack://my-webpack-project/./src/components/features/card-full.component.ts","webpack://my-webpack-project/./src/components/features/email-phone-order.component.ts","webpack://my-webpack-project/./src/components/features/gallery.component.ts","webpack://my-webpack-project/./src/components/features/modal.component.ts","webpack://my-webpack-project/./src/components/features/payment-address-order.component.ts","webpack://my-webpack-project/./src/components/features/succes-order.component.ts","webpack://my-webpack-project/./src/components/features/di/di-setup.ts","webpack://my-webpack-project/./src/index.ts"],"sourcesContent":["export var EventNames;\n(function (EventNames) {\n    EventNames[\"OPEN_CARD_FULL\"] = \"open-card-full\";\n    EventNames[\"BASKET\"] = \"basket\";\n    EventNames[\"OPEN_CART\"] = \"open-cart\";\n    EventNames[\"ORDER\"] = \"order\";\n    EventNames[\"OPEN_ORDER_ADDRESS_PAYMENT\"] = \"open-order-address-payment\";\n    EventNames[\"OPEN_ORDER_EMAIL_PHONE\"] = \"open-order-email-phone\";\n    EventNames[\"OPEN_SUCCESS_ORDER\"] = \"open-success-order\";\n    EventNames[\"EMAIL_INPUT\"] = \"email-input\";\n    EventNames[\"PHONE_INPUT\"] = \"phone-input\";\n    EventNames[\"ORDER_SUBMIT\"] = \"order-submit\";\n    EventNames[\"ORDER_CLEAR\"] = \"order-clear\";\n    EventNames[\"ORDER_CHANGED\"] = \"order-changed\";\n    EventNames[\"PRODUCTS_CHANGED\"] = \"products-changed\";\n})(EventNames || (EventNames = {}));\n","import { EventNames } from \"./types\";\n/**\n * Главный контроллер приложения, отвечающий за инициализацию и\n * координацию взаимодействия между сервисами, компонентами и модальными окнами.\n *\n * Основные обязанности:\n * - Загрузка списка продуктов и передача их в галерею для отображения.\n * - Подписка на кастомные события приложения для открытия соответствующих модальных окон.\n * - Обновление информации о корзине в шапке при изменениях.\n *\n * Этот класс служит точкой входа для запуска логики приложения\n * и организации реактивного взаимодействия между слоями.\n */\nexport class AppController {\n    constructor(_statefulEventEmitterService, _modalService, _galleryComponent, _basketHeaderComponent, _basketService, _cardFullComponent, _basketComponent, _paymentAddressOrderComponent, _emailPhoneOrderComponent, _successOrderComponent, _productsService) {\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._modalService = _modalService;\n        this._galleryComponent = _galleryComponent;\n        this._basketHeaderComponent = _basketHeaderComponent;\n        this._basketService = _basketService;\n        this._cardFullComponent = _cardFullComponent;\n        this._basketComponent = _basketComponent;\n        this._paymentAddressOrderComponent = _paymentAddressOrderComponent;\n        this._emailPhoneOrderComponent = _emailPhoneOrderComponent;\n        this._successOrderComponent = _successOrderComponent;\n        this._productsService = _productsService;\n    }\n    /**\n     * Инициализирует приложение:\n     * - загружает продукты и отображает их в галерее;\n     * - устанавливает обработчики кастомных событий для управления модальными окнами и корзиной.\n     */\n    init() {\n        this._loadProductsAndRender();\n        this._initCustomEventListeners();\n    }\n    /**\n     * Загружает список продуктов через сервис-адаптер `ProductsService` и передаёт их в компонент галереи.\n     * Продукты реактивно передаются из модели (`StatefulEventEmitterService`), которая обновляется адаптером.\n     * Представление получает данные через адаптер, не взаимодействуя напрямую с API или моделью\n     */\n    _loadProductsAndRender() {\n        this._productsService.getAll((products) => {\n            this._galleryComponent.renderProductList(products);\n        });\n    }\n    /**\n     * Инициализирует подписки на кастомные события приложения.\n     * Обрабатывает открытие различных модальных окон и обновление корзины.\n     * @private\n     */\n    _initCustomEventListeners() {\n        this._statefulEventEmitterService.on(EventNames.OPEN_CARD_FULL, (product) => {\n            this._modalService.open(this._cardFullComponent.render(product));\n        });\n        this._basketService.onBasket(products => {\n            this._basketHeaderComponent.setQuantityProductsInBasket(products.length);\n        });\n        this._statefulEventEmitterService.on(EventNames.OPEN_CART, () => {\n            this._modalService.open(this._basketComponent);\n        });\n        this._statefulEventEmitterService.on(EventNames.OPEN_ORDER_ADDRESS_PAYMENT, () => {\n            this._modalService.open(this._paymentAddressOrderComponent);\n        });\n        this._statefulEventEmitterService.on(EventNames.OPEN_ORDER_EMAIL_PHONE, () => {\n            this._modalService.open(this._emailPhoneOrderComponent);\n        });\n        this._statefulEventEmitterService.on(EventNames.OPEN_SUCCESS_ORDER, (res) => {\n            this._modalService.open(this._successOrderComponent.render(res));\n        });\n    }\n}\n","/**\n * Контейнер для управления зависимостями (DI) с поддержкой синглтонов и transient-сервисов.\n */\nclass DIContainer {\n    constructor() {\n        /** Реестр зарегистрированных провайдеров */\n        this._registry = new Map();\n        /** Хранилище синглтон-экземпляров */\n        this._singletons = new Map();\n    }\n    /**\n     * Регистрирует провайдера для класса.\n     * @template T Тип создаваемого экземпляра.\n     * @param key Конструктор класса, который регистрируется.\n     * @param DIProvider Параметры провайдера (класс, зависимости, область).\n     * @throws Ошибка, если количество зависимостей не совпадает с количеством параметров конструктора.\n     */\n    register(key, DIProvider) {\n        var _a, _b, _c;\n        const name = key.name;\n        const useClass = (DIProvider === null || DIProvider === void 0 ? void 0 : DIProvider.useClass) || key;\n        const deps = (_b = (_a = DIProvider === null || DIProvider === void 0 ? void 0 : DIProvider.deps) !== null && _a !== void 0 ? _a : useClass.inject) !== null && _b !== void 0 ? _b : [];\n        // Проверка соответствия количества параметров\n        const expectedLength = useClass.length;\n        if (expectedLength !== deps.length) {\n            throw new Error(`Invalid registration for '${name}': DIConstructor expects ${expectedLength} dependencies, but got ${deps.length}`);\n        }\n        this._registry.set(name, {\n            useClass,\n            deps,\n            scope: (_c = DIProvider === null || DIProvider === void 0 ? void 0 : DIProvider.scope) !== null && _c !== void 0 ? _c : 'singleton',\n        });\n    }\n    /**\n     * Разрешает (создаёт) экземпляр зависимости по имени или конструктору.\n     * Для синглтонов возвращает один и тот же экземпляр, для transient — новый.\n     * @template T Тип создаваемого экземпляра.\n     * @param key Имя класса или сам конструктор.\n     * @returns Экземпляр запрошенной зависимости.\n     * @throws Ошибка, если зависимость не зарегистрирована.\n     */\n    resolve(key) {\n        const name = typeof key === 'string' ? key : key.name;\n        const DIProvider = this._registry.get(name);\n        if (!DIProvider) {\n            throw new Error(`Dependency '${name}' is not registered.`);\n        }\n        if (DIProvider.scope !== 'transient' && this._singletons.has(name)) {\n            return this._singletons.get(name);\n        }\n        const dependencies = (DIProvider.deps || []).map(dep => this.resolve(dep));\n        const instance = new DIProvider.useClass(...dependencies);\n        if (DIProvider.scope !== 'transient') {\n            this._singletons.set(name, instance);\n        }\n        return instance;\n    }\n}\n/** Глобальный контейнер зависимостей */\nexport const container = new DIContainer();\n","export class Api {\n    constructor(baseUrl, options = {}) {\n        var _a;\n        this.baseUrl = baseUrl;\n        this.options = {\n            headers: Object.assign({ 'Content-Type': 'application/json' }, ((_a = options.headers) !== null && _a !== void 0 ? _a : {}))\n        };\n    }\n    get(uri) {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { method: 'GET' })).then((this.handleResponse));\n    }\n    post(uri, data, method = 'POST') {\n        return fetch(this.baseUrl + uri, Object.assign(Object.assign({}, this.options), { method, body: JSON.stringify(data) })).then((this.handleResponse));\n    }\n    handleResponse(response) {\n        if (response.ok)\n            return response.json();\n        else\n            return response.json()\n                .then(data => { var _a; return Promise.reject((_a = data.error) !== null && _a !== void 0 ? _a : response.statusText); });\n    }\n}\n","const API_ORIGIN = process.env.API_ORIGIN || 'https://larek-api.nomoreparties.com';\nexport const API_URL = `${API_ORIGIN}/api/weblarek`;\nexport const CDN_URL = `${API_ORIGIN}/content/weblarek`;\nexport const settings = {};\nexport const categoryCompareObj = {\n    'софт-скил': 'soft',\n    'дополнительное': 'additional',\n    'другое': 'other',\n    'кнопка': 'button',\n    'хард-скил': 'hard'\n};\n","import { Api } from \"../components/base/api\";\nimport { API_URL } from \"../utils/constants\";\n/**\n * Класс ApiService — конкретная реализация Api с фиксированным базовым URL.\n * Используется для взаимодействия с серверным API приложения.\n */\nexport class ApiService extends Api {\n    constructor() {\n        super(API_URL);\n    }\n}\n","import { ApiService } from \"./api.service\";\n/**\n * Сервис для работы с заказами через API.\n * Расширяет базовый ApiService, реализует метод отправки заказа.\n */\nexport class ApiOrderService extends ApiService {\n    constructor() {\n        super();\n    }\n    /**\n     * Отправить заказ на сервер.\n     * Выполняет POST-запрос по эндпоинту '/order' с данными заказа.\n     *\n     * @param createOrderRequest Объект с данными для создания заказа.\n     * @returns Промис, который разрешается ответом сервера с информацией о созданном заказе.\n     */\n    send(createOrderRequest) {\n        return this.post('/order', createOrderRequest);\n    }\n}\n","import { ApiService } from \"./api.service\";\n/**\n * Сервис для работы с продуктами через API.\n * Расширяет базовый ApiService, реализует методы получения списка продуктов и продукта по ID.\n */\nexport class ApiProductsService extends ApiService {\n    constructor() {\n        super();\n    }\n    /**\n     * Получить список всех продуктов.\n     * Выполняет GET-запрос по эндпоинту '/product' и возвращает массив продуктов.\n     *\n     * @returns Промис, который разрешается массивом продуктов.\n     */\n    getAll() {\n        return this.get('/product').then(productsResponse => productsResponse.items);\n    }\n    /**\n     * Получить продукт по его ID.\n     * Выполняет GET-запрос по эндпоинту '/product/{id}'.\n     *\n     * @param id Идентификатор продукта.\n     * @returns Промис, который разрешается объектом продукта.\n     */\n    getById(id) {\n        return this.get(`/product/${id}`);\n    }\n}\n","import { EventNames } from \"../types\";\n/**\n * Сервис корзины (BasketService) управляет списком товаров в корзине.\n * Все операции обновления и получения данных корзины выполняются\n * через StatefulEventEmitterService и события.\n */\nexport class BasketService {\n    constructor(_statefulEventEmitterService) {\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n    }\n    /**\n     * Получить все товары в корзине.\n     * Возвращает пустой массив, если корзина пуста.\n     * @returns {Product[]} Массив товаров в корзине.\n     */\n    getAll() {\n        const productsInBasket = this._statefulEventEmitterService.getLast(EventNames.BASKET);\n        if (productsInBasket === undefined) {\n            return [];\n        }\n        return productsInBasket;\n    }\n    /**\n     * Получить товар из корзины по его ID.\n     * @param {string} id Идентификатор товара.\n     * @returns {Product | undefined} Найденный товар или undefined, если не найден.\n     */\n    getById(id) {\n        const productsInBasket = this.getAll();\n        const product = productsInBasket.find(product => product.id === id);\n        return product;\n    }\n    /**\n     * Получить общую стоимость товаров в корзине.\n     * Суммирует поле price у всех товаров, учитывая, что цена может отсутствовать.\n     * @returns {number} Общая стоимость корзины.\n     */\n    getPriceBasket() {\n        const productsInBasket = this.getAll();\n        const price = productsInBasket.reduce((acc, product) => acc + (product.price || 0), 0);\n        return price;\n    }\n    /**\n     * Добавить товар в корзину.\n     * Если товар уже есть, добавление игнорируется.\n     * После добавления эмитит событие с обновлённым списком товаров,\n     * а также специальное событие добавления по ID товара.\n     * @param {Product} product Добавляемый товар.\n     */\n    add(product) {\n        const productsInBasket = this.getAll();\n        if (productsInBasket.find((item) => item.id === product.id)) {\n            return;\n        }\n        this._statefulEventEmitterService.emit(`add-card-to-basket-${product.id}`, product);\n        this._statefulEventEmitterService.offAllByEventName(`remove-card-to-basket-${product.id}`);\n        this._statefulEventEmitterService.emit(EventNames.BASKET, [...productsInBasket, product]);\n    }\n    /**\n     * Удалить товар из корзины.\n     * После удаления эмитит событие с обновлённым списком товаров,\n     * а также специальное событие удаления по ID товара.\n     * @param {Product} product Удаляемый товар.\n     */\n    remove(product) {\n        const productsInBasket = this.getAll();\n        const filteredProductsInBasket = productsInBasket.filter(item => item.id !== product.id);\n        this._statefulEventEmitterService.offAllByEventName(`add-card-to-basket-${product.id}`);\n        this._statefulEventEmitterService.emit(`remove-card-to-basket-${product.id}`, product);\n        this._statefulEventEmitterService.emit(EventNames.BASKET, filteredProductsInBasket);\n    }\n    /**\n     * Подписаться на обновления корзины.\n     * Вызывается при каждом изменении списка товаров.\n     * @param {(products: Product[]) => void} callback Коллбек с массивом товаров.\n     */\n    onBasket(callback) {\n        this._statefulEventEmitterService.on(EventNames.BASKET, callback);\n    }\n    /**\n     * Отписаться от обновлений корзины.\n     * @param {(products: Product[]) => void} callback Ранее добавленный обработчик.\n     */\n    offBasket(callback) {\n        this._statefulEventEmitterService.off(EventNames.BASKET, callback);\n    }\n    /**\n     * Подписаться на добавление конкретного товара по ID.\n     * Вызывается при добавлении этого товара в корзину.\n     * @param {string} id ID товара.\n     * @param {(product: Product) => void} callback Коллбек с товаром.\n     */\n    onBasketById(id, callback) {\n        this._statefulEventEmitterService.on(`add-card-to-basket-${id}`, callback);\n    }\n    /**\n     * Отписаться от событий добавления конкретного товара по ID.\n     * Удаляет все обработчики для события добавления товара с данным ID.\n     * @param {string} id ID товара.\n     */\n    offBasketById(id) {\n        this._statefulEventEmitterService.offAllByEventName(`add-card-to-basket-${id}`);\n    }\n    /**\n     * Очистить корзину — удалить все товары.\n     * Эмитит событие с пустым списком.\n     */\n    clear() {\n        this._statefulEventEmitterService.emit(EventNames.BASKET, []);\n    }\n}\n","/**\n * Сервис для управления модальными окнами.\n *\n * Отвечает за открытие и закрытие модалок, подписку на события закрытия,\n * а также за реактивное поведение — позволяет отслеживать как обычные события закрытия,\n * так и закрытие компонента только в случае, если он был перезаписан (onCloseOnce).\n *\n * Обеспечивает единый способ управления модальными окнами, изолируя логику отображения от логики управления.\n */\nexport class ModalService {\n    constructor(_modalComponent) {\n        this._modalComponent = _modalComponent;\n        this._currentModal = null;\n        this._onCloseListeners = new Map();\n        this._onCloseOnceListeners = new Map();\n    }\n    open(content, renderArgs, options) {\n        var _a;\n        const element = this._resolveElement(content, renderArgs);\n        if (this._isComponent(content)) {\n            content.__modalElement = element;\n        }\n        if (this._currentModal && this._currentModal.element !== element) {\n            this._modalComponent.close();\n            this._currentModal = null;\n        }\n        if (((_a = this._currentModal) === null || _a === void 0 ? void 0 : _a.element) === element)\n            return;\n        const modal = {\n            element,\n            component: this._isComponent(content) ? content : undefined,\n            onClose: options === null || options === void 0 ? void 0 : options.onClose,\n        };\n        this._currentModal = modal;\n        this._modalComponent.open(element, {\n            onOpen: options === null || options === void 0 ? void 0 : options.onOpen,\n            onClose: () => {\n                var _a;\n                this._invokeAllCloseCallbacks(element);\n                this._handleModalClose(modal);\n                if (((_a = this._currentModal) === null || _a === void 0 ? void 0 : _a.element) === element) {\n                    this._currentModal = null;\n                }\n            }\n        });\n    }\n    close(content) {\n        if (!this._currentModal)\n            return;\n        let elementToClose;\n        if (this._isComponent(content)) {\n            const maybeRendered = content.__modalElement;\n            if (!maybeRendered) {\n                console.warn('[ModalService] Cannot close modal: component was not opened via ModalService');\n                return;\n            }\n            elementToClose = maybeRendered;\n        }\n        else {\n            elementToClose = content;\n        }\n        if (this._currentModal.element !== elementToClose) {\n            console.warn('[ModalService] Tried to close modal with element that is not currently open.');\n            return;\n        }\n        this._modalComponent.close();\n    }\n    onClose(target, callback) {\n        setTimeout(() => this._onClose(target, callback), 0);\n    }\n    _onClose(content, callback) {\n        let element;\n        if (this._isComponent(content)) {\n            const maybeRendered = content.__modalElement;\n            if (!maybeRendered) {\n                console.warn('[ModalService] Cannot register onClose: component was not rendered via open()');\n                return;\n            }\n            element = maybeRendered;\n        }\n        else {\n            element = content;\n        }\n        if (!this._onCloseListeners.has(element)) {\n            this._onCloseListeners.set(element, new Set());\n        }\n        this._onCloseListeners.get(element).add(callback);\n    }\n    onCloseOnce(target, callback) {\n        setTimeout(() => this._onCloseOnce(target, callback), 0);\n    }\n    _onCloseOnce(content, callback) {\n        let element;\n        if (this._isComponent(content)) {\n            const maybeRendered = content.__modalElement;\n            if (!maybeRendered) {\n                console.warn('[ModalService] Cannot register onCloseOnce: component was not rendered via open()');\n                return;\n            }\n            element = maybeRendered;\n        }\n        else {\n            element = content;\n        }\n        if (!this._onCloseOnceListeners.has(element)) {\n            this._onCloseOnceListeners.set(element, new Set());\n        }\n        this._onCloseOnceListeners.get(element).add(callback);\n    }\n    _invokeAllCloseCallbacks(element) {\n        const callbacks = this._onCloseListeners.get(element);\n        if (callbacks) {\n            for (const cb of callbacks) {\n                try {\n                    cb();\n                }\n                catch (err) {\n                    console.error('ModalService onClose error:', err);\n                }\n            }\n            this._onCloseListeners.delete(element);\n        }\n        if (!this._currentModal || this._currentModal.element !== element) {\n            const onceCallbacks = this._onCloseOnceListeners.get(element);\n            if (onceCallbacks) {\n                for (const cb of onceCallbacks) {\n                    try {\n                        cb();\n                    }\n                    catch (err) {\n                        console.error('ModalService onCloseOnce error:', err);\n                    }\n                }\n                this._onCloseOnceListeners.delete(element);\n            }\n        }\n    }\n    _handleModalClose(modal) {\n        var _a, _b, _c;\n        (_b = (_a = modal.component) === null || _a === void 0 ? void 0 : _a.onClose) === null || _b === void 0 ? void 0 : _b.call(_a);\n        (_c = modal.onClose) === null || _c === void 0 ? void 0 : _c.call(modal);\n    }\n    _resolveElement(content, renderArgs) {\n        if (this._isComponent(content)) {\n            if (Array.isArray(renderArgs)) {\n                return content.render(...renderArgs);\n            }\n            else if (renderArgs !== undefined) {\n                return content.render(renderArgs);\n            }\n            else {\n                return content.render();\n            }\n        }\n        else {\n            return content;\n        }\n    }\n    _isComponent(obj) {\n        return typeof obj === 'object' && typeof obj.render === 'function';\n    }\n}\n","import { EventNames } from \"../types\";\n/**\n * Сервис заказа (OrderService) реализует логику работы с заказом.\n * Взаимодействует со слоями через StatefulEventEmitterService,\n * используя пользовательские события.\n */\nexport class OrderService {\n    constructor(_statefulEventEmitterService, _validationOrderService, _apiOrderService, _basketService) {\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._validationOrderService = _validationOrderService;\n        this._apiOrderService = _apiOrderService;\n        this._basketService = _basketService;\n    }\n    /**\n     * Обновить email в заказе.\n     * @param {string} email Email пользователя.\n     */\n    updateEmail(email) {\n        this._emitOrderUpdate({ email });\n    }\n    /**\n     * Обновить телефон в заказе.\n     * @param {string} phone Телефон пользователя.\n     */\n    updatePhone(phone) {\n        this._emitOrderUpdate({ phone });\n    }\n    /**\n     * Установить адрес доставки.\n     * @param {string} address Адрес.\n     */\n    setAddress(address) {\n        this._emitOrderUpdate({ address });\n    }\n    /**\n     * Установить способ оплаты.\n     * @param {Payment} payment Объект оплаты.\n     */\n    setPaymentMethod(payment) {\n        this._emitOrderUpdate({ payment });\n    }\n    /**\n     * Очистить текущее состояние заказа.\n     */\n    clear() {\n        this._statefulEventEmitterService.clearLast(EventNames.ORDER_CHANGED);\n    }\n    /**\n     * Подписаться на изменение состояния формы.\n     * Вызывается при каждом изменении заказа,\n     * валидирует указанные поля и возвращает результат.\n     * @param {(keyof Order)[]} fields Массив ключей полей для валидации.\n     * @param {(state: {isValid: boolean, errors: Partial<Record<keyof Order, string>>}) => void} callback Коллбек с результатом валидации.\n     * @returns {() => void} Функция для отписки.\n     */\n    onFormStateChange(fields, callback) {\n        let hasChanged = false;\n        const handler = (order) => {\n            // Не вызываем ничего, пока не было первых данных\n            const hasAnyField = fields.some((field) => order[field] !== undefined && order[field] !== '');\n            if (!hasAnyField && !hasChanged)\n                return;\n            hasChanged = true;\n            const result = this._validationOrderService.validate(order, fields);\n            callback(result);\n        };\n        this._statefulEventEmitterService.on(EventNames.ORDER_CHANGED, handler);\n        return () => {\n            this._statefulEventEmitterService.off(EventNames.ORDER_CHANGED, handler);\n        };\n    }\n    /**\n     * Отправить заказ.\n     * Валидирует обязательные поля,\n     * если ошибки — выводит alert, иначе отправляет данные через ApiOrderService.\n     */\n    submit() {\n        const order = Object.assign({}, this._getCurrentOrder());\n        order.items = this._basketService.getAll().map(p => p.id);\n        order.total = this._basketService.getPriceBasket();\n        const validation = this._validationOrderService.validate(order, [\n            'email',\n            'phone',\n            'address'\n        ]);\n        if (!validation.isValid) {\n            alert('Форма содержит ошибки');\n            console.warn('Ошибки при сабмите:', validation.errors);\n            return;\n        }\n        this._apiOrderService.send(order)\n            .then((res) => {\n            this._statefulEventEmitterService.emit(EventNames.OPEN_SUCCESS_ORDER, res);\n        })\n            .catch(err => {\n            console.error(err);\n            alert('Ошибка при отправке заказа');\n        });\n    }\n    /**\n     * Приватный метод — эмитит обновление заказа,\n     * объединяя частичные данные с текущим состоянием.\n     * @param {Partial<Order>} partialOrder Частичные данные заказа.\n     * @private\n     */\n    _emitOrderUpdate(partialOrder) {\n        const currentOrder = this._getCurrentOrder();\n        const newOrder = Object.assign(Object.assign({}, currentOrder), partialOrder);\n        this._statefulEventEmitterService.emit(EventNames.ORDER_CHANGED, newOrder);\n    }\n    /**\n     * Получить текущее состояние заказа из последнего события.\n     * @returns {Partial<Order>} Текущий заказ.\n     * @private\n     */\n    _getCurrentOrder() {\n        var _a;\n        return (_a = this._statefulEventEmitterService.getLast(EventNames.ORDER_CHANGED)) !== null && _a !== void 0 ? _a : {};\n    }\n}\n","import { EventNames } from \"../types\";\n/**\n * Сервис модели для работы с продуктами.\n *\n * Основные обязанности:\n * - Загружает данные о продуктах с API.\n * - Хранит последнее состояние полученных данных.\n * - Рассылает изменения подписчикам через событийную шину (`StatefulEventEmitterService`).\n * - Позволяет реактивно или лениво подписаться на данные с возможностью отмены ожидания.\n *\n * Архитектурная роль:\n * - Является моделью данных для продуктов в терминах паттерна MV*.\n * - Представление (например, компонент галереи) не взаимодействует напрямую с API,\n *   а обращается к сервису модели, получая данные через `getAll()`.\n * - Это обеспечивает разделение ответственности: данные загружаются и управляются здесь,\n *   а представление только подписывается или ждёт результат.\n *\n * Преимущества:\n * - Централизованное хранение и распространение состояния.\n * - Унифицированный интерфейс подписки и отписки.\n * - Готов к расширению: можно добавить фильтрацию, кеширование, ошибки и т. д.\n */\nexport class ProductsService {\n    constructor(_apiProductsService, _statefulEventEmitterService) {\n        this._apiProductsService = _apiProductsService;\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n    }\n    /**\n     * Загружает список продуктов с API, эмитит событие об обновлении продуктов и подписывается на изменения.\n     *\n     * @param callback Функция, которая вызывается при каждом обновлении списка продуктов.\n     * @param onDestroy Опциональная функция, принимающая колбэк для отписки от события.\n     *                  Колбэк нужно вызвать, чтобы прекратить подписку (например, при размонтировании компонента).\n     */\n    getAll(callback, onDestroy) {\n        this._apiProductsService.getAll()\n            .then(products => {\n            // Сразу эмитируем полученные продукты\n            this._update(products);\n            const _callback = (products) => {\n                callback(products);\n            };\n            // Подписываемся на обновления через callback\n            this._statefulEventEmitterService.on(EventNames.PRODUCTS_CHANGED, _callback);\n            // Позволяем внешнему коду отписаться при необходимости\n            if (onDestroy) {\n                onDestroy(() => {\n                    this._statefulEventEmitterService.off(EventNames.PRODUCTS_CHANGED, _callback);\n                });\n            }\n        })\n            .catch(error => {\n            console.error('Ошибка при попытке загрузить список товаров', error);\n        });\n    }\n    /**\n     * Эмитит событие об обновлении продуктов\n     * @param products Список продуктов\n     */\n    _update(products) {\n        this._statefulEventEmitterService.emit(EventNames.PRODUCTS_CHANGED, products);\n    }\n}\n","import { EventEmitter } from \"../components/base/events\";\n/**\n * StatefulEventEmitterService — расширение EventEmitter,\n * которое сохраняет последнее значение каждого события.\n * При подписке сразу вызывает обработчик с последним сохранённым значением.\n */\nexport class StatefulEventEmitterService extends EventEmitter {\n    constructor() {\n        super(...arguments);\n        this._lastValues = new Map();\n    }\n    /**\n     * Переопределение emit для сохранения последнего значения события.\n     * @param eventName Имя события.\n     * @param data Данные события.\n     */\n    emit(eventName, data) {\n        this._lastValues.set(eventName, data);\n        super.emit(eventName, data);\n    }\n    /**\n     * Переопределение on для вызова обработчика сразу с последним значением.\n     * @param eventName Имя события.\n     * @param callback Обработчик события.\n     */\n    on(eventName, callback) {\n        super.on(eventName, callback);\n        if (typeof eventName === 'string' && this._lastValues.has(eventName)) {\n            const lastValue = this._lastValues.get(eventName);\n            callback(lastValue);\n        }\n    }\n    /**\n     * Удалить всех подписчиков указанного события и сбросить последнее значение.\n     * @param eventName Имя события.\n     */\n    offAllByEventName(eventName) {\n        this._events.delete(eventName);\n        if (typeof eventName === 'string') {\n            this._lastValues.delete(eventName);\n        }\n    }\n    /**\n     * Получить последнее значение события.\n     * @param eventName Имя события.\n     * @returns Последние данные события, либо undefined.\n     */\n    getLast(eventName) {\n        return this._lastValues.get(eventName);\n    }\n    /**\n     * Очистить сохранённые значения события или всех событий.\n     * @param eventName Имя события, если нужно очистить конкретное.\n     */\n    clearLast(eventName) {\n        if (eventName) {\n            this._lastValues.delete(eventName);\n        }\n        else {\n            this._lastValues.clear();\n        }\n    }\n}\n","/**\n * Брокер событий, классическая реализация\n * В расширенных вариантах есть возможность подписаться на все события\n * или слушать события по шаблону например\n */\nexport class EventEmitter {\n    constructor() {\n        this._events = new Map();\n    }\n    /**\n     * Установить обработчик на событие\n     */\n    on(eventName, callback) {\n        var _a;\n        if (!this._events.has(eventName)) {\n            this._events.set(eventName, new Set());\n        }\n        (_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.add(callback);\n    }\n    /**\n     * Снять обработчик с события\n     */\n    off(eventName, callback) {\n        var _a;\n        if (this._events.has(eventName)) {\n            this._events.get(eventName).delete(callback);\n            if (((_a = this._events.get(eventName)) === null || _a === void 0 ? void 0 : _a.size) === 0) {\n                this._events.delete(eventName);\n            }\n        }\n    }\n    /**\n     * Инициировать событие с данными\n     */\n    emit(eventName, data) {\n        this._events.forEach((subscribers, name) => {\n            if (name === '*')\n                subscribers.forEach(callback => callback({\n                    eventName,\n                    data\n                }));\n            if (name instanceof RegExp && name.test(eventName) || name === eventName) {\n                subscribers.forEach(callback => callback(data));\n            }\n        });\n    }\n    /**\n     * Слушать все события\n     */\n    onAll(callback) {\n        this.on(\"*\", callback);\n    }\n    /**\n     * Сбросить все обработчики\n     */\n    offAll() {\n        this._events = new Map();\n    }\n    /**\n     * Сделать коллбек триггер, генерирующий событие при вызове\n     */\n    trigger(eventName, context) {\n        return (event = {}) => {\n            this.emit(eventName, Object.assign(Object.assign({}, (event || {})), (context || {})));\n        };\n    }\n}\n","/**\n * Сервис валидации данных заказа.\n * Позволяет проверить указанные поля объекта заказа и вернуть ошибки.\n */\nexport class ValidationOrderService {\n    /**\n     * Проверяет валидность указанных полей заказа.\n     * Для каждого поля вызывает приватный метод проверки.\n     *\n     * @param order Объект с данными заказа (частичный).\n     * @param fields Массив ключей полей, которые нужно валидировать.\n     * @returns Объект с результатом валидации:\n     * - isValid — true, если ошибок нет.\n     * - errors — объект с сообщениями ошибок по каждому полю.\n     */\n    validate(order, fields) {\n        const errors = {};\n        for (const field of fields) {\n            const error = this._validateField(field, order[field]);\n            if (error)\n                errors[field] = error;\n        }\n        const isValid = Object.keys(errors).length === 0;\n        return { isValid, errors };\n    }\n    /**\n     * Приватный метод проверки конкретного поля заказа.\n     * Возвращает строку с ошибкой или null, если ошибок нет.\n     *\n     * @param field Имя поля.\n     * @param value Значение поля.\n     * @returns Сообщение об ошибке или null.\n     * @private\n     */\n    _validateField(field, value) {\n        switch (field) {\n            case 'email':\n                if (!value)\n                    return 'Необходимо указать email';\n                return null;\n            case 'phone':\n                if (!value)\n                    return 'Необходимо указать телефон';\n                return null;\n            case 'address':\n                if (!value)\n                    return 'Необходимо указать адрес';\n                return null;\n            default:\n                return null;\n        }\n    }\n}\n","import { categoryCompareObj, CDN_URL } from \"./constants\";\nexport function pascalToKebab(value) {\n    return value.replace(/([a-z0–9])([A-Z])/g, \"$1-$2\").toLowerCase();\n}\nexport function isSelector(x) {\n    return (typeof x === \"string\") && x.length > 1;\n}\nexport function isEmpty(value) {\n    return value === null || value === undefined;\n}\nexport function ensureAllElements(selectorElement, context = document) {\n    if (isSelector(selectorElement)) {\n        return Array.from(context.querySelectorAll(selectorElement));\n    }\n    if (selectorElement instanceof NodeList) {\n        return Array.from(selectorElement);\n    }\n    if (Array.isArray(selectorElement)) {\n        return selectorElement;\n    }\n    throw new Error(`Unknown selector element`);\n}\nexport function ensureElement(selectorElement, context) {\n    if (isSelector(selectorElement)) {\n        const elements = ensureAllElements(selectorElement, context);\n        if (elements.length > 1) {\n            console.warn(`selector ${selectorElement} return more then one element`);\n        }\n        if (elements.length === 0) {\n            throw new Error(`selector ${selectorElement} return nothing`);\n        }\n        return elements.pop();\n    }\n    if (selectorElement instanceof HTMLElement) {\n        return selectorElement;\n    }\n    throw new Error('Unknown selector element');\n}\nexport function cloneTemplate(query) {\n    const template = ensureElement(query);\n    return template.content.firstElementChild.cloneNode(true);\n}\nexport function bem(block, element, modifier) {\n    let name = block;\n    if (element)\n        name += `__${element}`;\n    if (modifier)\n        name += `_${modifier}`;\n    return {\n        name,\n        class: `.${name}`\n    };\n}\nexport function getObjectProperties(obj, filter) {\n    return Object.entries(Object.getOwnPropertyDescriptors(Object.getPrototypeOf(obj)))\n        .filter(([name, prop]) => filter ? filter(name, prop) : (name !== 'constructor'))\n        .map(([name, prop]) => name);\n}\n/**\n * Устанавливает dataset атрибуты элемента\n */\nexport function setElementData(el, data) {\n    for (const key in data) {\n        el.dataset[key] = String(data[key]);\n    }\n}\n/**\n * Получает типизированные данные из dataset атрибутов элемента\n */\nexport function getElementData(el, scheme) {\n    const data = {};\n    for (const key in el.dataset) {\n        data[key] = scheme[key](el.dataset[key]);\n    }\n    return data;\n}\n/**\n * Проверка на простой объект\n */\nexport function isPlainObject(obj) {\n    const prototype = Object.getPrototypeOf(obj);\n    return prototype === Object.getPrototypeOf({}) ||\n        prototype === null;\n}\nexport function isBoolean(v) {\n    return typeof v === 'boolean';\n}\n/**\n * Фабрика DOM-элементов в простейшей реализации\n * здесь не учтено много факторов\n * в интернет можно найти более полные реализации\n */\nexport function createElement(tagName, props, children) {\n    const element = document.createElement(tagName);\n    if (props) {\n        for (const key in props) {\n            const value = props[key];\n            if (isPlainObject(value) && key === 'dataset') {\n                setElementData(element, value);\n            }\n            else {\n                // @ts-expect-error fix indexing later\n                element[key] = isBoolean(value) ? value : String(value);\n            }\n        }\n    }\n    if (children) {\n        for (const child of Array.isArray(children) ? children : [children]) {\n            element.append(child);\n        }\n    }\n    return element;\n}\nexport function getProductPriceText(price) {\n    return price === null ? 'Бесценно' : `${price} синапсов`;\n}\nexport function getProductPrice(price) {\n    return price === null ? 0 : price;\n}\nexport function getProductCategoryCssClass(category) {\n    for (const categoryItem in categoryCompareObj) {\n        if (categoryItem === category)\n            return `card__category_${categoryCompareObj[category]}`;\n    }\n    return `card__category_${categoryCompareObj['другое']}`;\n}\nexport function getCdnImgUrl(img) {\n    return `${CDN_URL}/${img}`;\n}\n","import { cloneTemplate, getProductPriceText } from \"../../utils/utils\";\n/**\n * Компонент карточки товара в корзине.\n *\n * Отвечает за создание HTML-элемента списка товара в корзине,\n * заполнение его данными и обработку удаления товара из корзины.\n */\nexport class BasketCardComponent {\n    constructor(_basketService) {\n        this._basketService = _basketService;\n        /**\n         * Обработчик удаления товара из корзины.\n         * Вызывает метод сервиса корзины для удаления переданного товара.\n         *\n         * @param product - товар, который нужно удалить из корзины\n         */\n        this._deleteProduct = (product) => {\n            this._basketService.remove(product);\n        };\n        this._basketCardTemplate = document.querySelector('#card-basket');\n    }\n    /**\n     * Создаёт DOM-элемент для товара в корзине на основе шаблона,\n     * заполняет элемент информацией о товаре и индексом,\n     * навешивает обработчик для кнопки удаления товара.\n     *\n     * @param product - объект товара для отображения\n     * @param index - индекс товара в списке корзины (для отображения порядкового номера)\n     * @returns HTMLLIElement - готовый элемент товара в корзине\n     */\n    createElement(product, index) {\n        const basketCardElement = cloneTemplate(this._basketCardTemplate);\n        const basketItemIndexElemet = basketCardElement.querySelector('.basket__item-index');\n        const basketItemTitleElement = basketCardElement.querySelector('.card__title');\n        const basketItemPriceElement = basketCardElement.querySelector('.card__price');\n        const basketItemDeleteBtnElement = basketCardElement.querySelector('.basket__item-delete');\n        basketItemIndexElemet.textContent = `${index + 1}`;\n        basketItemTitleElement.textContent = product.title;\n        basketItemPriceElement.textContent = getProductPriceText(product.price);\n        basketItemDeleteBtnElement.addEventListener('click', () => this._deleteProduct(product));\n        return basketCardElement;\n    }\n}\n","import { EventNames } from \"../../types\";\n/**\n * Компонент для отображения состояния корзины в шапке сайта.\n *\n * Отвечает за отображение количества товаров в корзине и\n * обработку клика по иконке корзины для открытия корзины.\n */\nexport class BasketHeaderComponent {\n    constructor(_statefulEventEmitterService) {\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._headerBasketElement = document.querySelector('.header__basket');\n        this._counterElement = this._headerBasketElement.querySelector('.header__basket-counter');\n        this._initEventListeners();\n    }\n    /**\n     * Обновляет отображаемое количество товаров в корзине.\n     *\n     * @param quantity - количество товаров для отображения\n     */\n    setQuantityProductsInBasket(quantity) {\n        this._counterElement.textContent = String(quantity);\n    }\n    /**\n     * Инициализирует обработчики событий компонента,\n     * в частности навешивает обработчик клика на иконку корзины,\n     * который инициирует событие открытия корзины через EventEmitter.\n     */\n    _initEventListeners() {\n        this._headerBasketElement.addEventListener('click', (event) => {\n            this._statefulEventEmitterService.emit(EventNames.OPEN_CART);\n        });\n    }\n}\n","import { EventNames } from \"../../types\";\nimport { cloneTemplate } from \"../../utils/utils\";\n/**\n * Компонент представления корзины, реализующий слой **View** в архитектуре MVVM (или MVP).\n *\n * Отвечает исключительно за отображение содержимого корзины и взаимодействие с DOM-элементами,\n * не содержит бизнес-логики, не хранит состояния и не взаимодействует напрямую ни с моделью,\n * ни с контроллером. Получает данные и инструкции исключительно через события.\n *\n *  Архитектурные особенности:\n *\n * - Использует `StatefulEventEmitterService` (реализация паттерна **EventEmitter**) для подписки на события и инициации пользовательских событий.\n * - Не создает экземпляры модели или контроллера, не зависит от них напрямую.\n * - Не валидирует данные, не изменяет модель, а только реагирует на изменения и инициирует переходы состояний.\n * - Подписывается на события изменения состояния корзины (`EventNames.BASKET`) и перерисовывает DOM при каждом обновлении.\n * - Вызывает событие `EventNames.OPEN_ORDER_ADDRESS_PAYMENT` при нажатии на кнопку оформления заказа, не передавая никаких данных напрямую.\n * - Отписывается от событий при закрытии модального окна (через this._modalService.onClose), избегая утечек памяти.\n *\n */\nexport class BasketComponent {\n    constructor(_basketService, _basketCardComponent, _statefulEventEmitterService, _modalService) {\n        this._basketService = _basketService;\n        this._basketCardComponent = _basketCardComponent;\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._modalService = _modalService;\n        this._basketTemplate = document.querySelector('#basket');\n    }\n    /**\n     * Рендерит корзину, создавая DOM-элемент на основе шаблона и текущего состояния корзины.\n     * Устанавливает обработчики кликов и подписки на изменения корзины.\n     *\n     * @returns HTMLElement, готовый к вставке в DOM.\n     */\n    render() {\n        // здесь не происходит поиск в корневом дереве. происходит получение старого элемента по ссылке и каждый раз происходит поиск внутри клонированного элемента. не происходит поиск в корневом дереве. нельзя записывать элементы в this, так как это по функционалу класса метод render может вызываться сколько угодно раз и прошлые клонированные элементы в this не будут хранить реальное состояние\n        const basketElement = cloneTemplate(this._basketTemplate);\n        const listElement = basketElement.querySelector('.basket__list');\n        const priceElement = basketElement.querySelector('.basket__price');\n        const submitBtnElement = basketElement.querySelector('.basket__button');\n        const getPriceBasket = () => this._basketService.getPriceBasket();\n        const renderAll = () => {\n            listElement.textContent = '';\n            this._renderActionsInfo(submitBtnElement, priceElement, listElement, getPriceBasket());\n            this._appendBasketElements(listElement, this._basketService.getAll());\n        };\n        renderAll();\n        const onBasketCallback = () => renderAll();\n        submitBtnElement.addEventListener('click', () => {\n            this._statefulEventEmitterService.emit(EventNames.OPEN_ORDER_ADDRESS_PAYMENT);\n            this._basketService.offBasket(onBasketCallback);\n        });\n        this._basketService.onBasket(onBasketCallback);\n        // Удаление подписки при закрытии\n        this._modalService.onClose(this, () => {\n            this._basketService.offBasket(onBasketCallback);\n        });\n        return basketElement;\n    }\n    /**\n     * Вспомогательный метод для добавления DOM-элементов товаров в список корзины.\n     *\n     * @param listElement - контейнер списка корзины\n     * @param products - массив продуктов, которые необходимо отобразить\n     */\n    _appendBasketElements(listElement, products) {\n        for (let i = 0; i < products.length; i++) {\n            const basketCardElement = this._basketCardComponent.createElement(products[i], i);\n            listElement.appendChild(basketCardElement);\n        }\n    }\n    /**\n     * Вспомогательный метод для обновления информации о стоимости корзины,\n     * а также управления состоянием кнопки оформления и отображением пустой корзины.\n     *\n     * @param submitBtnElement - кнопка оформления заказа\n     * @param priceElement - элемент для отображения общей стоимости\n     * @param listElement - контейнер списка корзины\n     * @param priceBasket - сумма стоимости товаров в корзине\n     */\n    _renderActionsInfo(submitBtnElement, priceElement, listElement, priceBasket) {\n        if (priceBasket === 0)\n            submitBtnElement.disabled = true;\n        priceElement.textContent = `${priceBasket} синапсов`;\n        if (priceBasket === 0) {\n            const listItemEmptyElement = document.createElement('div');\n            listItemEmptyElement.classList.add('basket__list-empty');\n            listItemEmptyElement.textContent = 'Корзина пуста';\n            listElement.appendChild(listItemEmptyElement);\n        }\n    }\n}\n","import { EventNames } from \"../../types\";\nimport { cloneTemplate, getCdnImgUrl, getProductCategoryCssClass, getProductPriceText } from \"../../utils/utils\";\n/**\n * Компонент карточки продукта в галерее.\n *\n * Отвечает за создание DOM-элемента карточки продукта,\n * заполнение его данными продукта и генерацию события при клике.\n */\nexport class CardCatalogComponent {\n    constructor(_statefulEventEmitterService) {\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        /**\n         * Обработчик клика по карточке, который инициирует событие открытия полной информации о продукте.\n         *\n         * @param product - продукт, связанный с данной карточкой\n         */\n        this._cardCatalogClick = (product) => {\n            this._statefulEventEmitterService.emit(EventNames.OPEN_CARD_FULL, product);\n        };\n        this._cardCatalogTemplateElement = document.querySelector('#card-catalog');\n    }\n    /**\n     * Создаёт DOM-элемент карточки продукта на основе шаблона,\n     * заполняет его данными и навешивает обработчик клика.\n     *\n     * @param product - объект продукта для отображения\n     * @returns HTMLElement - готовый элемент карточки продукта\n     */\n    render(product) {\n        // здесь не происходит поиск в корневом дереве. происходит получение старого элемента по ссылке и каждый раз происходит поиск внутри клонированного элемента. не происходит поиск в корневом дереве. нельзя записывать элементы в this, так как это по функционалу класса метод render может вызываться сколько угодно раз и прошлые клонированные элементы в this не будут хранить реальное состояние\n        const cardCatalogElement = cloneTemplate(this._cardCatalogTemplateElement);\n        const cardCategory = cardCatalogElement.querySelector('.card__category');\n        const cardTitle = cardCatalogElement.querySelector('.card__title');\n        const cardImg = cardCatalogElement.querySelector('.card__image');\n        const cardPrice = cardCatalogElement.querySelector('.card__price');\n        cardCategory.textContent = product.category;\n        cardCategory.classList.remove('card__category_soft');\n        cardCategory.classList.add(getProductCategoryCssClass(product.category));\n        cardTitle.textContent = product.title;\n        cardImg.alt = product.title;\n        cardImg.src = getCdnImgUrl(product.image);\n        cardPrice.textContent = getProductPriceText(product.price);\n        cardCatalogElement.addEventListener('click', () => this._cardCatalogClick(product));\n        return cardCatalogElement;\n    }\n}\n","import { cloneTemplate, getCdnImgUrl, getProductCategoryCssClass, getProductPriceText } from \"../../utils/utils\";\n/**\n * Компонент полной карточки товара с подробной информацией.\n *\n * Основные обязанности:\n * - Отображать данные товара: категория, название, изображение и цену.\n * - Управлять состоянием кнопки добавления/удаления товара из корзины,\n *   учитывая, доступен ли товар (цена не null) и находится ли он уже в корзине.\n * - Обрабатывать клики по кнопке для добавления или удаления товара из корзины,\n *   синхронизируя состояние с BasketService.\n */\nexport class CardFullComponent {\n    constructor(_basketService) {\n        this._basketService = _basketService;\n        this._template = document.querySelector('#card-preview');\n    }\n    render(product) {\n        // здесь не происходит поиск в корневом дереве. происходит получение старого элемента по ссылке и каждый раз происходит поиск внутри клонированного элемента. не происходит поиск в корневом дереве. нельзя записывать элементы в this, так как это по функционалу класса метод render может вызываться сколько угодно раз и прошлые клонированные элементы в this не будут хранить реальное состояние\n        const element = cloneTemplate(this._template);\n        const category = element.querySelector('.card__category');\n        const title = element.querySelector('.card__title');\n        const img = element.querySelector('.card__image');\n        const price = element.querySelector('.card__price');\n        const btn = element.querySelector('.card__button');\n        category.textContent = product.category;\n        category.classList.remove('card__category_soft');\n        category.classList.add(getProductCategoryCssClass(product.category));\n        title.textContent = product.title;\n        img.alt = product.title;\n        img.src = getCdnImgUrl(product.image);\n        price.textContent = getProductPriceText(product.price);\n        const isInBasket = !!this._basketService.getById(product.id);\n        if (product.price === null) {\n            btn.disabled = true;\n            btn.textContent = 'Недоступно';\n        }\n        else {\n            btn.textContent = isInBasket ? 'Удалить из корзины' : 'Купить';\n        }\n        btn.addEventListener('click', () => this._handleBtnClick(product, btn));\n        return element;\n    }\n    _handleBtnClick(product, btn) {\n        const isInBasket = !!this._basketService.getById(product.id);\n        if (isInBasket) {\n            this._basketService.remove(product);\n            btn.textContent = 'Купить';\n        }\n        else {\n            this._basketService.add(product);\n            btn.textContent = 'Удалить из корзины';\n        }\n    }\n}\n","import { cloneTemplate } from \"../../utils/utils\";\n/**\n * Компонент формы ввода Email и телефона для оформления заказа.\n *\n * Основные принципы:\n * - Обновление данных в модели происходит непосредственно при событии `input`,\n *   то есть при каждом изменении пользовательского ввода.\n * - Валидация данных выполняется в модели (OrderService) и ValidationOrderService,\n *   представление (этот компонент) **не выполняет валидацию и не хранит данные формы**.\n * - Представление только отображает текущее состояние модели,\n *   включая ошибки валидации, полученные через подписку на события.\n * - Кнопка отправки формы блокируется/разблокируется в зависимости от валидности данных в модели.\n * - Передача данных между слоем представления и моделью(OrderService) происходит через StatefulEventEmitterService, который в свою очередь наследуется от базового EventEmitter, что обеспечивает реактивность и разделение ответственности.\n *\n * Это гарантирует, что форма заказа никак не зависит от корзины,\n * и не хранит собственное состояние — все данные централизованно управляются через OrderService\n */\nexport class EmailPhoneOrderComponent {\n    constructor(_orderService, _modalService, _basketService) {\n        this._orderService = _orderService;\n        this._modalService = _modalService;\n        this._basketService = _basketService;\n        this._template = document.querySelector('#contacts');\n    }\n    render() {\n        // здесь не происходит поиск в корневом дереве. происходит получение старого элемента по ссылке и каждый раз происходит поиск внутри клонированного элемента. не происходит поиск в корневом дереве. нельзя записывать элементы в this, так как это по функционалу класса метод render может вызываться сколько угодно раз и прошлые клонированные элементы в this не будут хранить реальное состояние\n        const element = cloneTemplate(this._template);\n        const inputEmail = element.querySelector('input[name=\"email\"]');\n        const inputPhone = element.querySelector('input[name=\"phone\"]');\n        const submitButton = element.querySelector('button[type=\"submit\"]');\n        const formErrors = element.querySelector('.form__errors');\n        const emailErrorEl = document.createElement('span');\n        const phoneErrorEl = document.createElement('span');\n        formErrors.append(emailErrorEl, phoneErrorEl);\n        inputEmail.addEventListener('input', () => {\n            this._orderService.updateEmail(inputEmail.value);\n        });\n        inputPhone.addEventListener('input', () => {\n            this._orderService.updatePhone(inputPhone.value);\n        });\n        const subsFormState = this._orderService.onFormStateChange(['email', 'phone'], (state) => {\n            var _a, _b;\n            emailErrorEl.innerHTML = `${(_a = state.errors.email) !== null && _a !== void 0 ? _a : ''}<br>`;\n            phoneErrorEl.innerHTML = (_b = state.errors.phone) !== null && _b !== void 0 ? _b : '';\n            submitButton.disabled = !state.isValid;\n        });\n        element.addEventListener('submit', (event) => {\n            event.preventDefault();\n            this._orderService.submit();\n        });\n        this._modalService.onClose(this, () => {\n            subsFormState();\n            this._orderService.clear();\n            this._basketService.clear();\n        });\n        return element;\n    }\n}\n","/**\n * Компонент галереи, отвечающий за отображение списка продуктов.\n *\n * Основная задача:\n * - Рендерить список продуктов, создавая для каждого карточку с помощью CardCatalogComponent\n *   и добавляя их в DOM-элемент галереи.\n */\nexport class GalleryComponent {\n    constructor(_cardCatalogComponent) {\n        this._cardCatalogComponent = _cardCatalogComponent;\n        this._galleryElement = document.querySelector('.gallery');\n    }\n    /**\n     * Создаёт и добавляет в галерею карточки продуктов.\n     *\n     * @param products - массив продуктов для отображения в галерее\n     */\n    renderProductList(products) {\n        this._galleryElement.innerHTML = '';\n        for (const product of products) {\n            const cardElement = this._cardCatalogComponent.render(product);\n            this._galleryElement.append(cardElement);\n        }\n    }\n}\n","/**\n * Компонент модального окна, отвечающий за отображение, открытие и закрытие модалки.\n *\n * Основные задачи:\n * - Вставка переданного контента в модальное окно.\n * - Управление видимостью модального окна и блокировка скролла страницы при открытии.\n * - Обработка событий закрытия: клик по крестику, клик вне содержимого (оверлей) и клавиша Escape.\n * - Подписка и отписка от событий при открытии и закрытии модального окна.\n */\nexport class ModalComponent {\n    constructor() {\n        this._openCallback = () => { };\n        this._closeCallback = () => { };\n        this._isOpen = false;\n        this._pointerDownInsideModal = false;\n        this._pointerUpInsideModal = false;\n        /**\n         * Закрывает модальное окно, снимает блокировку скролла и вызывает колбэк onClose.\n         */\n        this.close = () => {\n            if (!this._isOpen)\n                return;\n            this._modalContainerElement.classList.remove('modal_active');\n            document.body.classList.remove('page_overflow-hidden');\n            this._isOpen = false;\n            this._destroyEventListeners();\n            this._closeCallback();\n        };\n        /**\n         * Обработчик события pointerdown внутри модального окна,\n         * отслеживает попадание клика внутрь контента модалки.\n         * @param event - событие указателя\n         * @private\n         */\n        this._onPointerDown = (event) => {\n            this._pointerDownInsideModal = this._modalContentElement.contains(event.target);\n        };\n        /**\n         * Обработчик события pointerup внутри модального окна,\n         * отслеживает отпускание клика внутри модалки.\n         * @param event - событие указателя\n         * @private\n         */\n        this._onPointerUp = (event) => {\n            this._pointerUpInsideModal = this._modalContentElement.contains(event.target);\n        };\n        /**\n         * Обработчик клика по оверлею (фону модального окна).\n         * Закрывает модалку, если клик был именно по оверлею\n         * и pointerdown и pointerup не были внутри контента.\n         * @param event - событие мыши\n         * @private\n         */\n        this._closeByOverlay = (event) => {\n            // Клик по оверлею\n            if (event.target === this._modalContainerElement) {\n                // Закрываем только если pointerdown и pointerup были вне модалки\n                if (!this._pointerDownInsideModal && !this._pointerUpInsideModal) {\n                    this.close();\n                }\n            }\n        };\n        /**\n         * Обработчик события нажатия клавиши Escape для закрытия модального окна.\n         * @param event - событие клавиатуры\n         * @private\n         */\n        this._closeByEsc = (event) => {\n            if (event.key === 'Escape') {\n                this.close();\n            }\n        };\n        this._modalContainerElement = document.querySelector('#modal-container');\n        this._modalContentElement = this._modalContainerElement.querySelector('.modal__content');\n        this._modalCloseElement = this._modalContainerElement.querySelector('.modal__close');\n    }\n    /**\n     * Открывает модальное окно с указанным содержимым.\n     * Если модалка уже открыта, просто обновляет контент.\n     *\n     * @param content - DOM элемент, который будет вставлен в тело модального окна.\n     * @param options - Опциональные колбэки для событий открытия и закрытия.\n     */\n    open(content, options) {\n        var _a, _b;\n        const isAlreadyOpen = this._isOpen;\n        this._modalContentElement.textContent = '';\n        this._modalContentElement.appendChild(content);\n        this._openCallback = (_a = options === null || options === void 0 ? void 0 : options.onOpen) !== null && _a !== void 0 ? _a : (() => { });\n        this._closeCallback = (_b = options === null || options === void 0 ? void 0 : options.onClose) !== null && _b !== void 0 ? _b : (() => { });\n        if (!isAlreadyOpen) {\n            this._initEventListeners();\n            this._modalContainerElement.classList.add('modal_active');\n            document.body.classList.add('page_overflow-hidden');\n            this._isOpen = true;\n            this._openCallback();\n        }\n    }\n    /**\n     * Инициализирует обработчики событий для управления закрытием модального окна:\n     * клики по крестику, оверлею, а также клавиша Escape.\n     * @private\n     */\n    _initEventListeners() {\n        this._modalCloseElement.addEventListener('click', this.close);\n        this._modalContainerElement.addEventListener('pointerdown', this._onPointerDown);\n        this._modalContainerElement.addEventListener('pointerup', this._onPointerUp);\n        this._modalContainerElement.addEventListener('click', this._closeByOverlay);\n        window.addEventListener('keydown', this._closeByEsc);\n    }\n    /**\n     * Удаляет ранее добавленные обработчики событий.\n     * @private\n     */\n    _destroyEventListeners() {\n        this._modalCloseElement.removeEventListener('click', this.close);\n        this._modalContainerElement.removeEventListener('pointerdown', this._onPointerDown);\n        this._modalContainerElement.removeEventListener('pointerup', this._onPointerUp);\n        this._modalContainerElement.removeEventListener('click', this._closeByOverlay);\n        window.removeEventListener('keydown', this._closeByEsc);\n    }\n}\n","import { EventNames } from \"../../types\";\nimport { cloneTemplate } from \"../../utils/utils\";\n/**\n * Компонент формы ввода адреса и выбора способа оплаты для оформления заказа.\n *\n * Основные принципы:\n * - Обновление данных модели происходит немедленно при событии `input` и переключении оплаты,\n *   то есть при каждом изменении пользовательского ввода или выборе метода оплаты.\n * - Валидация данных производится исключительно в модели (OrderService),\n *   этот компонент **не выполняет валидацию и не хранит состояние формы**.\n * - Представление отражает текущее состояние модели, включая ошибки валидации,\n *   которые поступают через подписку на события.\n * - Кнопка отправки блокируется или активируется в зависимости от валидности данных,\n *   предоставляемой моделью.\n * - Передача данных между представлением и моделью (OrderService) происходит через\n *   StatefulEventEmitterService, который наследует функциональность базового EventEmitter,\n *   что обеспечивает реактивность и чёткое разделение ответственности между слоями.\n *\n * Архитектура гарантирует, что форма заказа не зависит от корзины и не хранит локальное состояние —\n * все данные централизованно управляются через OrderService и распространяются посредством событий.\n */\nexport class PaymentAddressOrderComponent {\n    constructor(_orderService, _statefulEventEmitterService, _modalService) {\n        this._orderService = _orderService;\n        this._statefulEventEmitterService = _statefulEventEmitterService;\n        this._modalService = _modalService;\n        this._template = document.querySelector('#order');\n    }\n    /**\n     * Рендерит форму с полем ввода адреса и кнопками выбора способа оплаты (наличные или карта).\n     * Также настраивает реактивное отображение ошибок валидации и отключение кнопки сабмита.\n     *\n     * @returns {HTMLElement} HTML-элемент формы для вставки в DOM.\n     */\n    render() {\n        // здесь не происходит поиск в корневом дереве. происходит получение старого элемента по ссылке и каждый раз происходит поиск внутри клонированного элемента. не происходит поиск в корневом дереве. нельзя записывать элементы в this, так как это по функционалу класса метод render может вызываться сколько угодно раз и прошлые клонированные элементы в this не будут хранить реальное состояние\n        const element = cloneTemplate(this._template);\n        const btnOnline = element.querySelector('[name=\"card\"]');\n        const btnOffline = element.querySelector('[name=\"cash\"]');\n        const inputAddress = element.querySelector('[name=\"address\"]');\n        const submitBtn = element.querySelector('.order__button');\n        const errors = element.querySelector('.form__errors');\n        const form = element;\n        this._setPaymentMethod('online', btnOnline, btnOffline);\n        btnOnline.addEventListener('click', () => {\n            this._setPaymentMethod('online', btnOnline, btnOffline);\n        });\n        btnOffline.addEventListener('click', () => {\n            this._setPaymentMethod('offline', btnOnline, btnOffline);\n        });\n        inputAddress.addEventListener('input', () => {\n            this._orderService.setAddress(inputAddress.value);\n        });\n        const unsubscribe = this._orderService.onFormStateChange(['address'], (state) => {\n            var _a;\n            errors.textContent = (_a = state.errors.address) !== null && _a !== void 0 ? _a : '';\n            submitBtn.disabled = !state.isValid;\n        });\n        form.addEventListener('submit', (event) => {\n            event.preventDefault();\n            this._statefulEventEmitterService.emit(EventNames.OPEN_ORDER_EMAIL_PHONE);\n        });\n        // при закрытии модалки ручном (крестик, ESC) сбрасываем состояние заказа\n        this._modalService.onCloseOnce(this, () => {\n            this._orderService.clear();\n            unsubscribe();\n        });\n        return element;\n    }\n    /**\n     * Обновляет CSS-классы активного состояния для кнопок способов оплаты.\n     *\n     * @param method - Выбранный способ оплаты.\n     * @param btnOnline - Кнопка \"Онлайн\".\n     * @param btnOffline - Кнопка \"При получении\".\n     */\n    _updatePaymentButtonStyles(method, btnOnline, btnOffline) {\n        btnOnline.classList.toggle('button_alt-active', method === 'online');\n        btnOffline.classList.toggle('button_alt-active', method === 'offline');\n    }\n    /**\n     * Устанавливает выбранный способ оплаты в модель (OrderService)\n     * и обновляет отображение активной кнопки.\n     *\n     * @param currentMethod - Новый способ оплаты ('online' или 'offline').\n     * @param btnOnline - Кнопка \"Онлайн\".\n     * @param btnOffline - Кнопка \"При получении\".\n     */\n    _setPaymentMethod(currentMethod, btnOnline, btnOffline) {\n        this._orderService.setPaymentMethod(currentMethod);\n        this._updatePaymentButtonStyles(currentMethod, btnOnline, btnOffline);\n    }\n}\n","import { cloneTemplate } from \"../../utils/utils\";\n/**\n * Компонент отображения успешного оформления заказа.\n *\n * Основные обязанности:\n * - Показывать информацию об успешно оформленном заказе, включая списанную сумму.\n * - Обеспечивать закрытие модального окна по клику на кнопку \"Закрыть\".\n * - Сброс состояния заказа и корзины при закрытии модального окна.\n */\nexport class SuccessOrderComponent {\n    constructor(_modalService) {\n        this._modalService = _modalService;\n        this._successOrderTemplate = document.querySelector('#success');\n    }\n    /**\n     * Рендерит элемент с сообщением об успешном оформлении заказа.\n     *\n     * @returns HTMLElement, содержащий сообщение об успехе и кнопку закрытия\n     */\n    render(res) {\n        // здесь не происходит поиск в корневом дереве. происходит получение старого элемента по ссылке и каждый раз происходит поиск внутри клонированного элемента. не происходит поиск в корневом дереве. нельзя записывать элементы в this, так как это по функционалу класса метод render может вызываться сколько угодно раз и прошлые клонированные элементы в this не будут хранить реальное состояние\n        const successOrderElement = cloneTemplate(this._successOrderTemplate);\n        const descriptionElement = successOrderElement.querySelector('.order-success__description');\n        const successBtnElement = successOrderElement.querySelector('.order-success__close');\n        descriptionElement.textContent = `Списано ${res.total} синапсов`;\n        successBtnElement.addEventListener('click', () => {\n            this._modalService.close(successOrderElement);\n        });\n        return successOrderElement;\n    }\n}\n","import { AppController } from \"../../../app.controller\";\nimport { ApiOrderService } from \"../../../services/api-order.service\";\nimport { ApiProductsService } from \"../../../services/api-products.service\";\nimport { BasketService } from \"../../../services/basket.service\";\nimport { ModalService } from \"../../../services/modal.service\";\nimport { OrderService } from \"../../../services/order.service\";\nimport { ProductsService } from \"../../../services/products.service\";\nimport { StatefulEventEmitterService } from \"../../../services/stateful-event-emitter.service\";\nimport { ValidationOrderService } from \"../../../services/validation-order.service\";\nimport { BasketCardComponent } from \"../basket-card.component\";\nimport { BasketHeaderComponent } from \"../basket-header.component\";\nimport { BasketComponent } from \"../basket.component\";\nimport { CardCatalogComponent } from \"../card-catalog.component\";\nimport { CardFullComponent } from \"../card-full.component\";\nimport { EmailPhoneOrderComponent } from \"../email-phone-order.component\";\nimport { GalleryComponent } from \"../gallery.component\";\nimport { ModalComponent } from \"../modal.component\";\nimport { PaymentAddressOrderComponent } from \"../payment-address-order.component\";\nimport { SuccessOrderComponent } from \"../succes-order.component\";\nimport { container } from \"./di-container\";\n/**\n * Регистрирует все необходимые зависимости в глобальном DI контейнере.\n *\n * Выполняет регистрацию сервисов, компонентов и контроллеров с указанием их зависимостей,\n * что позволяет контейнеру управлять созданием экземпляров и их инъекцией.\n *\n * Используется для единой централизованной настройки всех классов приложения,\n * чтобы при запросе нужного класса контейнер мог автоматически разрешить\n * и передать все необходимые зависимости.\n */\nexport function registerDependencies() {\n    container.register(ApiOrderService);\n    container.register(ApiProductsService);\n    container.register(StatefulEventEmitterService);\n    container.register(ValidationOrderService);\n    container.register(ModalComponent);\n    container.register(ModalService, { deps: [ModalComponent] });\n    container.register(CardCatalogComponent, { deps: [StatefulEventEmitterService] });\n    container.register(GalleryComponent, { deps: [CardCatalogComponent] });\n    container.register(BasketHeaderComponent, { deps: [StatefulEventEmitterService] });\n    container.register(BasketService, { deps: [StatefulEventEmitterService] });\n    container.register(CardFullComponent, { deps: [BasketService] });\n    container.register(BasketCardComponent, { deps: [BasketService] });\n    container.register(BasketComponent, { deps: [BasketService, BasketCardComponent, StatefulEventEmitterService, ModalService] });\n    container.register(OrderService, { deps: [StatefulEventEmitterService, ValidationOrderService, ApiOrderService, BasketService] });\n    container.register(PaymentAddressOrderComponent, { deps: [OrderService, StatefulEventEmitterService, ModalService] });\n    container.register(EmailPhoneOrderComponent, { deps: [OrderService, ModalService, BasketService] });\n    container.register(SuccessOrderComponent, { deps: [ModalService] });\n    container.register(ProductsService, { deps: [ApiProductsService, StatefulEventEmitterService] });\n    container.register(AppController, {\n        deps: [\n            StatefulEventEmitterService,\n            ModalService,\n            GalleryComponent,\n            BasketHeaderComponent,\n            BasketService,\n            CardFullComponent,\n            BasketComponent,\n            PaymentAddressOrderComponent,\n            EmailPhoneOrderComponent,\n            SuccessOrderComponent,\n            ProductsService\n        ]\n    });\n}\n","import './scss/styles.scss';\nimport { AppController } from './app.controller';\nimport { container } from './components/features/di/di-container';\nimport { registerDependencies } from './components/features/di/di-setup';\n/**\n * Точка входа в приложение.\n *\n * Выполняет регистрацию всех зависимостей через функцию `registerDependencies`,\n * затем создаёт и инициализирует главный контроллер приложения `AppController`\n * с помощью DI-контейнера.\n *\n * Такой подход обеспечивает централизованное управление зависимостями\n * и структурированное начало работы приложения.\n */\nregisterDependencies();\nconst appController = container.resolve(AppController);\nappController.init();\n"],"names":["EventNames","AppController","_statefulEventEmitterService","_modalService","_galleryComponent","_basketHeaderComponent","_basketService","_cardFullComponent","_basketComponent","_paymentAddressOrderComponent","_emailPhoneOrderComponent","_successOrderComponent","_productsService","_classCallCheck","this","_createClass","key","value","init","_loadProductsAndRender","_initCustomEventListeners","_this","getAll","products","renderProductList","_this2","on","OPEN_CARD_FULL","product","open","render","onBasket","setQuantityProductsInBasket","length","OPEN_CART","OPEN_ORDER_ADDRESS_PAYMENT","OPEN_ORDER_EMAIL_PHONE","OPEN_SUCCESS_ORDER","res","container","DIContainer","_registry","Map","_singletons","register","DIProvider","_a","_b","_c","name","useClass","deps","inject","expectedLength","Error","concat","set","scope","resolve","get","has","dependencies","map","dep","instance","_construct","_toConsumableArray","Api","baseUrl","options","arguments","undefined","headers","Object","assign","uri","fetch","method","then","handleResponse","post","data","body","JSON","stringify","response","ok","json","Promise","reject","error","statusText","API_ORIGIN","API_URL","CDN_URL","categoryCompareObj","ApiService","_Api","_inherits","_super","_createSuper","call","ApiOrderService","_ApiService","send","createOrderRequest","ApiProductsService","productsResponse","items","getById","id","BasketService","productsInBasket","getLast","BASKET","find","getPriceBasket","reduce","acc","price","add","item","emit","offAllByEventName","remove","filteredProductsInBasket","filter","callback","offBasket","off","onBasketById","offBasketById","clear","ModalService","_modalComponent","_currentModal","_onCloseListeners","_onCloseOnceListeners","content","renderArgs","element","_resolveElement","_isComponent","__modalElement","close","modal","component","onClose","onOpen","_invokeAllCloseCallbacks","_handleModalClose","elementToClose","maybeRendered","console","warn","target","setTimeout","_onClose","Set","onCloseOnce","_this3","_onCloseOnce","callbacks","_step","_iterator","_createForOfIteratorHelper","s","n","done","cb","err","e","f","onceCallbacks","_step2","_iterator2","Array","isArray","apply","obj","_typeof","OrderService","_validationOrderService","_apiOrderService","updateEmail","email","_emitOrderUpdate","updatePhone","phone","setAddress","address","setPaymentMethod","payment","clearLast","ORDER_CHANGED","onFormStateChange","fields","hasChanged","handler","order","some","field","result","validate","submit","_getCurrentOrder","p","total","validation","isValid","alert","errors","partialOrder","currentOrder","newOrder","ProductsService","_apiProductsService","onDestroy","_update","_callback","PRODUCTS_CHANGED","StatefulEventEmitterService","_EventEmitter","_lastValues","eventName","_get","_getPrototypeOf","prototype","_events","EventEmitter","size","forEach","subscribers","RegExp","test","onAll","offAll","trigger","context","event","ValidationOrderService","_validateField","keys","isSelector","x","ensureElement","selectorElement","elements","ensureAllElements","document","from","querySelectorAll","NodeList","pop","HTMLElement","cloneTemplate","query","firstElementChild","cloneNode","getProductPriceText","getProductCategoryCssClass","category","categoryItem","getCdnImgUrl","img","BasketCardComponent","_deleteProduct","_basketCardTemplate","querySelector","createElement","index","basketCardElement","basketItemIndexElemet","basketItemTitleElement","basketItemPriceElement","basketItemDeleteBtnElement","textContent","title","addEventListener","BasketHeaderComponent","_headerBasketElement","_counterElement","_initEventListeners","quantity","String","BasketComponent","_basketCardComponent","_basketTemplate","basketElement","listElement","priceElement","submitBtnElement","renderAll","_renderActionsInfo","_appendBasketElements","onBasketCallback","i","appendChild","priceBasket","disabled","listItemEmptyElement","classList","CardCatalogComponent","_cardCatalogClick","_cardCatalogTemplateElement","cardCatalogElement","cardCategory","cardTitle","cardImg","cardPrice","alt","src","image","CardFullComponent","_template","btn","isInBasket","_handleBtnClick","EmailPhoneOrderComponent","_orderService","inputEmail","inputPhone","submitButton","formErrors","emailErrorEl","phoneErrorEl","append","subsFormState","state","innerHTML","preventDefault","GalleryComponent","_cardCatalogComponent","_galleryElement","cardElement","ModalComponent","_openCallback","_closeCallback","_isOpen","_pointerDownInsideModal","_pointerUpInsideModal","_modalContainerElement","_destroyEventListeners","_onPointerDown","_modalContentElement","contains","_onPointerUp","_closeByOverlay","_closeByEsc","_modalCloseElement","isAlreadyOpen","window","removeEventListener","PaymentAddressOrderComponent","btnOnline","btnOffline","inputAddress","submitBtn","form","_setPaymentMethod","unsubscribe","_updatePaymentButtonStyles","toggle","currentMethod","SuccessOrderComponent","_successOrderTemplate","successOrderElement","descriptionElement","successBtnElement","registerDependencies"],"sourceRoot":""}
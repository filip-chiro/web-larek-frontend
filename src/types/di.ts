/**
 * Конструктор класса с любым числом аргументов и типом возвращаемого объекта T.
 * @template T Тип создаваемого экземпляра.
 */
export type DIConstructor<T = any> = new (...args: any[]) => T;

/**
 * Область жизненного цикла экземпляра в DI-контейнере.
 * - 'singleton' — один экземпляр на весь контейнер (по умолчанию).
 * - 'transient' — новый экземпляр при каждом запросе.
 */
export type DIScope = 'singleton' | 'transient';

/**
 * Провайдер для регистрации зависимости в DI контейнере.
 * @template T Тип экземпляра, который создаётся.
 */
export interface DIProvider<T = any> {
  /** Класс, создаваемый контейнером */
  useClass: DIConstructor<T>;
  /** Зависимости, которые будут переданы в конструктор */
  deps?: (string | DIConstructor)[];
  /** Область жизненного цикла экземпляра */
  scope?: DIScope; // по умолчанию singleton
}

/**
 * Интерфейс для классов, которые можно инжектить через DI.
 * Может содержать статическое поле `inject` с перечислением зависимостей.
 * @template T Тип создаваемого экземпляра.
 */
export interface DIInjectable<T = any> {
  new (...args: any[]): T;
  /** Массив конструкторов зависимостей для инъекции */
  inject?: DIConstructor<any>[];
}
